{
    "name": "squadcast",
    "displayName": "Squadcast",
    "description": "A Pulumi package for creating and managing Squadcast resources",
    "keywords": [
        "pulumi",
        "squadcast",
        "category/cloud"
    ],
    "homepage": "https://github.com/IrisDande/pulumi-squadcast",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`squadcast` Terraform Provider](https://github.com/SquadcastHub/terraform-provider-squadcast).",
    "repository": "https://github.com/IrisDande/pulumi-squadcast",
    "logoUrl": "https://raw.githubusercontent.com/IrisDande/pulumi-squadcast/main/docs/squadcast.png",
    "pluginDownloadURL": "github://api.github.com/IrisDande/pulumi-squadcast",
    "publisher": "IrisDande",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "squadcast": "Squadcast"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "IrisDanded.Pulumi"
        },
        "go": {
            "importBasePath": "github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "com.IrisDanded.Pulumi",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@irisdanded/pulumi-squadcast",
            "packageDescription": "A Pulumi package for creating and managing Squadcast resources. Based on terraform-provider-squadcast: version v1.8.0",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/SquadcastHub/terraform-provider-squadcast)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-squadcast` repo](https://github.com/IrisDande/pulumi-squadcast/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-squadcast` repo](https://github.com/SquadcastHub/terraform-provider-squadcast/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "irisdanded_squadcast_pulumi",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/SquadcastHub/terraform-provider-squadcast)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-squadcast` repo](https://github.com/IrisDande/pulumi-squadcast/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-squadcast` repo](https://github.com/SquadcastHub/terraform-provider-squadcast/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "refreshToken": {
                "type": "string",
                "description": "The refresh token, This can be created from user profile\n",
                "secret": true
            },
            "region": {
                "type": "string",
                "description": "The region you are currently hosted on.Supported values are \"us\" and \"eu\"\n"
            }
        }
    },
    "types": {
        "squadcast:deduplication/RulesRule:RulesRule": {
            "properties": {
                "basicExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:deduplication/RulesRuleBasicExpression:RulesRuleBasicExpression"
                    },
                    "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "dependencyDeduplication": {
                    "type": "boolean",
                    "description": "Denotes if dependent services should also be deduplicated\n"
                },
                "description": {
                    "type": "string",
                    "description": "description.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "isBasic": {
                    "type": "boolean",
                    "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                },
                "timeUnit": {
                    "type": "string",
                    "description": "time unit (mins or hours)\n"
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "integer for time_unit\n"
                }
            },
            "type": "object",
            "required": [
                "isBasic"
            ]
        },
        "squadcast:deduplication/RulesRuleBasicExpression:RulesRuleBasicExpression": {
            "properties": {
                "lhs": {
                    "type": "string",
                    "description": "left hand side dropdown value\n"
                },
                "op": {
                    "type": "string",
                    "description": "operator\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "right hand side value\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "op",
                "rhs"
            ]
        },
        "squadcast:index/DeduplicationRuleV2BasicExpression:DeduplicationRuleV2BasicExpression": {
            "properties": {
                "lhs": {
                    "type": "string",
                    "description": "left hand side dropdown value\n"
                },
                "op": {
                    "type": "string",
                    "description": "operator (is, is*not, matches, not*contains)\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "right hand side value\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "op",
                "rhs"
            ]
        },
        "squadcast:index/EscalationPolicyEntityOwner:EscalationPolicyEntityOwner": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Escalation policy owner id.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Escalation policy owner type. Supported values are 'user' or 'squad'.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "squadcast:index/EscalationPolicyRepeat:EscalationPolicyRepeat": {
            "properties": {
                "delayMinutes": {
                    "type": "integer",
                    "description": "The number of minutes to wait before repeating the escalation policy\n"
                },
                "times": {
                    "type": "integer",
                    "description": "The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times\n"
                }
            },
            "type": "object",
            "required": [
                "delayMinutes",
                "times"
            ]
        },
        "squadcast:index/EscalationPolicyRule:EscalationPolicyRule": {
            "properties": {
                "delayMinutes": {
                    "type": "integer"
                },
                "notificationChannels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Notification channels to notify the targets. (SMS, Phone, Email, Push)\n"
                },
                "repeat": {
                    "$ref": "#/types/squadcast:index/EscalationPolicyRuleRepeat:EscalationPolicyRuleRepeat",
                    "description": "repeat this rule\n"
                },
                "roundRobin": {
                    "$ref": "#/types/squadcast:index/EscalationPolicyRuleRoundRobin:EscalationPolicyRuleRoundRobin"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/EscalationPolicyRuleTarget:EscalationPolicyRuleTarget"
                    }
                }
            },
            "type": "object",
            "required": [
                "delayMinutes",
                "targets"
            ]
        },
        "squadcast:index/EscalationPolicyRuleRepeat:EscalationPolicyRuleRepeat": {
            "properties": {
                "delayMinutes": {
                    "type": "integer",
                    "description": "repeat after minutes\n"
                },
                "times": {
                    "type": "integer",
                    "description": "repeat times\n"
                }
            },
            "type": "object",
            "required": [
                "delayMinutes",
                "times"
            ]
        },
        "squadcast:index/EscalationPolicyRuleRoundRobin:EscalationPolicyRuleRoundRobin": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enables Round Robin escalation within this layer\n"
                },
                "rotation": {
                    "$ref": "#/types/squadcast:index/EscalationPolicyRuleRoundRobinRotation:EscalationPolicyRuleRoundRobinRotation"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "squadcast:index/EscalationPolicyRuleRoundRobinRotation:EscalationPolicyRuleRoundRobinRotation": {
            "properties": {
                "delayMinutes": {
                    "type": "integer",
                    "description": "repeat after minutes\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "enable rotation within\n"
                }
            },
            "type": "object"
        },
        "squadcast:index/EscalationPolicyRuleTarget:EscalationPolicyRuleTarget": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the target\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the target. (user, squad, schedule, schedulev2)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "squadcast:index/GerEntityOwner:GerEntityOwner": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "GER owner id.\n"
                },
                "type": {
                    "type": "string",
                    "description": "GER owner type. Supported values are 'user' or 'squad'.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "squadcast:index/RoutingRuleV2BasicExpression:RoutingRuleV2BasicExpression": {
            "properties": {
                "lhs": {
                    "type": "string",
                    "description": "left hand side dropdown value\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "right hand side value\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "rhs"
            ]
        },
        "squadcast:index/RunbookEntityOwner:RunbookEntityOwner": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Runbook owner id.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Runbook owner type. Supported values are 'user' or 'squad'.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "squadcast:index/RunbookStep:RunbookStep": {
            "properties": {
                "content": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "content"
            ]
        },
        "squadcast:index/ScheduleRotationV2ParticipantGroup:ScheduleRotationV2ParticipantGroup": {
            "properties": {
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/ScheduleRotationV2ParticipantGroupParticipant:ScheduleRotationV2ParticipantGroupParticipant"
                    },
                    "description": "Group participants.\n"
                }
            },
            "type": "object"
        },
        "squadcast:index/ScheduleRotationV2ParticipantGroupParticipant:ScheduleRotationV2ParticipantGroupParticipant": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Participant id.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Participant type (user, team, squad).\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "squadcast:index/ScheduleRotationV2ShiftTimeslot:ScheduleRotationV2ShiftTimeslot": {
            "properties": {
                "dayOfWeek": {
                    "type": "string",
                    "description": "Defines the day of the week for the shift. If not specified, the timeslot is active on all days of the week.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "Defines the duration of each shift. (in minutes)\n"
                },
                "startHour": {
                    "type": "integer",
                    "description": "Defines the start hour of the each shift in the schedule timezone.\n"
                },
                "startMinute": {
                    "type": "integer",
                    "description": "Defines the start minute of the each shift in the schedule timezone.\n"
                }
            },
            "type": "object",
            "required": [
                "duration",
                "startHour",
                "startMinute"
            ]
        },
        "squadcast:index/ScheduleV2EntityOwner:ScheduleV2EntityOwner": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Schedule owner id.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Schedule owner type. Supported values are 'user' or 'squad'.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "squadcast:index/ScheduleV2Tag:ScheduleV2Tag": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Schedule tag color.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Schedule tag key.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Schedule tag value.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "color",
                        "key",
                        "value"
                    ]
                }
            }
        },
        "squadcast:index/ServiceMaintainer:ServiceMaintainer": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the maintainer.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the maintainer. Supported values are 'user' or 'squad'.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "squadcast:index/ServiceMaintenanceWindow:ServiceMaintenanceWindow": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Starting Time\n"
                },
                "repeatFrequency": {
                    "type": "string",
                    "description": "repeat frequency. ('day', 'week', '2 weeks', '3 weeks', 'month')\n"
                },
                "repeatTill": {
                    "type": "string",
                    "description": "Till when you want to repeat this Maintenance mode\n"
                },
                "till": {
                    "type": "string",
                    "description": "End Time.\n"
                }
            },
            "type": "object",
            "required": [
                "from",
                "till"
            ]
        },
        "squadcast:index/ServiceTag:ServiceTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "key\n"
                },
                "value": {
                    "type": "string",
                    "description": "value\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "squadcast:index/SloEntityOwner:SloEntityOwner": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "SLO owner id.\n"
                },
                "type": {
                    "type": "string",
                    "description": "SLO owner type. Supported values are 'user' or 'squad'.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "squadcast:index/SloNotify:SloNotify": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the notification rule\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service in which the user want to create an incident\n"
                },
                "sloId": {
                    "type": "integer",
                    "description": "The ID of the SLO.\n"
                },
                "squadIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Squad ID's who should be alerted via email.\n"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of user ID's who should be alerted via email.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "sloId"
                    ]
                }
            }
        },
        "squadcast:index/SloRule:SloRule": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of the monitoring rule\n"
                },
                "isChecked": {
                    "type": "boolean",
                    "description": "Is checked?\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of monitoring check.\"Supported values are \"breached*error*budget\", \"unhealthy*slo\",\"increased*false*positives\", \"remaining*error_budget\"\n"
                },
                "sloId": {
                    "type": "integer",
                    "description": "The ID of the SLO\n"
                },
                "threshold": {
                    "type": "integer",
                    "description": "Threshold for the monitoring checkOnly supported for rules name \"increased*false*positives\" and \"remaining*error*budget\"\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "isChecked",
                        "name",
                        "sloId"
                    ]
                }
            }
        },
        "squadcast:index/StatusPageOwner:StatusPageOwner": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Status page owner id.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Status page owner type Supported values are 'user' or 'squad'.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "squadcast:index/StatusPageThemeColor:StatusPageThemeColor": {
            "properties": {
                "primary": {
                    "type": "string",
                    "description": "Primary color.\n"
                },
                "secondary": {
                    "type": "string",
                    "description": "Secondary color.\n"
                }
            },
            "type": "object",
            "required": [
                "primary",
                "secondary"
            ]
        },
        "squadcast:index/SuppressionRuleV2BasicExpression:SuppressionRuleV2BasicExpression": {
            "properties": {
                "lhs": {
                    "type": "string",
                    "description": "left hand side dropdown value\n"
                },
                "op": {
                    "type": "string",
                    "description": "operator (is, is*not, matches, not*contains)\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "right hand side value\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "op",
                "rhs"
            ]
        },
        "squadcast:index/SuppressionRuleV2Timeslot:SuppressionRuleV2Timeslot": {
            "properties": {
                "customs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/SuppressionRuleV2TimeslotCustom:SuppressionRuleV2TimeslotCustom"
                    },
                    "description": "Use this field to specify the custom time slots for which this rule should be applied. This field is only applicable when the repetition field is set to custom.\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "Defines the end date of the time slot\n"
                },
                "endsNever": {
                    "type": "boolean",
                    "description": "Defines whether the time slot ends or not\n"
                },
                "endsOn": {
                    "type": "string",
                    "description": "Defines the end date of the repetition\n"
                },
                "isAllday": {
                    "type": "boolean",
                    "description": "Defines if the time slot is an all day slot\n"
                },
                "isCustom": {
                    "type": "boolean",
                    "description": "Defines whether repetition is custom or not\n"
                },
                "repetition": {
                    "type": "string",
                    "description": "Defines the repetition of the time slot\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Defines the start date of the time slot\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Time zone for the time slot\n"
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "endsOn",
                "repetition",
                "startTime",
                "timeZone"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endTime",
                        "endsOn",
                        "isCustom",
                        "repetition",
                        "startTime",
                        "timeZone"
                    ]
                }
            }
        },
        "squadcast:index/SuppressionRuleV2TimeslotCustom:SuppressionRuleV2TimeslotCustom": {
            "properties": {
                "repeats": {
                    "type": "string",
                    "description": "Determines how often the rule repeats. Valid values are day, week, month.\n"
                },
                "repeatsCount": {
                    "type": "integer",
                    "description": "Number of times to repeat.\n"
                },
                "repeatsOnMonth": {
                    "type": "string",
                    "description": "Repeats on month.\n"
                },
                "repeatsOnWeekdays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of weekdays to repeat on.\n"
                }
            },
            "type": "object",
            "required": [
                "repeats"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "repeats",
                        "repeatsOnMonth"
                    ]
                }
            }
        },
        "squadcast:index/TaggingRuleV2BasicExpression:TaggingRuleV2BasicExpression": {
            "properties": {
                "lhs": {
                    "type": "string",
                    "description": "left hand side dropdown value\n"
                },
                "op": {
                    "type": "string",
                    "description": "operator (is, is*not, matches, not*contains)\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "right hand side value\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "op",
                "rhs"
            ]
        },
        "squadcast:index/TaggingRuleV2Tag:TaggingRuleV2Tag": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Tag color, hex values\n"
                },
                "key": {
                    "type": "string",
                    "description": "key\n"
                },
                "value": {
                    "type": "string",
                    "description": "value\n"
                }
            },
            "type": "object",
            "required": [
                "color",
                "key",
                "value"
            ]
        },
        "squadcast:index/WebformInputField:WebformInputField": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Input field Label.\n"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Input field options.\n"
                }
            },
            "type": "object"
        },
        "squadcast:index/WebformOwner:WebformOwner": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Form owner id.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Form owner name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Form owner type Supported values are 'user' or 'squad'.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "type"
                    ]
                }
            }
        },
        "squadcast:index/WebformService:WebformService": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "Service alias.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Service name.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service ID.\n"
                }
            },
            "type": "object",
            "required": [
                "serviceId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "serviceId"
                    ]
                }
            }
        },
        "squadcast:index/WebformSeverity:WebformSeverity": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Severity description.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Severity type.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "squadcast:index/WorkflowActionChannel:WorkflowActionChannel": {
            "properties": {
                "displayText": {
                    "type": "string",
                    "description": "The display text of the communication channel\n"
                },
                "link": {
                    "type": "string",
                    "description": "The link of the communication channel\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the communication channel\n"
                }
            },
            "type": "object",
            "required": [
                "displayText",
                "link",
                "type"
            ]
        },
        "squadcast:index/WorkflowActionComponentAndImpact:WorkflowActionComponentAndImpact": {
            "properties": {
                "componentId": {
                    "type": "integer",
                    "description": "The ID of the component\n"
                },
                "impactStatusId": {
                    "type": "integer",
                    "description": "The ID of the impact status\n"
                }
            },
            "type": "object",
            "required": [
                "componentId",
                "impactStatusId"
            ]
        },
        "squadcast:index/WorkflowActionHeader:WorkflowActionHeader": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the header\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the header\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "squadcast:index/WorkflowActionStatusAndMessage:WorkflowActionStatusAndMessage": {
            "properties": {
                "messages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The messages to be set for the issue\n"
                },
                "statusId": {
                    "type": "integer",
                    "description": "The ID of the status\n"
                }
            },
            "type": "object",
            "required": [
                "statusId"
            ]
        },
        "squadcast:index/WorkflowEntityOwner:WorkflowEntityOwner": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of this resource.\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ]
        },
        "squadcast:index/WorkflowFilters:WorkflowFilters": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be applied on the filters (and / or)\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowFiltersFilter:WorkflowFiltersFilter"
                    }
                }
            },
            "type": "object",
            "required": [
                "condition"
            ]
        },
        "squadcast:index/WorkflowFiltersFilter:WorkflowFiltersFilter": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "Condition to be applied on the filters (and / or)\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowFiltersFilterFilter:WorkflowFiltersFilterFilter"
                    }
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "squadcast:index/WorkflowFiltersFilterFilter:WorkflowFiltersFilterFilter": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "squadcast:index/WorkflowTag:WorkflowTag": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "key",
                "value"
            ]
        },
        "squadcast:index/getEscalationPolicyEntityOwner:getEscalationPolicyEntityOwner": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Escalation policy owner id.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Escalation policy owner type. (user or squad or team)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getEscalationPolicyRepeat:getEscalationPolicyRepeat": {
            "properties": {
                "delayMinutes": {
                    "type": "integer",
                    "description": "The number of minutes to wait before repeating the escalation policy\n"
                },
                "times": {
                    "type": "integer",
                    "description": "The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times\n"
                }
            },
            "type": "object",
            "required": [
                "delayMinutes",
                "times"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getEscalationPolicyRule:getEscalationPolicyRule": {
            "properties": {
                "delayMinutes": {
                    "type": "integer"
                },
                "notificationChannels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "repeats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/getEscalationPolicyRuleRepeat:getEscalationPolicyRuleRepeat"
                    },
                    "description": "repeat this rule\n"
                },
                "roundRobins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/getEscalationPolicyRuleRoundRobin:getEscalationPolicyRuleRoundRobin"
                    }
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/getEscalationPolicyRuleTarget:getEscalationPolicyRuleTarget"
                    }
                }
            },
            "type": "object",
            "required": [
                "delayMinutes",
                "notificationChannels",
                "repeats",
                "roundRobins",
                "targets"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getEscalationPolicyRuleRepeat:getEscalationPolicyRuleRepeat": {
            "properties": {
                "delayMinutes": {
                    "type": "integer",
                    "description": "repeat after minutes\n"
                },
                "times": {
                    "type": "integer",
                    "description": "repeat times\n"
                }
            },
            "type": "object",
            "required": [
                "delayMinutes",
                "times"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getEscalationPolicyRuleRoundRobin:getEscalationPolicyRuleRoundRobin": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Round Robin Escalation is an incident assignment strategy where users are placed in a ring and assigned to incidents sequentially. This strategy can help ensure that incidents are equitably distributed. It can also lower incident response time if a service experiences concurrent incidents, since the incidents will not all be assigned to the same responder.\n"
                },
                "rotations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/getEscalationPolicyRuleRoundRobinRotation:getEscalationPolicyRuleRoundRobinRotation"
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "rotations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getEscalationPolicyRuleRoundRobinRotation:getEscalationPolicyRuleRoundRobinRotation": {
            "properties": {
                "delayMinutes": {
                    "type": "integer",
                    "description": "repeat after minutes\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "enable rotation within\n"
                }
            },
            "type": "object",
            "required": [
                "delayMinutes",
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getEscalationPolicyRuleTarget:getEscalationPolicyRuleTarget": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getRunbookEntityOwner:getRunbookEntityOwner": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Runbook owner id.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Runbook owner type. (user or squad or team)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getRunbookStep:getRunbookStep": {
            "properties": {
                "content": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "content"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getScheduleV2EntityOwner:getScheduleV2EntityOwner": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Schedule owner id.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Schedule owner type (user, team, squad).\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getScheduleV2Tag:getScheduleV2Tag": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Schedule tag color.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Schedule tag key.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Schedule tag value.\n"
                }
            },
            "type": "object",
            "required": [
                "color",
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getServiceMaintainer:getServiceMaintainer": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The id of the maintainer.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the maintainer. (user, team or squad)\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getServiceTag:getServiceTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "key\n"
                },
                "value": {
                    "type": "string",
                    "description": "value\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getTeamMember:getTeamMember": {
            "properties": {
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "userId": {
                    "type": "string",
                    "description": "User id.\n"
                }
            },
            "type": "object",
            "required": [
                "roleIds",
                "userId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getTeamRole:getTeamRole": {
            "properties": {
                "abilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "default": {
                    "type": "boolean",
                    "description": "Role is default.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Role id.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Role name.\n"
                }
            },
            "type": "object",
            "required": [
                "abilities",
                "default",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getUserNotificationRule:getUserNotificationRule": {
            "properties": {
                "delayMinutes": {
                    "type": "integer",
                    "description": "notification rule delay_minutes, (to be deprecated).\n"
                },
                "type": {
                    "type": "string",
                    "description": "Personal notification rule type.\n"
                }
            },
            "type": "object",
            "required": [
                "delayMinutes",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getUserOncallReminderRule:getUserOncallReminderRule": {
            "properties": {
                "delayMinutes": {
                    "type": "integer",
                    "description": "oncall reminder rule delay_minutes.\n"
                },
                "type": {
                    "type": "string",
                    "description": "oncall reminder rule type.\n"
                }
            },
            "type": "object",
            "required": [
                "delayMinutes",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getWebformInputField:getWebformInputField": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Input field Label.\n"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Input field options.\n"
                }
            },
            "type": "object",
            "required": [
                "label",
                "options"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getWebformOwner:getWebformOwner": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Form owner id.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Form owner name.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Form owner type (user, team, squad).\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getWebformService:getWebformService": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "Service alias.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Service name.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service ID.\n"
                }
            },
            "type": "object",
            "required": [
                "alias",
                "name",
                "serviceId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:index/getWebformSeverity:getWebformSeverity": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Severity description.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Severity type.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "squadcast:routing/RulesRule:RulesRule": {
            "properties": {
                "basicExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:routing/RulesRuleBasicExpression:RulesRuleBasicExpression"
                    },
                    "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "isBasic": {
                    "type": "boolean",
                    "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                },
                "routeToId": {
                    "type": "string",
                    "description": "The id of the entity (user, escalation policy, squad) for which we are routing this incident.\n"
                },
                "routeToType": {
                    "type": "string",
                    "description": "Type of the entity for which we are routing this incident - User, Escalation Policy or Squad\n"
                }
            },
            "type": "object",
            "required": [
                "isBasic",
                "routeToId",
                "routeToType"
            ]
        },
        "squadcast:routing/RulesRuleBasicExpression:RulesRuleBasicExpression": {
            "properties": {
                "lhs": {
                    "type": "string",
                    "description": "left hand side dropdown value\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "right hand side value\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "rhs"
            ]
        },
        "squadcast:suppression/RulesRule:RulesRule": {
            "properties": {
                "basicExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:suppression/RulesRuleBasicExpression:RulesRuleBasicExpression"
                    },
                    "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "description": {
                    "type": "string",
                    "description": "description.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "isBasic": {
                    "type": "boolean",
                    "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                },
                "isTimebased": {
                    "type": "boolean",
                    "description": "is_timebased will be true when users use the time based suppression rule\n"
                },
                "timeslots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:suppression/RulesRuleTimeslot:RulesRuleTimeslot"
                    },
                    "description": "The timeslots for which this rule should be applied.\n"
                }
            },
            "type": "object",
            "required": [
                "isBasic"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "isBasic",
                        "isTimebased"
                    ]
                }
            }
        },
        "squadcast:suppression/RulesRuleBasicExpression:RulesRuleBasicExpression": {
            "properties": {
                "lhs": {
                    "type": "string",
                    "description": "left hand side dropdown value\n"
                },
                "op": {
                    "type": "string",
                    "description": "operator\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "right hand side value\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "op",
                "rhs"
            ]
        },
        "squadcast:suppression/RulesRuleTimeslot:RulesRuleTimeslot": {
            "properties": {
                "customs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:suppression/RulesRuleTimeslotCustom:RulesRuleTimeslotCustom"
                    },
                    "description": "Use this field to specify the custom time slots for which this rule should be applied. This field is only applicable when the repetition field is set to custom.\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "Defines the end date of the time slot\n"
                },
                "endsNever": {
                    "type": "boolean",
                    "description": "Defines whether the time slot ends or not\n"
                },
                "endsOn": {
                    "type": "string",
                    "description": "Defines the end date of the repetition\n"
                },
                "isAllday": {
                    "type": "boolean",
                    "description": "Defines if the time slot is an all day slot\n"
                },
                "isCustom": {
                    "type": "boolean",
                    "description": "Defines whether repetition is custom or not\n"
                },
                "repetition": {
                    "type": "string",
                    "description": "Defines the repetition of the time slot\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Defines the start date of the time slot\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Time zone for the time slot\n"
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "endsOn",
                "repetition",
                "startTime",
                "timeZone"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endTime",
                        "endsOn",
                        "isCustom",
                        "repetition",
                        "startTime",
                        "timeZone"
                    ]
                }
            }
        },
        "squadcast:suppression/RulesRuleTimeslotCustom:RulesRuleTimeslotCustom": {
            "properties": {
                "repeats": {
                    "type": "string",
                    "description": "Determines how often the rule repeats. Valid values are day, week, month.\n"
                },
                "repeatsCount": {
                    "type": "integer",
                    "description": "Number of times to repeat.\n"
                },
                "repeatsOnMonth": {
                    "type": "string",
                    "description": "Repeats on month.\n"
                },
                "repeatsOnWeekdays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of weekdays to repeat on.\n"
                }
            },
            "type": "object",
            "required": [
                "repeats"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "repeats",
                        "repeatsOnMonth"
                    ]
                }
            }
        },
        "squadcast:tagging/RulesRule:RulesRule": {
            "properties": {
                "basicExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:tagging/RulesRuleBasicExpression:RulesRuleBasicExpression"
                    },
                    "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "isBasic": {
                    "type": "boolean",
                    "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:tagging/RulesRuleTag:RulesRuleTag"
                    },
                    "description": "The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.\n"
                }
            },
            "type": "object",
            "required": [
                "isBasic"
            ]
        },
        "squadcast:tagging/RulesRuleBasicExpression:RulesRuleBasicExpression": {
            "properties": {
                "lhs": {
                    "type": "string",
                    "description": "left hand side dropdown value\n"
                },
                "op": {
                    "type": "string",
                    "description": "operator\n"
                },
                "rhs": {
                    "type": "string",
                    "description": "right hand side value\n"
                }
            },
            "type": "object",
            "required": [
                "lhs",
                "op",
                "rhs"
            ]
        },
        "squadcast:tagging/RulesRuleTag:RulesRuleTag": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Tag color, hex values\n"
                },
                "key": {
                    "type": "string",
                    "description": "key\n"
                },
                "value": {
                    "type": "string",
                    "description": "value\n"
                }
            },
            "type": "object",
            "required": [
                "color",
                "key",
                "value"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the squadcast package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "refreshToken": {
                "type": "string",
                "description": "The refresh token, This can be created from user profile\n",
                "secret": true
            },
            "region": {
                "type": "string",
                "description": "The region you are currently hosted on.Supported values are \"us\" and \"eu\"\n"
            }
        },
        "inputProperties": {
            "refreshToken": {
                "type": "string",
                "description": "The refresh token, This can be created from user profile\n",
                "secret": true
            },
            "region": {
                "type": "string",
                "description": "The region you are currently hosted on.Supported values are \"us\" and \"eu\"\n"
            }
        }
    },
    "resources": {
        "squadcast:deduplication/rules:Rules": {
            "description": "[Deduplication rules](https://support.squadcast.com/docs/de-duplication-rules) can help you reduce alert noise by organising and grouping alerts. This also provides easy access to similar alerts when needed. When these rules evaluate to true for an incoming incident, alerts will get deduplicated.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleService = exampleTeam.then(exampleTeam =\u003e squadcast.getService({\n    name: \"example service name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleDeduplicationRules = new squadcast.deduplication.Rules(\"exampleDeduplicationRules\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    rules: [\n        {\n            isBasic: false,\n            description: \"not basic\",\n            expression: \"payload[\\\"event_id\\\"] == 40\",\n        },\n        {\n            isBasic: true,\n            description: \"basic\",\n            basicExpressions: [{\n                lhs: \"payload[\\\"foo\\\"]\",\n                op: \"is\",\n                rhs: \"bar\",\n            }],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_service = squadcast.get_service(name=\"example service name\",\n    team_id=example_team.id)\nexample_deduplication_rules = squadcast.deduplication.Rules(\"exampleDeduplicationRules\",\n    team_id=example_team.id,\n    service_id=example_service.id,\n    rules=[\n        squadcast.deduplication.RulesRuleArgs(\n            is_basic=False,\n            description=\"not basic\",\n            expression=\"payload[\\\"event_id\\\"] == 40\",\n        ),\n        squadcast.deduplication.RulesRuleArgs(\n            is_basic=True,\n            description=\"basic\",\n            basic_expressions=[squadcast.deduplication.RulesRuleBasicExpressionArgs(\n                lhs=\"payload[\\\"foo\\\"]\",\n                op=\"is\",\n                rhs=\"bar\",\n            )],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleService = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"example service name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleDeduplicationRules = new Squadcast.Deduplication.Rules(\"exampleDeduplicationRules\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        DeduplicationRules = new[]\n        {\n            new Squadcast.Deduplication.Inputs.RulesRuleArgs\n            {\n                IsBasic = false,\n                Description = \"not basic\",\n                Expression = \"payload[\\\"event_id\\\"] == 40\",\n            },\n            new Squadcast.Deduplication.Inputs.RulesRuleArgs\n            {\n                IsBasic = true,\n                Description = \"basic\",\n                BasicExpressions = new[]\n                {\n                    new Squadcast.Deduplication.Inputs.RulesRuleBasicExpressionArgs\n                    {\n                        Lhs = \"payload[\\\"foo\\\"]\",\n                        Op = \"is\",\n                        Rhs = \"bar\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/deduplication\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"example service name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = deduplication.NewRules(ctx, \"exampleDeduplicationRules\", \u0026deduplication.RulesArgs{\n\t\t\tTeamId:    pulumi.String(exampleTeam.Id),\n\t\t\tServiceId: pulumi.String(exampleService.Id),\n\t\t\tRules: deduplication.RulesRuleArray{\n\t\t\t\t\u0026deduplication.RulesRuleArgs{\n\t\t\t\t\tIsBasic:     pulumi.Bool(false),\n\t\t\t\t\tDescription: pulumi.String(\"not basic\"),\n\t\t\t\t\tExpression:  pulumi.String(\"payload[\\\"event_id\\\"] == 40\"),\n\t\t\t\t},\n\t\t\t\t\u0026deduplication.RulesRuleArgs{\n\t\t\t\t\tIsBasic:     pulumi.Bool(true),\n\t\t\t\t\tDescription: pulumi.String(\"basic\"),\n\t\t\t\t\tBasicExpressions: deduplication.RulesRuleBasicExpressionArray{\n\t\t\t\t\t\t\u0026deduplication.RulesRuleBasicExpressionArgs{\n\t\t\t\t\t\t\tLhs: pulumi.String(\"payload[\\\"foo\\\"]\"),\n\t\t\t\t\t\t\tOp:  pulumi.String(\"is\"),\n\t\t\t\t\t\t\tRhs: pulumi.String(\"bar\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.deduplication.Rules;\nimport com.pulumi.squadcast.deduplication.RulesArgs;\nimport com.pulumi.squadcast.deduplication.inputs.RulesRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"example service name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleDeduplicationRules = new Rules(\"exampleDeduplicationRules\", RulesArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .rules(            \n                RulesRuleArgs.builder()\n                    .isBasic(false)\n                    .description(\"not basic\")\n                    .expression(\"payload[\\\"event_id\\\"] == 40\")\n                    .build(),\n                RulesRuleArgs.builder()\n                    .isBasic(true)\n                    .description(\"basic\")\n                    .basicExpressions(RulesRuleBasicExpressionArgs.builder()\n                        .lhs(\"payload[\\\"foo\\\"]\")\n                        .op(\"is\")\n                        .rhs(\"bar\")\n                        .build())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleDeduplicationRules:\n    type: squadcast:deduplication:Rules\n    properties:\n      teamId: ${exampleTeam.id}\n      serviceId: ${exampleService.id}\n      rules:\n        - isBasic: false\n          description: not basic\n          expression: payload[\"event_id\"] == 40\n        - isBasic: true\n          description: basic\n          basicExpressions:\n            - lhs: payload[\"foo\"]\n              op: is\n              rhs: bar\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: example service name\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:serviceID\n\nUse 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively \n\n```sh\n$ pulumi import squadcast:deduplication/rules:Rules test_resource_name 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5\n```\n\n",
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:deduplication/RulesRule:RulesRule"
                    },
                    "language": {
                        "csharp": {
                            "name": "DeduplicationRules"
                        }
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                }
            },
            "required": [
                "rules",
                "serviceId",
                "teamId"
            ],
            "inputProperties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:deduplication/RulesRule:RulesRule"
                    },
                    "language": {
                        "csharp": {
                            "name": "DeduplicationRules"
                        }
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n",
                    "willReplaceOnChanges": true
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "rules",
                "serviceId",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rules resources.\n",
                "properties": {
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:deduplication/RulesRule:RulesRule"
                        },
                        "language": {
                            "csharp": {
                                "name": "DeduplicationRules"
                            }
                        }
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "Service id.\n",
                        "willReplaceOnChanges": true
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/deduplicationRuleV2:DeduplicationRuleV2": {
            "description": "[Deduplication rules](https://support.squadcast.com/docs/de-duplication-rules) can help you reduce alert noise by organising and grouping alerts. This also provides easy access to similar alerts when needed. When these rules evaluate to true for an incoming incident, alerts will get deduplicated.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleService = exampleTeam.then(exampleTeam =\u003e squadcast.getService({\n    name: \"example service name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleDeduplicationRule = new squadcast.DeduplicationRuleV2(\"exampleDeduplicationRule\", {\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    isBasic: false,\n    description: \"not basic\",\n    expression: \"payload[\\\"event_id\\\"] == 40\",\n});\nconst exampleBasicDeduplicationRule = new squadcast.DeduplicationRuleV2(\"exampleBasicDeduplicationRule\", {\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    isBasic: true,\n    description: \"basic\",\n    dependencyDeduplication: true,\n    timeWindow: 2,\n    timeUnit: \"hour\",\n    basicExpressions: [{\n        lhs: \"payload[\\\"foo\\\"]\",\n        op: \"is\",\n        rhs: \"bar\",\n    }],\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_service = squadcast.get_service(name=\"example service name\",\n    team_id=example_team.id)\nexample_deduplication_rule = squadcast.DeduplicationRuleV2(\"exampleDeduplicationRule\",\n    service_id=example_service.id,\n    is_basic=False,\n    description=\"not basic\",\n    expression=\"payload[\\\"event_id\\\"] == 40\")\nexample_basic_deduplication_rule = squadcast.DeduplicationRuleV2(\"exampleBasicDeduplicationRule\",\n    service_id=example_service.id,\n    is_basic=True,\n    description=\"basic\",\n    dependency_deduplication=True,\n    time_window=2,\n    time_unit=\"hour\",\n    basic_expressions=[squadcast.DeduplicationRuleV2BasicExpressionArgs(\n        lhs=\"payload[\\\"foo\\\"]\",\n        op=\"is\",\n        rhs=\"bar\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleService = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"example service name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleDeduplicationRule = new Squadcast.DeduplicationRuleV2(\"exampleDeduplicationRule\", new()\n    {\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        IsBasic = false,\n        Description = \"not basic\",\n        Expression = \"payload[\\\"event_id\\\"] == 40\",\n    });\n\n    var exampleBasicDeduplicationRule = new Squadcast.DeduplicationRuleV2(\"exampleBasicDeduplicationRule\", new()\n    {\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        IsBasic = true,\n        Description = \"basic\",\n        DependencyDeduplication = true,\n        TimeWindow = 2,\n        TimeUnit = \"hour\",\n        BasicExpressions = new[]\n        {\n            new Squadcast.Inputs.DeduplicationRuleV2BasicExpressionArgs\n            {\n                Lhs = \"payload[\\\"foo\\\"]\",\n                Op = \"is\",\n                Rhs = \"bar\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"example service name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewDeduplicationRuleV2(ctx, \"exampleDeduplicationRule\", \u0026squadcast.DeduplicationRuleV2Args{\n\t\t\tServiceId:   pulumi.String(exampleService.Id),\n\t\t\tIsBasic:     pulumi.Bool(false),\n\t\t\tDescription: pulumi.String(\"not basic\"),\n\t\t\tExpression:  pulumi.String(\"payload[\\\"event_id\\\"] == 40\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewDeduplicationRuleV2(ctx, \"exampleBasicDeduplicationRule\", \u0026squadcast.DeduplicationRuleV2Args{\n\t\t\tServiceId:               pulumi.String(exampleService.Id),\n\t\t\tIsBasic:                 pulumi.Bool(true),\n\t\t\tDescription:             pulumi.String(\"basic\"),\n\t\t\tDependencyDeduplication: pulumi.Bool(true),\n\t\t\tTimeWindow:              pulumi.Int(2),\n\t\t\tTimeUnit:                pulumi.String(\"hour\"),\n\t\t\tBasicExpressions: squadcast.DeduplicationRuleV2BasicExpressionArray{\n\t\t\t\t\u0026squadcast.DeduplicationRuleV2BasicExpressionArgs{\n\t\t\t\t\tLhs: pulumi.String(\"payload[\\\"foo\\\"]\"),\n\t\t\t\t\tOp:  pulumi.String(\"is\"),\n\t\t\t\t\tRhs: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.DeduplicationRuleV2;\nimport com.pulumi.squadcast.DeduplicationRuleV2Args;\nimport com.pulumi.squadcast.inputs.DeduplicationRuleV2BasicExpressionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"example service name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleDeduplicationRule = new DeduplicationRuleV2(\"exampleDeduplicationRule\", DeduplicationRuleV2Args.builder()\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .isBasic(false)\n            .description(\"not basic\")\n            .expression(\"payload[\\\"event_id\\\"] == 40\")\n            .build());\n\n        var exampleBasicDeduplicationRule = new DeduplicationRuleV2(\"exampleBasicDeduplicationRule\", DeduplicationRuleV2Args.builder()\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .isBasic(true)\n            .description(\"basic\")\n            .dependencyDeduplication(true)\n            .timeWindow(2)\n            .timeUnit(\"hour\")\n            .basicExpressions(DeduplicationRuleV2BasicExpressionArgs.builder()\n                .lhs(\"payload[\\\"foo\\\"]\")\n                .op(\"is\")\n                .rhs(\"bar\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleDeduplicationRule:\n    type: squadcast:DeduplicationRuleV2\n    properties:\n      serviceId: ${exampleService.id}\n      isBasic: false\n      description: not basic\n      expression: payload[\"event_id\"] == 40\n  exampleBasicDeduplicationRule:\n    type: squadcast:DeduplicationRuleV2\n    properties:\n      serviceId: ${exampleService.id}\n      isBasic: true\n      description: basic\n      dependencyDeduplication: true\n      timeWindow: 2\n      timeUnit: hour\n      basicExpressions:\n        - lhs: payload[\"foo\"]\n          op: is\n          rhs: bar\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: example service name\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nserviceID:ruleID\n\n```sh\n$ pulumi import squadcast:index/deduplicationRuleV2:DeduplicationRuleV2 test_resource_name 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5\n```\n\n",
            "properties": {
                "basicExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/DeduplicationRuleV2BasicExpression:DeduplicationRuleV2BasicExpression"
                    },
                    "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "dependencyDeduplication": {
                    "type": "boolean",
                    "description": "Denotes if dependent services should also be deduplicated\n"
                },
                "description": {
                    "type": "string",
                    "description": "description.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "isBasic": {
                    "type": "boolean",
                    "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n"
                },
                "timeUnit": {
                    "type": "string",
                    "description": "time unit (mins or hours)\n"
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "integer for time_unit\n"
                }
            },
            "required": [
                "isBasic",
                "serviceId"
            ],
            "inputProperties": {
                "basicExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/DeduplicationRuleV2BasicExpression:DeduplicationRuleV2BasicExpression"
                    },
                    "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "dependencyDeduplication": {
                    "type": "boolean",
                    "description": "Denotes if dependent services should also be deduplicated\n"
                },
                "description": {
                    "type": "string",
                    "description": "description.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "isBasic": {
                    "type": "boolean",
                    "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n",
                    "willReplaceOnChanges": true
                },
                "timeUnit": {
                    "type": "string",
                    "description": "time unit (mins or hours)\n"
                },
                "timeWindow": {
                    "type": "integer",
                    "description": "integer for time_unit\n"
                }
            },
            "requiredInputs": [
                "isBasic",
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeduplicationRuleV2 resources.\n",
                "properties": {
                    "basicExpressions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/DeduplicationRuleV2BasicExpression:DeduplicationRuleV2BasicExpression"
                        },
                        "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                    },
                    "dependencyDeduplication": {
                        "type": "boolean",
                        "description": "Denotes if dependent services should also be deduplicated\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description.\n"
                    },
                    "expression": {
                        "type": "string",
                        "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                    },
                    "isBasic": {
                        "type": "boolean",
                        "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "Service id.\n",
                        "willReplaceOnChanges": true
                    },
                    "timeUnit": {
                        "type": "string",
                        "description": "time unit (mins or hours)\n"
                    },
                    "timeWindow": {
                        "type": "integer",
                        "description": "integer for time_unit\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/escalationPolicy:EscalationPolicy": {
            "description": "[Escalation Policies](https://support.squadcast.com/docs/escalation-policies) defines rules indicating when and how alerts will escalate to various Users, Squads and (or) Schedules within your Organization. The name of the Escalation Policy must be unique within and across Teams.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleUser = squadcast.getUser({\n    email: \"test@example.com\",\n});\nconst exampleSquad = exampleTeam.then(exampleTeam =\u003e squadcast.getSquad({\n    name: \"example squad name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleScheduleV2 = exampleTeam.then(exampleTeam =\u003e squadcast.getScheduleV2({\n    name: \"example schedule name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleEscalaionPolicy = new squadcast.EscalationPolicy(\"exampleEscalaionPolicy\", {\n    description: \"It's an amazing policy\",\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    rules: [\n        {\n            delayMinutes: 0,\n            targets: [\n                {\n                    id: exampleUser.then(exampleUser =\u003e exampleUser.id),\n                    type: \"user\",\n                },\n                {\n                    id: exampleScheduleV2.then(exampleScheduleV2 =\u003e exampleScheduleV2.id),\n                    type: \"schedulev2\",\n                },\n            ],\n        },\n        {\n            delayMinutes: 5,\n            targets: [\n                {\n                    id: exampleUser.then(exampleUser =\u003e exampleUser.id),\n                    type: \"user\",\n                },\n                {\n                    id: exampleSquad.then(exampleSquad =\u003e exampleSquad.id),\n                    type: \"squad\",\n                },\n            ],\n            notificationChannels: [\"Phone\"],\n            repeat: {\n                times: 1,\n                delayMinutes: 5,\n            },\n        },\n        {\n            delayMinutes: 10,\n            targets: [\n                {\n                    id: exampleSquad.then(exampleSquad =\u003e exampleSquad.id),\n                    type: \"squad\",\n                },\n                {\n                    id: exampleScheduleV2.then(exampleScheduleV2 =\u003e exampleScheduleV2.id),\n                    type: \"schedulev2\",\n                },\n            ],\n            roundRobin: {\n                enabled: true,\n                rotation: {\n                    enabled: true,\n                    delayMinutes: 1,\n                },\n            },\n        },\n    ],\n    repeat: {\n        times: 2,\n        delayMinutes: 10,\n    },\n    entityOwner: {\n        id: exampleUser.then(exampleUser =\u003e exampleUser.id),\n        type: \"user\",\n    },\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_user = squadcast.get_user(email=\"test@example.com\")\nexample_squad = squadcast.get_squad(name=\"example squad name\",\n    team_id=example_team.id)\nexample_schedule_v2 = squadcast.get_schedule_v2(name=\"example schedule name\",\n    team_id=example_team.id)\nexample_escalaion_policy = squadcast.EscalationPolicy(\"exampleEscalaionPolicy\",\n    description=\"It's an amazing policy\",\n    team_id=example_team.id,\n    rules=[\n        squadcast.EscalationPolicyRuleArgs(\n            delay_minutes=0,\n            targets=[\n                squadcast.EscalationPolicyRuleTargetArgs(\n                    id=example_user.id,\n                    type=\"user\",\n                ),\n                squadcast.EscalationPolicyRuleTargetArgs(\n                    id=example_schedule_v2.id,\n                    type=\"schedulev2\",\n                ),\n            ],\n        ),\n        squadcast.EscalationPolicyRuleArgs(\n            delay_minutes=5,\n            targets=[\n                squadcast.EscalationPolicyRuleTargetArgs(\n                    id=example_user.id,\n                    type=\"user\",\n                ),\n                squadcast.EscalationPolicyRuleTargetArgs(\n                    id=example_squad.id,\n                    type=\"squad\",\n                ),\n            ],\n            notification_channels=[\"Phone\"],\n            repeat=squadcast.EscalationPolicyRuleRepeatArgs(\n                times=1,\n                delay_minutes=5,\n            ),\n        ),\n        squadcast.EscalationPolicyRuleArgs(\n            delay_minutes=10,\n            targets=[\n                squadcast.EscalationPolicyRuleTargetArgs(\n                    id=example_squad.id,\n                    type=\"squad\",\n                ),\n                squadcast.EscalationPolicyRuleTargetArgs(\n                    id=example_schedule_v2.id,\n                    type=\"schedulev2\",\n                ),\n            ],\n            round_robin=squadcast.EscalationPolicyRuleRoundRobinArgs(\n                enabled=True,\n                rotation=squadcast.EscalationPolicyRuleRoundRobinRotationArgs(\n                    enabled=True,\n                    delay_minutes=1,\n                ),\n            ),\n        ),\n    ],\n    repeat=squadcast.EscalationPolicyRepeatArgs(\n        times=2,\n        delay_minutes=10,\n    ),\n    entity_owner=squadcast.EscalationPolicyEntityOwnerArgs(\n        id=example_user.id,\n        type=\"user\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleUser = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"test@example.com\",\n    });\n\n    var exampleSquad = Squadcast.GetSquad.Invoke(new()\n    {\n        Name = \"example squad name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleScheduleV2 = Squadcast.GetScheduleV2.Invoke(new()\n    {\n        Name = \"example schedule name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleEscalaionPolicy = new Squadcast.EscalationPolicy(\"exampleEscalaionPolicy\", new()\n    {\n        Description = \"It's an amazing policy\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        Rules = new[]\n        {\n            new Squadcast.Inputs.EscalationPolicyRuleArgs\n            {\n                DelayMinutes = 0,\n                Targets = new[]\n                {\n                    new Squadcast.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Id = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n                        Type = \"user\",\n                    },\n                    new Squadcast.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Id = exampleScheduleV2.Apply(getScheduleV2Result =\u003e getScheduleV2Result.Id),\n                        Type = \"schedulev2\",\n                    },\n                },\n            },\n            new Squadcast.Inputs.EscalationPolicyRuleArgs\n            {\n                DelayMinutes = 5,\n                Targets = new[]\n                {\n                    new Squadcast.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Id = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n                        Type = \"user\",\n                    },\n                    new Squadcast.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Id = exampleSquad.Apply(getSquadResult =\u003e getSquadResult.Id),\n                        Type = \"squad\",\n                    },\n                },\n                NotificationChannels = new[]\n                {\n                    \"Phone\",\n                },\n                Repeat = new Squadcast.Inputs.EscalationPolicyRuleRepeatArgs\n                {\n                    Times = 1,\n                    DelayMinutes = 5,\n                },\n            },\n            new Squadcast.Inputs.EscalationPolicyRuleArgs\n            {\n                DelayMinutes = 10,\n                Targets = new[]\n                {\n                    new Squadcast.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Id = exampleSquad.Apply(getSquadResult =\u003e getSquadResult.Id),\n                        Type = \"squad\",\n                    },\n                    new Squadcast.Inputs.EscalationPolicyRuleTargetArgs\n                    {\n                        Id = exampleScheduleV2.Apply(getScheduleV2Result =\u003e getScheduleV2Result.Id),\n                        Type = \"schedulev2\",\n                    },\n                },\n                RoundRobin = new Squadcast.Inputs.EscalationPolicyRuleRoundRobinArgs\n                {\n                    Enabled = true,\n                    Rotation = new Squadcast.Inputs.EscalationPolicyRuleRoundRobinRotationArgs\n                    {\n                        Enabled = true,\n                        DelayMinutes = 1,\n                    },\n                },\n            },\n        },\n        Repeat = new Squadcast.Inputs.EscalationPolicyRepeatArgs\n        {\n            Times = 2,\n            DelayMinutes = 10,\n        },\n        EntityOwner = new Squadcast.Inputs.EscalationPolicyEntityOwnerArgs\n        {\n            Id = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n            Type = \"user\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"test@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleSquad, err := squadcast.LookupSquad(ctx, \u0026squadcast.LookupSquadArgs{\n\t\t\tName:   \"example squad name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleScheduleV2, err := squadcast.LookupScheduleV2(ctx, \u0026squadcast.LookupScheduleV2Args{\n\t\t\tName:   \"example schedule name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewEscalationPolicy(ctx, \"exampleEscalaionPolicy\", \u0026squadcast.EscalationPolicyArgs{\n\t\t\tDescription: pulumi.String(\"It's an amazing policy\"),\n\t\t\tTeamId:      pulumi.String(exampleTeam.Id),\n\t\t\tRules: squadcast.EscalationPolicyRuleArray{\n\t\t\t\t\u0026squadcast.EscalationPolicyRuleArgs{\n\t\t\t\t\tDelayMinutes: pulumi.Int(0),\n\t\t\t\t\tTargets: squadcast.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026squadcast.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(exampleUser.Id),\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026squadcast.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(exampleScheduleV2.Id),\n\t\t\t\t\t\t\tType: pulumi.String(\"schedulev2\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026squadcast.EscalationPolicyRuleArgs{\n\t\t\t\t\tDelayMinutes: pulumi.Int(5),\n\t\t\t\t\tTargets: squadcast.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026squadcast.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(exampleUser.Id),\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026squadcast.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(exampleSquad.Id),\n\t\t\t\t\t\t\tType: pulumi.String(\"squad\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tNotificationChannels: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Phone\"),\n\t\t\t\t\t},\n\t\t\t\t\tRepeat: \u0026squadcast.EscalationPolicyRuleRepeatArgs{\n\t\t\t\t\t\tTimes:        pulumi.Int(1),\n\t\t\t\t\t\tDelayMinutes: pulumi.Int(5),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026squadcast.EscalationPolicyRuleArgs{\n\t\t\t\t\tDelayMinutes: pulumi.Int(10),\n\t\t\t\t\tTargets: squadcast.EscalationPolicyRuleTargetArray{\n\t\t\t\t\t\t\u0026squadcast.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(exampleSquad.Id),\n\t\t\t\t\t\t\tType: pulumi.String(\"squad\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026squadcast.EscalationPolicyRuleTargetArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(exampleScheduleV2.Id),\n\t\t\t\t\t\t\tType: pulumi.String(\"schedulev2\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tRoundRobin: \u0026squadcast.EscalationPolicyRuleRoundRobinArgs{\n\t\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\t\tRotation: \u0026squadcast.EscalationPolicyRuleRoundRobinRotationArgs{\n\t\t\t\t\t\t\tEnabled:      pulumi.Bool(true),\n\t\t\t\t\t\t\tDelayMinutes: pulumi.Int(1),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tRepeat: \u0026squadcast.EscalationPolicyRepeatArgs{\n\t\t\t\tTimes:        pulumi.Int(2),\n\t\t\t\tDelayMinutes: pulumi.Int(10),\n\t\t\t},\n\t\t\tEntityOwner: \u0026squadcast.EscalationPolicyEntityOwnerArgs{\n\t\t\t\tId:   pulumi.String(exampleUser.Id),\n\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetSquadArgs;\nimport com.pulumi.squadcast.inputs.GetScheduleV2Args;\nimport com.pulumi.squadcast.EscalationPolicy;\nimport com.pulumi.squadcast.EscalationPolicyArgs;\nimport com.pulumi.squadcast.inputs.EscalationPolicyRuleArgs;\nimport com.pulumi.squadcast.inputs.EscalationPolicyRuleRepeatArgs;\nimport com.pulumi.squadcast.inputs.EscalationPolicyRuleRoundRobinArgs;\nimport com.pulumi.squadcast.inputs.EscalationPolicyRuleRoundRobinRotationArgs;\nimport com.pulumi.squadcast.inputs.EscalationPolicyRepeatArgs;\nimport com.pulumi.squadcast.inputs.EscalationPolicyEntityOwnerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        final var exampleSquad = SquadcastFunctions.getSquad(GetSquadArgs.builder()\n            .name(\"example squad name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        final var exampleScheduleV2 = SquadcastFunctions.getScheduleV2(GetScheduleV2Args.builder()\n            .name(\"example schedule name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleEscalaionPolicy = new EscalationPolicy(\"exampleEscalaionPolicy\", EscalationPolicyArgs.builder()\n            .description(\"It's an amazing policy\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .rules(            \n                EscalationPolicyRuleArgs.builder()\n                    .delayMinutes(0)\n                    .targets(                    \n                        EscalationPolicyRuleTargetArgs.builder()\n                            .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                            .type(\"user\")\n                            .build(),\n                        EscalationPolicyRuleTargetArgs.builder()\n                            .id(exampleScheduleV2.applyValue(getScheduleV2Result -\u003e getScheduleV2Result.id()))\n                            .type(\"schedulev2\")\n                            .build())\n                    .build(),\n                EscalationPolicyRuleArgs.builder()\n                    .delayMinutes(5)\n                    .targets(                    \n                        EscalationPolicyRuleTargetArgs.builder()\n                            .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                            .type(\"user\")\n                            .build(),\n                        EscalationPolicyRuleTargetArgs.builder()\n                            .id(exampleSquad.applyValue(getSquadResult -\u003e getSquadResult.id()))\n                            .type(\"squad\")\n                            .build())\n                    .notificationChannels(\"Phone\")\n                    .repeat(EscalationPolicyRuleRepeatArgs.builder()\n                        .times(1)\n                        .delayMinutes(5)\n                        .build())\n                    .build(),\n                EscalationPolicyRuleArgs.builder()\n                    .delayMinutes(10)\n                    .targets(                    \n                        EscalationPolicyRuleTargetArgs.builder()\n                            .id(exampleSquad.applyValue(getSquadResult -\u003e getSquadResult.id()))\n                            .type(\"squad\")\n                            .build(),\n                        EscalationPolicyRuleTargetArgs.builder()\n                            .id(exampleScheduleV2.applyValue(getScheduleV2Result -\u003e getScheduleV2Result.id()))\n                            .type(\"schedulev2\")\n                            .build())\n                    .roundRobin(EscalationPolicyRuleRoundRobinArgs.builder()\n                        .enabled(true)\n                        .rotation(EscalationPolicyRuleRoundRobinRotationArgs.builder()\n                            .enabled(true)\n                            .delayMinutes(1)\n                            .build())\n                        .build())\n                    .build())\n            .repeat(EscalationPolicyRepeatArgs.builder()\n                .times(2)\n                .delayMinutes(10)\n                .build())\n            .entityOwner(EscalationPolicyEntityOwnerArgs.builder()\n                .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .type(\"user\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleEscalaionPolicy:\n    type: squadcast:EscalationPolicy\n    properties:\n      description: It's an amazing policy\n      teamId: ${exampleTeam.id}\n      rules:\n        - delayMinutes: 0\n          targets:\n            - id: ${exampleUser.id}\n              type: user\n            - id: ${exampleScheduleV2.id}\n              type: schedulev2\n        - delayMinutes: 5\n          targets:\n            - id: ${exampleUser.id}\n              type: user\n            - id: ${exampleSquad.id}\n              type: squad\n          notificationChannels:\n            - Phone\n          repeat:\n            times: 1\n            delayMinutes: 5\n        - delayMinutes: 10\n          targets:\n            - id: ${exampleSquad.id}\n              type: squad\n            - id: ${exampleScheduleV2.id}\n              type: schedulev2\n          roundRobin:\n            enabled: true\n            rotation:\n              enabled: true\n              delayMinutes: 1\n      repeat:\n        times: 2\n        delayMinutes: 10\n      entityOwner:\n        id: ${exampleUser.id}\n        type: user\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n  exampleSquad:\n    fn::invoke:\n      Function: squadcast:getSquad\n      Arguments:\n        name: example squad name\n        teamId: ${exampleTeam.id}\n  exampleScheduleV2:\n    fn::invoke:\n      Function: squadcast:getScheduleV2\n      Arguments:\n        name: example schedule name\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:escalationPolicyID\n\nUse 'Get All Teams' and 'Get All Escalation Policies' APIs to get the id of the team and escalation policy name respectively\n\n```sh\n$ pulumi import squadcast:index/escalationPolicy:EscalationPolicy test \"62d2fe23a57381088224d726:Example Escalation Policy\"\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Detailed description about the Escalation Policy.\n"
                },
                "entityOwner": {
                    "$ref": "#/types/squadcast:index/EscalationPolicyEntityOwner:EscalationPolicyEntityOwner",
                    "description": "Escalation policy owner.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Escalation Policy.\n"
                },
                "repeat": {
                    "$ref": "#/types/squadcast:index/EscalationPolicyRepeat:EscalationPolicyRepeat",
                    "description": "You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/EscalationPolicyRule:EscalationPolicyRule"
                    },
                    "description": "Rules will have the details of who to notify and when to notify and how to notify them.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                }
            },
            "required": [
                "entityOwner",
                "name",
                "rules",
                "teamId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Detailed description about the Escalation Policy.\n"
                },
                "entityOwner": {
                    "$ref": "#/types/squadcast:index/EscalationPolicyEntityOwner:EscalationPolicyEntityOwner",
                    "description": "Escalation policy owner.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Escalation Policy.\n"
                },
                "repeat": {
                    "$ref": "#/types/squadcast:index/EscalationPolicyRepeat:EscalationPolicyRepeat",
                    "description": "You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/EscalationPolicyRule:EscalationPolicyRule"
                    },
                    "description": "Rules will have the details of who to notify and when to notify and how to notify them.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "entityOwner",
                "rules",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EscalationPolicy resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Detailed description about the Escalation Policy.\n"
                    },
                    "entityOwner": {
                        "$ref": "#/types/squadcast:index/EscalationPolicyEntityOwner:EscalationPolicyEntityOwner",
                        "description": "Escalation policy owner.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Escalation Policy.\n"
                    },
                    "repeat": {
                        "$ref": "#/types/squadcast:index/EscalationPolicyRepeat:EscalationPolicyRepeat",
                        "description": "You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/EscalationPolicyRule:EscalationPolicyRule"
                        },
                        "description": "Rules will have the details of who to notify and when to notify and how to notify them.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/ger:Ger": {
            "description": "Global Event Ruleset (GER) is a centralized set of rules that defines service routes for incoming events.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst team = squadcast.getTeam({\n    name: \"Example Team\",\n});\nconst user = squadcast.getUser({\n    email: \"john@example.com\",\n});\nconst service = team.then(team =\u003e squadcast.getService({\n    name: \"Example Service\",\n    teamId: team.id,\n}));\nconst ger = new squadcast.Ger(\"ger\", {\n    description: \"Example GER Description\",\n    teamId: team.then(team =\u003e team.id),\n    entityOwner: {\n        id: user.then(user =\u003e user.id),\n        type: \"user\",\n    },\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nteam = squadcast.get_team(name=\"Example Team\")\nuser = squadcast.get_user(email=\"john@example.com\")\nservice = squadcast.get_service(name=\"Example Service\",\n    team_id=team.id)\nger = squadcast.Ger(\"ger\",\n    description=\"Example GER Description\",\n    team_id=team.id,\n    entity_owner=squadcast.GerEntityOwnerArgs(\n        id=user.id,\n        type=\"user\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var team = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"Example Team\",\n    });\n\n    var user = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"john@example.com\",\n    });\n\n    var service = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"Example Service\",\n        TeamId = team.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var ger = new Squadcast.Ger(\"ger\", new()\n    {\n        Description = \"Example GER Description\",\n        TeamId = team.Apply(getTeamResult =\u003e getTeamResult.Id),\n        EntityOwner = new Squadcast.Inputs.GerEntityOwnerArgs\n        {\n            Id = user.Apply(getUserResult =\u003e getUserResult.Id),\n            Type = \"user\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tteam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"Example Team\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"john@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"Example Service\",\n\t\t\tTeamId: team.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewGer(ctx, \"ger\", \u0026squadcast.GerArgs{\n\t\t\tDescription: pulumi.String(\"Example GER Description\"),\n\t\t\tTeamId:      pulumi.String(team.Id),\n\t\t\tEntityOwner: \u0026squadcast.GerEntityOwnerArgs{\n\t\t\t\tId:   pulumi.String(user.Id),\n\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.Ger;\nimport com.pulumi.squadcast.GerArgs;\nimport com.pulumi.squadcast.inputs.GerEntityOwnerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var team = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"Example Team\")\n            .build());\n\n        final var user = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"john@example.com\")\n            .build());\n\n        final var service = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"Example Service\")\n            .teamId(team.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var ger = new Ger(\"ger\", GerArgs.builder()\n            .description(\"Example GER Description\")\n            .teamId(team.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .entityOwner(GerEntityOwnerArgs.builder()\n                .id(user.applyValue(getUserResult -\u003e getUserResult.id()))\n                .type(\"user\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ger:\n    type: squadcast:Ger\n    properties:\n      description: Example GER Description\n      teamId: ${team.id}\n      entityOwner:\n        id: ${user.id}\n        type: user\nvariables:\n  team:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: Example Team\n  user:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: john@example.com\n  service:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: Example Service\n        teamId: ${team.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\ngerID\n\n```sh\n$ pulumi import squadcast:index/ger:Ger example_ger_import \"53\"\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "GER description.\n"
                },
                "entityOwner": {
                    "$ref": "#/types/squadcast:index/GerEntityOwner:GerEntityOwner",
                    "description": "GER owner.\n"
                },
                "name": {
                    "type": "string",
                    "description": "GER name.\n"
                },
                "routingKey": {
                    "type": "string",
                    "description": "Routing Key is an identifier used to determine the ruleset that an incoming event belongs to. It is a common key that associates multiple alert sources with their configured rules, ensuring events are routed to the appropriate services when the defined criteria are met.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                }
            },
            "required": [
                "entityOwner",
                "name",
                "routingKey",
                "teamId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "GER description.\n"
                },
                "entityOwner": {
                    "$ref": "#/types/squadcast:index/GerEntityOwner:GerEntityOwner",
                    "description": "GER owner.\n"
                },
                "name": {
                    "type": "string",
                    "description": "GER name.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                }
            },
            "requiredInputs": [
                "entityOwner",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ger resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "GER description.\n"
                    },
                    "entityOwner": {
                        "$ref": "#/types/squadcast:index/GerEntityOwner:GerEntityOwner",
                        "description": "GER owner.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "GER name.\n"
                    },
                    "routingKey": {
                        "type": "string",
                        "description": "Routing Key is an identifier used to determine the ruleset that an incoming event belongs to. It is a common key that associates multiple alert sources with their configured rules, ensuring events are routed to the appropriate services when the defined criteria are met.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/gerRuleset:GerRuleset": {
            "description": "GER Ruleset is a set of rules and configurations in Squadcast. It allows users to define how alerts are routed to services without the need to set up individual webhooks for each alert source.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"Example Team\",\n});\nconst user = squadcast.getUser({\n    email: \"john@example.com\",\n});\nconst exampleService = exampleTeam.then(exampleTeam =\u003e squadcast.getService({\n    name: \"Example Service\",\n    teamId: exampleTeam.id,\n}));\nconst exampleGer = new squadcast.Ger(\"exampleGer\", {\n    description: \"Example GER Description\",\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    entityOwner: {\n        id: user.then(user =\u003e user.id),\n        type: \"user\",\n    },\n});\nconst exampleGerRuleset = new squadcast.GerRuleset(\"exampleGerRuleset\", {\n    gerId: exampleGer.id,\n    alertSource: \"Prometheus\",\n    catchAllAction: {\n        route_to: exampleService.then(exampleService =\u003e exampleService.id),\n    },\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"Example Team\")\nuser = squadcast.get_user(email=\"john@example.com\")\nexample_service = squadcast.get_service(name=\"Example Service\",\n    team_id=example_team.id)\nexample_ger = squadcast.Ger(\"exampleGer\",\n    description=\"Example GER Description\",\n    team_id=example_team.id,\n    entity_owner=squadcast.GerEntityOwnerArgs(\n        id=user.id,\n        type=\"user\",\n    ))\nexample_ger_ruleset = squadcast.GerRuleset(\"exampleGerRuleset\",\n    ger_id=example_ger.id,\n    alert_source=\"Prometheus\",\n    catch_all_action={\n        \"route_to\": example_service.id,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"Example Team\",\n    });\n\n    var user = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"john@example.com\",\n    });\n\n    var exampleService = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"Example Service\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleGer = new Squadcast.Ger(\"exampleGer\", new()\n    {\n        Description = \"Example GER Description\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        EntityOwner = new Squadcast.Inputs.GerEntityOwnerArgs\n        {\n            Id = user.Apply(getUserResult =\u003e getUserResult.Id),\n            Type = \"user\",\n        },\n    });\n\n    var exampleGerRuleset = new Squadcast.GerRuleset(\"exampleGerRuleset\", new()\n    {\n        GerId = exampleGer.Id,\n        AlertSource = \"Prometheus\",\n        CatchAllAction = \n        {\n            { \"route_to\", exampleService.Apply(getServiceResult =\u003e getServiceResult.Id) },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"Example Team\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"john@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"Example Service\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGer, err := squadcast.NewGer(ctx, \"exampleGer\", \u0026squadcast.GerArgs{\n\t\t\tDescription: pulumi.String(\"Example GER Description\"),\n\t\t\tTeamId:      pulumi.String(exampleTeam.Id),\n\t\t\tEntityOwner: \u0026squadcast.GerEntityOwnerArgs{\n\t\t\t\tId:   pulumi.String(user.Id),\n\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewGerRuleset(ctx, \"exampleGerRuleset\", \u0026squadcast.GerRulesetArgs{\n\t\t\tGerId:       exampleGer.ID(),\n\t\t\tAlertSource: pulumi.String(\"Prometheus\"),\n\t\t\tCatchAllAction: pulumi.StringMap{\n\t\t\t\t\"route_to\": pulumi.String(exampleService.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.Ger;\nimport com.pulumi.squadcast.GerArgs;\nimport com.pulumi.squadcast.inputs.GerEntityOwnerArgs;\nimport com.pulumi.squadcast.GerRuleset;\nimport com.pulumi.squadcast.GerRulesetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"Example Team\")\n            .build());\n\n        final var user = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"john@example.com\")\n            .build());\n\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"Example Service\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleGer = new Ger(\"exampleGer\", GerArgs.builder()\n            .description(\"Example GER Description\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .entityOwner(GerEntityOwnerArgs.builder()\n                .id(user.applyValue(getUserResult -\u003e getUserResult.id()))\n                .type(\"user\")\n                .build())\n            .build());\n\n        var exampleGerRuleset = new GerRuleset(\"exampleGerRuleset\", GerRulesetArgs.builder()\n            .gerId(exampleGer.id())\n            .alertSource(\"Prometheus\")\n            .catchAllAction(Map.of(\"route_to\", exampleService.applyValue(getServiceResult -\u003e getServiceResult.id())))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleGer:\n    type: squadcast:Ger\n    properties:\n      description: Example GER Description\n      teamId: ${exampleTeam.id}\n      entityOwner:\n        id: ${user.id}\n        type: user\n  exampleGerRuleset:\n    type: squadcast:GerRuleset\n    properties:\n      gerId: ${exampleGer.id}\n      alertSource: Prometheus\n      catchAllAction:\n        route_to: ${exampleService.id}\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: Example Team\n  user:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: john@example.com\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: Example Service\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\ngerID:alertSourceName\n\n```sh\n$ pulumi import squadcast:index/gerRuleset:GerRuleset example_ger_ruleset_import \"53:Grafana\"\n```\n\n",
            "properties": {
                "alertSource": {
                    "type": "string",
                    "description": "An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).\n"
                },
                "alertSourceShortname": {
                    "type": "string",
                    "description": "Shortname of the linked alert source.\n"
                },
                "alertSourceVersion": {
                    "type": "string",
                    "description": "Version of the linked alert source.\n"
                },
                "catchAllAction": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The \"Catch-All Action\", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.\n"
                },
                "gerId": {
                    "type": "string",
                    "description": "GER id.\n"
                }
            },
            "required": [
                "alertSource",
                "alertSourceShortname",
                "alertSourceVersion",
                "gerId"
            ],
            "inputProperties": {
                "alertSource": {
                    "type": "string",
                    "description": "An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).\n"
                },
                "catchAllAction": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The \"Catch-All Action\", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.\n"
                },
                "gerId": {
                    "type": "string",
                    "description": "GER id.\n"
                }
            },
            "requiredInputs": [
                "alertSource",
                "gerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GerRuleset resources.\n",
                "properties": {
                    "alertSource": {
                        "type": "string",
                        "description": "An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).\n"
                    },
                    "alertSourceShortname": {
                        "type": "string",
                        "description": "Shortname of the linked alert source.\n"
                    },
                    "alertSourceVersion": {
                        "type": "string",
                        "description": "Version of the linked alert source.\n"
                    },
                    "catchAllAction": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The \"Catch-All Action\", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.\n"
                    },
                    "gerId": {
                        "type": "string",
                        "description": "GER id.\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/gerRulesetRule:GerRulesetRule": {
            "description": "GER Ruleset Rules are a set of conditions defined within a Global Event Ruleset. These rules have expressions, whose evaluation will determine the destination service for the incoming events.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"Example Team\",\n});\nconst exampleUser = squadcast.getUser({\n    email: \"john@example.com\",\n});\nconst exampleService = exampleTeam.then(exampleTeam =\u003e squadcast.getService({\n    name: \"Example Service\",\n    teamId: exampleTeam.id,\n}));\nconst exampleGer = new squadcast.Ger(\"exampleGer\", {\n    description: \"Example GER Description\",\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    entityOwner: {\n        id: exampleUser.then(exampleUser =\u003e exampleUser.id),\n        type: \"user\",\n    },\n});\nconst exampleGerRuleset = new squadcast.GerRuleset(\"exampleGerRuleset\", {\n    gerId: exampleGer.id,\n    alertSource: \"Prometheus\",\n    catchAllAction: {\n        route_to: exampleService.then(exampleService =\u003e exampleService.id),\n    },\n});\nconst exampleGerRulesetRule = new squadcast.GerRulesetRule(\"exampleGerRulesetRule\", {\n    gerId: exampleGer.id,\n    alertSource: exampleGerRuleset.alertSource,\n    expression: \"alertname == \\\"DeploymentReplicasNotUpdated\\\"\",\n    description: \"Example GER Ruleset Rule\",\n    action: {\n        route_to: exampleService.then(exampleService =\u003e exampleService.id),\n    },\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"Example Team\")\nexample_user = squadcast.get_user(email=\"john@example.com\")\nexample_service = squadcast.get_service(name=\"Example Service\",\n    team_id=example_team.id)\nexample_ger = squadcast.Ger(\"exampleGer\",\n    description=\"Example GER Description\",\n    team_id=example_team.id,\n    entity_owner=squadcast.GerEntityOwnerArgs(\n        id=example_user.id,\n        type=\"user\",\n    ))\nexample_ger_ruleset = squadcast.GerRuleset(\"exampleGerRuleset\",\n    ger_id=example_ger.id,\n    alert_source=\"Prometheus\",\n    catch_all_action={\n        \"route_to\": example_service.id,\n    })\nexample_ger_ruleset_rule = squadcast.GerRulesetRule(\"exampleGerRulesetRule\",\n    ger_id=example_ger.id,\n    alert_source=example_ger_ruleset.alert_source,\n    expression=\"alertname == \\\"DeploymentReplicasNotUpdated\\\"\",\n    description=\"Example GER Ruleset Rule\",\n    action={\n        \"route_to\": example_service.id,\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"Example Team\",\n    });\n\n    var exampleUser = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"john@example.com\",\n    });\n\n    var exampleService = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"Example Service\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleGer = new Squadcast.Ger(\"exampleGer\", new()\n    {\n        Description = \"Example GER Description\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        EntityOwner = new Squadcast.Inputs.GerEntityOwnerArgs\n        {\n            Id = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n            Type = \"user\",\n        },\n    });\n\n    var exampleGerRuleset = new Squadcast.GerRuleset(\"exampleGerRuleset\", new()\n    {\n        GerId = exampleGer.Id,\n        AlertSource = \"Prometheus\",\n        CatchAllAction = \n        {\n            { \"route_to\", exampleService.Apply(getServiceResult =\u003e getServiceResult.Id) },\n        },\n    });\n\n    var exampleGerRulesetRule = new Squadcast.GerRulesetRule(\"exampleGerRulesetRule\", new()\n    {\n        GerId = exampleGer.Id,\n        AlertSource = exampleGerRuleset.AlertSource,\n        Expression = \"alertname == \\\"DeploymentReplicasNotUpdated\\\"\",\n        Description = \"Example GER Ruleset Rule\",\n        Action = \n        {\n            { \"route_to\", exampleService.Apply(getServiceResult =\u003e getServiceResult.Id) },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"Example Team\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"john@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"Example Service\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGer, err := squadcast.NewGer(ctx, \"exampleGer\", \u0026squadcast.GerArgs{\n\t\t\tDescription: pulumi.String(\"Example GER Description\"),\n\t\t\tTeamId:      pulumi.String(exampleTeam.Id),\n\t\t\tEntityOwner: \u0026squadcast.GerEntityOwnerArgs{\n\t\t\t\tId:   pulumi.String(exampleUser.Id),\n\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGerRuleset, err := squadcast.NewGerRuleset(ctx, \"exampleGerRuleset\", \u0026squadcast.GerRulesetArgs{\n\t\t\tGerId:       exampleGer.ID(),\n\t\t\tAlertSource: pulumi.String(\"Prometheus\"),\n\t\t\tCatchAllAction: pulumi.StringMap{\n\t\t\t\t\"route_to\": pulumi.String(exampleService.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewGerRulesetRule(ctx, \"exampleGerRulesetRule\", \u0026squadcast.GerRulesetRuleArgs{\n\t\t\tGerId:       exampleGer.ID(),\n\t\t\tAlertSource: exampleGerRuleset.AlertSource,\n\t\t\tExpression:  pulumi.String(\"alertname == \\\"DeploymentReplicasNotUpdated\\\"\"),\n\t\t\tDescription: pulumi.String(\"Example GER Ruleset Rule\"),\n\t\t\tAction: pulumi.StringMap{\n\t\t\t\t\"route_to\": pulumi.String(exampleService.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.Ger;\nimport com.pulumi.squadcast.GerArgs;\nimport com.pulumi.squadcast.inputs.GerEntityOwnerArgs;\nimport com.pulumi.squadcast.GerRuleset;\nimport com.pulumi.squadcast.GerRulesetArgs;\nimport com.pulumi.squadcast.GerRulesetRule;\nimport com.pulumi.squadcast.GerRulesetRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"Example Team\")\n            .build());\n\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"john@example.com\")\n            .build());\n\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"Example Service\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleGer = new Ger(\"exampleGer\", GerArgs.builder()\n            .description(\"Example GER Description\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .entityOwner(GerEntityOwnerArgs.builder()\n                .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .type(\"user\")\n                .build())\n            .build());\n\n        var exampleGerRuleset = new GerRuleset(\"exampleGerRuleset\", GerRulesetArgs.builder()\n            .gerId(exampleGer.id())\n            .alertSource(\"Prometheus\")\n            .catchAllAction(Map.of(\"route_to\", exampleService.applyValue(getServiceResult -\u003e getServiceResult.id())))\n            .build());\n\n        var exampleGerRulesetRule = new GerRulesetRule(\"exampleGerRulesetRule\", GerRulesetRuleArgs.builder()\n            .gerId(exampleGer.id())\n            .alertSource(exampleGerRuleset.alertSource())\n            .expression(\"alertname == \\\"DeploymentReplicasNotUpdated\\\"\")\n            .description(\"Example GER Ruleset Rule\")\n            .action(Map.of(\"route_to\", exampleService.applyValue(getServiceResult -\u003e getServiceResult.id())))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleGer:\n    type: squadcast:Ger\n    properties:\n      description: Example GER Description\n      teamId: ${exampleTeam.id}\n      entityOwner:\n        id: ${exampleUser.id}\n        type: user\n  exampleGerRuleset:\n    type: squadcast:GerRuleset\n    properties:\n      gerId: ${exampleGer.id}\n      alertSource: Prometheus\n      catchAllAction:\n        route_to: ${exampleService.id}\n  exampleGerRulesetRule:\n    type: squadcast:GerRulesetRule\n    properties:\n      gerId: ${exampleGer.id}\n      alertSource: ${exampleGerRuleset.alertSource}\n      expression: alertname == \"DeploymentReplicasNotUpdated\"\n      description: Example GER Ruleset Rule\n      action:\n        route_to: ${exampleService.id}\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: Example Team\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: john@example.com\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: Example Service\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\ngerID:alertSourceName:ruleID\n\n```sh\n$ pulumi import squadcast:index/gerRulesetRule:GerRulesetRule ger_ruleset_rule_import \"50:Grafana:100\"\n```\n\n",
            "properties": {
                "action": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Rule Action refers to the designated destination service to which an event should be directed towards, whenever a rule expression is true.\n"
                },
                "alertSource": {
                    "type": "string",
                    "description": "An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).\n"
                },
                "alertSourceShortname": {
                    "type": "string",
                    "description": "Shortname of the linked alert source.\n"
                },
                "alertSourceVersion": {
                    "type": "string",
                    "description": "Version of the linked alert source.\n"
                },
                "description": {
                    "type": "string",
                    "description": "GER Ruleset Rule description.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "An expression is a single condition or a set of conditions that must be met for the rule to take action, such as routing the incoming event to a specific service.\n"
                },
                "gerId": {
                    "type": "string",
                    "description": "GER id.\n"
                }
            },
            "required": [
                "action",
                "alertSource",
                "alertSourceShortname",
                "alertSourceVersion",
                "description",
                "expression",
                "gerId"
            ],
            "inputProperties": {
                "action": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Rule Action refers to the designated destination service to which an event should be directed towards, whenever a rule expression is true.\n"
                },
                "alertSource": {
                    "type": "string",
                    "description": "An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).\n"
                },
                "description": {
                    "type": "string",
                    "description": "GER Ruleset Rule description.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "An expression is a single condition or a set of conditions that must be met for the rule to take action, such as routing the incoming event to a specific service.\n"
                },
                "gerId": {
                    "type": "string",
                    "description": "GER id.\n"
                }
            },
            "requiredInputs": [
                "action",
                "alertSource",
                "description",
                "expression",
                "gerId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GerRulesetRule resources.\n",
                "properties": {
                    "action": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Rule Action refers to the designated destination service to which an event should be directed towards, whenever a rule expression is true.\n"
                    },
                    "alertSource": {
                        "type": "string",
                        "description": "An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).\n"
                    },
                    "alertSourceShortname": {
                        "type": "string",
                        "description": "Shortname of the linked alert source.\n"
                    },
                    "alertSourceVersion": {
                        "type": "string",
                        "description": "Version of the linked alert source.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "GER Ruleset Rule description.\n"
                    },
                    "expression": {
                        "type": "string",
                        "description": "An expression is a single condition or a set of conditions that must be met for the rule to take action, such as routing the incoming event to a specific service.\n"
                    },
                    "gerId": {
                        "type": "string",
                        "description": "GER id.\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/gerRulesetRulesOrdering:GerRulesetRulesOrdering": {
            "description": "The ordering of rules within a Ruleset dictates the sequence in which rules are evaluated for an alert source. These rules are evaluated sequentially, starting from the top.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"Example Team\",\n});\nconst exampleUser = squadcast.getUser({\n    email: \"john@example.com\",\n});\nconst exampleService = exampleTeam.then(exampleTeam =\u003e squadcast.getService({\n    name: \"Example Service\",\n    teamId: exampleTeam.id,\n}));\nconst exampleGer = new squadcast.Ger(\"exampleGer\", {\n    description: \"Example GER Description\",\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    entityOwner: {\n        id: exampleUser.then(exampleUser =\u003e exampleUser.id),\n        type: \"user\",\n    },\n});\nconst exampleGerRuleset = new squadcast.GerRuleset(\"exampleGerRuleset\", {\n    gerId: exampleGer.id,\n    alertSource: \"Prometheus\",\n    catchAllAction: {\n        route_to: exampleService.then(exampleService =\u003e exampleService.id),\n    },\n});\nconst exampleGerRulesetRule1 = new squadcast.GerRulesetRule(\"exampleGerRulesetRule1\", {\n    gerId: exampleGer.id,\n    alertSource: exampleGerRuleset.alertSource,\n    expression: \"alertname == \\\"DeploymentReplicasNotUpdated\\\"\",\n    description: \"Example GER Ruleset Rule\",\n    action: {\n        route_to: exampleService.then(exampleService =\u003e exampleService.id),\n    },\n});\nconst exampleGerRulesetRule2 = new squadcast.GerRulesetRule(\"exampleGerRulesetRule2\", {\n    gerId: exampleGer.id,\n    alertSource: exampleGerRuleset.alertSource,\n    expression: \"component == \\\"kube-state-metrics\\\"\",\n    description: \"Example GER Ruleset Rule\",\n    action: {\n        route_to: exampleService.then(exampleService =\u003e exampleService.id),\n    },\n});\nconst ruleOrdering = new squadcast.GerRulesetRulesOrdering(\"ruleOrdering\", {\n    gerId: squadcast_ger.ger.id,\n    alertSource: squadcast_ger_ruleset.ger_ruleset_1.alert_source,\n    orderings: [\n        squadcast_ger_ruleset_rule.ger_ruleset_rule_2.id,\n        squadcast_ger_ruleset_rule.ger_ruleset_rule_1.id,\n    ],\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"Example Team\")\nexample_user = squadcast.get_user(email=\"john@example.com\")\nexample_service = squadcast.get_service(name=\"Example Service\",\n    team_id=example_team.id)\nexample_ger = squadcast.Ger(\"exampleGer\",\n    description=\"Example GER Description\",\n    team_id=example_team.id,\n    entity_owner=squadcast.GerEntityOwnerArgs(\n        id=example_user.id,\n        type=\"user\",\n    ))\nexample_ger_ruleset = squadcast.GerRuleset(\"exampleGerRuleset\",\n    ger_id=example_ger.id,\n    alert_source=\"Prometheus\",\n    catch_all_action={\n        \"route_to\": example_service.id,\n    })\nexample_ger_ruleset_rule1 = squadcast.GerRulesetRule(\"exampleGerRulesetRule1\",\n    ger_id=example_ger.id,\n    alert_source=example_ger_ruleset.alert_source,\n    expression=\"alertname == \\\"DeploymentReplicasNotUpdated\\\"\",\n    description=\"Example GER Ruleset Rule\",\n    action={\n        \"route_to\": example_service.id,\n    })\nexample_ger_ruleset_rule2 = squadcast.GerRulesetRule(\"exampleGerRulesetRule2\",\n    ger_id=example_ger.id,\n    alert_source=example_ger_ruleset.alert_source,\n    expression=\"component == \\\"kube-state-metrics\\\"\",\n    description=\"Example GER Ruleset Rule\",\n    action={\n        \"route_to\": example_service.id,\n    })\nrule_ordering = squadcast.GerRulesetRulesOrdering(\"ruleOrdering\",\n    ger_id=squadcast_ger[\"ger\"][\"id\"],\n    alert_source=squadcast_ger_ruleset[\"ger_ruleset_1\"][\"alert_source\"],\n    orderings=[\n        squadcast_ger_ruleset_rule[\"ger_ruleset_rule_2\"][\"id\"],\n        squadcast_ger_ruleset_rule[\"ger_ruleset_rule_1\"][\"id\"],\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"Example Team\",\n    });\n\n    var exampleUser = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"john@example.com\",\n    });\n\n    var exampleService = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"Example Service\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleGer = new Squadcast.Ger(\"exampleGer\", new()\n    {\n        Description = \"Example GER Description\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        EntityOwner = new Squadcast.Inputs.GerEntityOwnerArgs\n        {\n            Id = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n            Type = \"user\",\n        },\n    });\n\n    var exampleGerRuleset = new Squadcast.GerRuleset(\"exampleGerRuleset\", new()\n    {\n        GerId = exampleGer.Id,\n        AlertSource = \"Prometheus\",\n        CatchAllAction = \n        {\n            { \"route_to\", exampleService.Apply(getServiceResult =\u003e getServiceResult.Id) },\n        },\n    });\n\n    var exampleGerRulesetRule1 = new Squadcast.GerRulesetRule(\"exampleGerRulesetRule1\", new()\n    {\n        GerId = exampleGer.Id,\n        AlertSource = exampleGerRuleset.AlertSource,\n        Expression = \"alertname == \\\"DeploymentReplicasNotUpdated\\\"\",\n        Description = \"Example GER Ruleset Rule\",\n        Action = \n        {\n            { \"route_to\", exampleService.Apply(getServiceResult =\u003e getServiceResult.Id) },\n        },\n    });\n\n    var exampleGerRulesetRule2 = new Squadcast.GerRulesetRule(\"exampleGerRulesetRule2\", new()\n    {\n        GerId = exampleGer.Id,\n        AlertSource = exampleGerRuleset.AlertSource,\n        Expression = \"component == \\\"kube-state-metrics\\\"\",\n        Description = \"Example GER Ruleset Rule\",\n        Action = \n        {\n            { \"route_to\", exampleService.Apply(getServiceResult =\u003e getServiceResult.Id) },\n        },\n    });\n\n    var ruleOrdering = new Squadcast.GerRulesetRulesOrdering(\"ruleOrdering\", new()\n    {\n        GerId = squadcast_ger.Ger.Id,\n        AlertSource = squadcast_ger_ruleset.Ger_ruleset_1.Alert_source,\n        Orderings = new[]\n        {\n            squadcast_ger_ruleset_rule.Ger_ruleset_rule_2.Id,\n            squadcast_ger_ruleset_rule.Ger_ruleset_rule_1.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"Example Team\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"john@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"Example Service\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGer, err := squadcast.NewGer(ctx, \"exampleGer\", \u0026squadcast.GerArgs{\n\t\t\tDescription: pulumi.String(\"Example GER Description\"),\n\t\t\tTeamId:      pulumi.String(exampleTeam.Id),\n\t\t\tEntityOwner: \u0026squadcast.GerEntityOwnerArgs{\n\t\t\t\tId:   pulumi.String(exampleUser.Id),\n\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGerRuleset, err := squadcast.NewGerRuleset(ctx, \"exampleGerRuleset\", \u0026squadcast.GerRulesetArgs{\n\t\t\tGerId:       exampleGer.ID(),\n\t\t\tAlertSource: pulumi.String(\"Prometheus\"),\n\t\t\tCatchAllAction: pulumi.StringMap{\n\t\t\t\t\"route_to\": pulumi.String(exampleService.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewGerRulesetRule(ctx, \"exampleGerRulesetRule1\", \u0026squadcast.GerRulesetRuleArgs{\n\t\t\tGerId:       exampleGer.ID(),\n\t\t\tAlertSource: exampleGerRuleset.AlertSource,\n\t\t\tExpression:  pulumi.String(\"alertname == \\\"DeploymentReplicasNotUpdated\\\"\"),\n\t\t\tDescription: pulumi.String(\"Example GER Ruleset Rule\"),\n\t\t\tAction: pulumi.StringMap{\n\t\t\t\t\"route_to\": pulumi.String(exampleService.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewGerRulesetRule(ctx, \"exampleGerRulesetRule2\", \u0026squadcast.GerRulesetRuleArgs{\n\t\t\tGerId:       exampleGer.ID(),\n\t\t\tAlertSource: exampleGerRuleset.AlertSource,\n\t\t\tExpression:  pulumi.String(\"component == \\\"kube-state-metrics\\\"\"),\n\t\t\tDescription: pulumi.String(\"Example GER Ruleset Rule\"),\n\t\t\tAction: pulumi.StringMap{\n\t\t\t\t\"route_to\": pulumi.String(exampleService.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewGerRulesetRulesOrdering(ctx, \"ruleOrdering\", \u0026squadcast.GerRulesetRulesOrderingArgs{\n\t\t\tGerId:       pulumi.Any(squadcast_ger.Ger.Id),\n\t\t\tAlertSource: pulumi.Any(squadcast_ger_ruleset.Ger_ruleset_1.Alert_source),\n\t\t\tOrderings: pulumi.StringArray{\n\t\t\t\tsquadcast_ger_ruleset_rule.Ger_ruleset_rule_2.Id,\n\t\t\t\tsquadcast_ger_ruleset_rule.Ger_ruleset_rule_1.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.Ger;\nimport com.pulumi.squadcast.GerArgs;\nimport com.pulumi.squadcast.inputs.GerEntityOwnerArgs;\nimport com.pulumi.squadcast.GerRuleset;\nimport com.pulumi.squadcast.GerRulesetArgs;\nimport com.pulumi.squadcast.GerRulesetRule;\nimport com.pulumi.squadcast.GerRulesetRuleArgs;\nimport com.pulumi.squadcast.GerRulesetRulesOrdering;\nimport com.pulumi.squadcast.GerRulesetRulesOrderingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"Example Team\")\n            .build());\n\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"john@example.com\")\n            .build());\n\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"Example Service\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleGer = new Ger(\"exampleGer\", GerArgs.builder()\n            .description(\"Example GER Description\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .entityOwner(GerEntityOwnerArgs.builder()\n                .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .type(\"user\")\n                .build())\n            .build());\n\n        var exampleGerRuleset = new GerRuleset(\"exampleGerRuleset\", GerRulesetArgs.builder()\n            .gerId(exampleGer.id())\n            .alertSource(\"Prometheus\")\n            .catchAllAction(Map.of(\"route_to\", exampleService.applyValue(getServiceResult -\u003e getServiceResult.id())))\n            .build());\n\n        var exampleGerRulesetRule1 = new GerRulesetRule(\"exampleGerRulesetRule1\", GerRulesetRuleArgs.builder()\n            .gerId(exampleGer.id())\n            .alertSource(exampleGerRuleset.alertSource())\n            .expression(\"alertname == \\\"DeploymentReplicasNotUpdated\\\"\")\n            .description(\"Example GER Ruleset Rule\")\n            .action(Map.of(\"route_to\", exampleService.applyValue(getServiceResult -\u003e getServiceResult.id())))\n            .build());\n\n        var exampleGerRulesetRule2 = new GerRulesetRule(\"exampleGerRulesetRule2\", GerRulesetRuleArgs.builder()\n            .gerId(exampleGer.id())\n            .alertSource(exampleGerRuleset.alertSource())\n            .expression(\"component == \\\"kube-state-metrics\\\"\")\n            .description(\"Example GER Ruleset Rule\")\n            .action(Map.of(\"route_to\", exampleService.applyValue(getServiceResult -\u003e getServiceResult.id())))\n            .build());\n\n        var ruleOrdering = new GerRulesetRulesOrdering(\"ruleOrdering\", GerRulesetRulesOrderingArgs.builder()\n            .gerId(squadcast_ger.ger().id())\n            .alertSource(squadcast_ger_ruleset.ger_ruleset_1().alert_source())\n            .orderings(            \n                squadcast_ger_ruleset_rule.ger_ruleset_rule_2().id(),\n                squadcast_ger_ruleset_rule.ger_ruleset_rule_1().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleGer:\n    type: squadcast:Ger\n    properties:\n      description: Example GER Description\n      teamId: ${exampleTeam.id}\n      entityOwner:\n        id: ${exampleUser.id}\n        type: user\n  exampleGerRuleset:\n    type: squadcast:GerRuleset\n    properties:\n      gerId: ${exampleGer.id}\n      alertSource: Prometheus\n      catchAllAction:\n        route_to: ${exampleService.id}\n  exampleGerRulesetRule1:\n    type: squadcast:GerRulesetRule\n    properties:\n      gerId: ${exampleGer.id}\n      alertSource: ${exampleGerRuleset.alertSource}\n      expression: alertname == \"DeploymentReplicasNotUpdated\"\n      description: Example GER Ruleset Rule\n      action:\n        route_to: ${exampleService.id}\n  exampleGerRulesetRule2:\n    type: squadcast:GerRulesetRule\n    properties:\n      gerId: ${exampleGer.id}\n      alertSource: ${exampleGerRuleset.alertSource}\n      expression: component == \"kube-state-metrics\"\n      description: Example GER Ruleset Rule\n      action:\n        route_to: ${exampleService.id}\n  ruleOrdering:\n    type: squadcast:GerRulesetRulesOrdering\n    properties:\n      gerId: ${squadcast_ger.ger.id}\n      alertSource: ${squadcast_ger_ruleset.ger_ruleset_1.alert_source}\n      orderings:\n        - ${squadcast_ger_ruleset_rule.ger_ruleset_rule_2.id}\n        - ${squadcast_ger_ruleset_rule.ger_ruleset_rule_1.id}\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: Example Team\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: john@example.com\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: Example Service\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\ngerID:alertSourceName\n\n```sh\n$ pulumi import squadcast:index/gerRulesetRulesOrdering:GerRulesetRulesOrdering example_ger_ruleset_rule_ordering_import \"53:Grafana\"\n```\n\n",
            "properties": {
                "alertSource": {
                    "type": "string",
                    "description": "An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).\n"
                },
                "alertSourceShortname": {
                    "type": "string",
                    "description": "Shortname of the linked alert source.\n"
                },
                "alertSourceVersion": {
                    "type": "string",
                    "description": "Version of the linked alert source.\n"
                },
                "gerId": {
                    "type": "string",
                    "description": "GER id.\n"
                },
                "orderings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "GER Ruleset Rule Ordering.\n"
                }
            },
            "required": [
                "alertSource",
                "alertSourceShortname",
                "alertSourceVersion",
                "gerId",
                "orderings"
            ],
            "inputProperties": {
                "alertSource": {
                    "type": "string",
                    "description": "An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).\n"
                },
                "gerId": {
                    "type": "string",
                    "description": "GER id.\n"
                },
                "orderings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "GER Ruleset Rule Ordering.\n"
                }
            },
            "requiredInputs": [
                "alertSource",
                "gerId",
                "orderings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GerRulesetRulesOrdering resources.\n",
                "properties": {
                    "alertSource": {
                        "type": "string",
                        "description": "An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).\n"
                    },
                    "alertSourceShortname": {
                        "type": "string",
                        "description": "Shortname of the linked alert source.\n"
                    },
                    "alertSourceVersion": {
                        "type": "string",
                        "description": "Version of the linked alert source.\n"
                    },
                    "gerId": {
                        "type": "string",
                        "description": "GER id.\n"
                    },
                    "orderings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "GER Ruleset Rule Ordering.\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/routingRuleV2:RoutingRuleV2": {
            "description": "[Routing rules](https://support.squadcast.com/docs/alert-routing) allows you to ensure that alerts are routed to the right responder with the help of `event tags` attached to them.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleUser = squadcast.getUser({\n    email: \"test@example.com\",\n});\nconst exampleService = exampleTeam.then(exampleTeam =\u003e squadcast.getService({\n    name: \"example service name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleEscalaionPolicy = exampleTeam.then(exampleTeam =\u003e squadcast.getEscalationPolicy({\n    name: \"example escalation policy name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleSquad = exampleTeam.then(exampleTeam =\u003e squadcast.getSquad({\n    name: \"example squad name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleRoutingRules = new squadcast.RoutingRuleV2(\"exampleRoutingRules\", {\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    isBasic: false,\n    expression: \"payload[\\\"event_id\\\"] == 40\",\n    routeToId: exampleUser.then(exampleUser =\u003e exampleUser.id),\n    routeToType: \"user\",\n});\nconst exampleRoutingRulesBasic = new squadcast.RoutingRuleV2(\"exampleRoutingRulesBasic\", {\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    isBasic: true,\n    basicExpressions: [{\n        lhs: \"payload[\\\"foo\\\"]\",\n        rhs: \"bar\",\n    }],\n    routeToId: data.squadcast_user.example_escalaion_policy.id,\n    routeToType: \"escalationpolicy\",\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_user = squadcast.get_user(email=\"test@example.com\")\nexample_service = squadcast.get_service(name=\"example service name\",\n    team_id=example_team.id)\nexample_escalaion_policy = squadcast.get_escalation_policy(name=\"example escalation policy name\",\n    team_id=example_team.id)\nexample_squad = squadcast.get_squad(name=\"example squad name\",\n    team_id=example_team.id)\nexample_routing_rules = squadcast.RoutingRuleV2(\"exampleRoutingRules\",\n    service_id=example_service.id,\n    is_basic=False,\n    expression=\"payload[\\\"event_id\\\"] == 40\",\n    route_to_id=example_user.id,\n    route_to_type=\"user\")\nexample_routing_rules_basic = squadcast.RoutingRuleV2(\"exampleRoutingRulesBasic\",\n    service_id=example_service.id,\n    is_basic=True,\n    basic_expressions=[squadcast.RoutingRuleV2BasicExpressionArgs(\n        lhs=\"payload[\\\"foo\\\"]\",\n        rhs=\"bar\",\n    )],\n    route_to_id=data[\"squadcast_user\"][\"example_escalaion_policy\"][\"id\"],\n    route_to_type=\"escalationpolicy\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleUser = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"test@example.com\",\n    });\n\n    var exampleService = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"example service name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleEscalaionPolicy = Squadcast.GetEscalationPolicy.Invoke(new()\n    {\n        Name = \"example escalation policy name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleSquad = Squadcast.GetSquad.Invoke(new()\n    {\n        Name = \"example squad name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleRoutingRules = new Squadcast.RoutingRuleV2(\"exampleRoutingRules\", new()\n    {\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        IsBasic = false,\n        Expression = \"payload[\\\"event_id\\\"] == 40\",\n        RouteToId = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n        RouteToType = \"user\",\n    });\n\n    var exampleRoutingRulesBasic = new Squadcast.RoutingRuleV2(\"exampleRoutingRulesBasic\", new()\n    {\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        IsBasic = true,\n        BasicExpressions = new[]\n        {\n            new Squadcast.Inputs.RoutingRuleV2BasicExpressionArgs\n            {\n                Lhs = \"payload[\\\"foo\\\"]\",\n                Rhs = \"bar\",\n            },\n        },\n        RouteToId = data.Squadcast_user.Example_escalaion_policy.Id,\n        RouteToType = \"escalationpolicy\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"test@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"example service name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.LookupEscalationPolicy(ctx, \u0026squadcast.LookupEscalationPolicyArgs{\n\t\t\tName:   \"example escalation policy name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.LookupSquad(ctx, \u0026squadcast.LookupSquadArgs{\n\t\t\tName:   \"example squad name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewRoutingRuleV2(ctx, \"exampleRoutingRules\", \u0026squadcast.RoutingRuleV2Args{\n\t\t\tServiceId:   pulumi.String(exampleService.Id),\n\t\t\tIsBasic:     pulumi.Bool(false),\n\t\t\tExpression:  pulumi.String(\"payload[\\\"event_id\\\"] == 40\"),\n\t\t\tRouteToId:   pulumi.String(exampleUser.Id),\n\t\t\tRouteToType: pulumi.String(\"user\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewRoutingRuleV2(ctx, \"exampleRoutingRulesBasic\", \u0026squadcast.RoutingRuleV2Args{\n\t\t\tServiceId: pulumi.String(exampleService.Id),\n\t\t\tIsBasic:   pulumi.Bool(true),\n\t\t\tBasicExpressions: squadcast.RoutingRuleV2BasicExpressionArray{\n\t\t\t\t\u0026squadcast.RoutingRuleV2BasicExpressionArgs{\n\t\t\t\t\tLhs: pulumi.String(\"payload[\\\"foo\\\"]\"),\n\t\t\t\t\tRhs: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRouteToId:   pulumi.Any(data.Squadcast_user.Example_escalaion_policy.Id),\n\t\t\tRouteToType: pulumi.String(\"escalationpolicy\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.inputs.GetEscalationPolicyArgs;\nimport com.pulumi.squadcast.inputs.GetSquadArgs;\nimport com.pulumi.squadcast.RoutingRuleV2;\nimport com.pulumi.squadcast.RoutingRuleV2Args;\nimport com.pulumi.squadcast.inputs.RoutingRuleV2BasicExpressionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"example service name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        final var exampleEscalaionPolicy = SquadcastFunctions.getEscalationPolicy(GetEscalationPolicyArgs.builder()\n            .name(\"example escalation policy name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        final var exampleSquad = SquadcastFunctions.getSquad(GetSquadArgs.builder()\n            .name(\"example squad name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleRoutingRules = new RoutingRuleV2(\"exampleRoutingRules\", RoutingRuleV2Args.builder()\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .isBasic(false)\n            .expression(\"payload[\\\"event_id\\\"] == 40\")\n            .routeToId(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n            .routeToType(\"user\")\n            .build());\n\n        var exampleRoutingRulesBasic = new RoutingRuleV2(\"exampleRoutingRulesBasic\", RoutingRuleV2Args.builder()\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .isBasic(true)\n            .basicExpressions(RoutingRuleV2BasicExpressionArgs.builder()\n                .lhs(\"payload[\\\"foo\\\"]\")\n                .rhs(\"bar\")\n                .build())\n            .routeToId(data.squadcast_user().example_escalaion_policy().id())\n            .routeToType(\"escalationpolicy\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleRoutingRules:\n    type: squadcast:RoutingRuleV2\n    properties:\n      serviceId: ${exampleService.id}\n      isBasic: false\n      expression: payload[\"event_id\"] == 40\n      routeToId: ${exampleUser.id}\n      routeToType: user\n  exampleRoutingRulesBasic:\n    type: squadcast:RoutingRuleV2\n    properties:\n      serviceId: ${exampleService.id}\n      isBasic: true\n      basicExpressions:\n        - lhs: payload[\"foo\"]\n          rhs: bar\n      routeToId: ${data.squadcast_user.example_escalaion_policy.id}\n      routeToType: escalationpolicy\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: example service name\n        teamId: ${exampleTeam.id}\n  exampleEscalaionPolicy:\n    fn::invoke:\n      Function: squadcast:getEscalationPolicy\n      Arguments:\n        name: example escalation policy name\n        teamId: ${exampleTeam.id}\n  exampleSquad:\n    fn::invoke:\n      Function: squadcast:getSquad\n      Arguments:\n        name: example squad name\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nserviceID:ruleID\n\n```sh\n$ pulumi import squadcast:index/routingRuleV2:RoutingRuleV2 test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5\n```\n\n",
            "properties": {
                "basicExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/RoutingRuleV2BasicExpression:RoutingRuleV2BasicExpression"
                    },
                    "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "isBasic": {
                    "type": "boolean",
                    "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                },
                "routeToId": {
                    "type": "string",
                    "description": "The id of the entity (user, escalation policy, squad) for which we are routing this incident.\n"
                },
                "routeToType": {
                    "type": "string",
                    "description": "Type of the entity for which we are routing this incident (user, escalationpolicy or squad)\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n"
                }
            },
            "required": [
                "isBasic",
                "routeToId",
                "routeToType",
                "serviceId"
            ],
            "inputProperties": {
                "basicExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/RoutingRuleV2BasicExpression:RoutingRuleV2BasicExpression"
                    },
                    "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "isBasic": {
                    "type": "boolean",
                    "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                },
                "routeToId": {
                    "type": "string",
                    "description": "The id of the entity (user, escalation policy, squad) for which we are routing this incident.\n"
                },
                "routeToType": {
                    "type": "string",
                    "description": "Type of the entity for which we are routing this incident (user, escalationpolicy or squad)\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "isBasic",
                "routeToId",
                "routeToType",
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoutingRuleV2 resources.\n",
                "properties": {
                    "basicExpressions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/RoutingRuleV2BasicExpression:RoutingRuleV2BasicExpression"
                        },
                        "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                    },
                    "expression": {
                        "type": "string",
                        "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                    },
                    "isBasic": {
                        "type": "boolean",
                        "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                    },
                    "routeToId": {
                        "type": "string",
                        "description": "The id of the entity (user, escalation policy, squad) for which we are routing this incident.\n"
                    },
                    "routeToType": {
                        "type": "string",
                        "description": "Type of the entity for which we are routing this incident (user, escalationpolicy or squad)\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "Service id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/runbook:Runbook": {
            "description": "[Squadcast Runbook](https://support.squadcast.com/docs/runbooks) is a compilation of routine procedures and operations that are documented for reference while working on a critical incident. Sometimes, it can also be referred to as a Playbook.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleUser = squadcast.getUser({\n    email: \"test@example.com\",\n});\nconst exampleRunbook = new squadcast.Runbook(\"exampleRunbook\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    steps: [\n        {\n            content: \"some text here\",\n        },\n        {\n            content: \"some text here 2\",\n        },\n    ],\n    entityOwner: {\n        id: exampleUser.then(exampleUser =\u003e exampleUser.id),\n        type: \"user\",\n    },\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_user = squadcast.get_user(email=\"test@example.com\")\nexample_runbook = squadcast.Runbook(\"exampleRunbook\",\n    team_id=example_team.id,\n    steps=[\n        squadcast.RunbookStepArgs(\n            content=\"some text here\",\n        ),\n        squadcast.RunbookStepArgs(\n            content=\"some text here 2\",\n        ),\n    ],\n    entity_owner=squadcast.RunbookEntityOwnerArgs(\n        id=example_user.id,\n        type=\"user\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleUser = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"test@example.com\",\n    });\n\n    var exampleRunbook = new Squadcast.Runbook(\"exampleRunbook\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        Steps = new[]\n        {\n            new Squadcast.Inputs.RunbookStepArgs\n            {\n                Content = \"some text here\",\n            },\n            new Squadcast.Inputs.RunbookStepArgs\n            {\n                Content = \"some text here 2\",\n            },\n        },\n        EntityOwner = new Squadcast.Inputs.RunbookEntityOwnerArgs\n        {\n            Id = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n            Type = \"user\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"test@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewRunbook(ctx, \"exampleRunbook\", \u0026squadcast.RunbookArgs{\n\t\t\tTeamId: pulumi.String(exampleTeam.Id),\n\t\t\tSteps: squadcast.RunbookStepArray{\n\t\t\t\t\u0026squadcast.RunbookStepArgs{\n\t\t\t\t\tContent: pulumi.String(\"some text here\"),\n\t\t\t\t},\n\t\t\t\t\u0026squadcast.RunbookStepArgs{\n\t\t\t\t\tContent: pulumi.String(\"some text here 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEntityOwner: \u0026squadcast.RunbookEntityOwnerArgs{\n\t\t\t\tId:   pulumi.String(exampleUser.Id),\n\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.Runbook;\nimport com.pulumi.squadcast.RunbookArgs;\nimport com.pulumi.squadcast.inputs.RunbookStepArgs;\nimport com.pulumi.squadcast.inputs.RunbookEntityOwnerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        var exampleRunbook = new Runbook(\"exampleRunbook\", RunbookArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .steps(            \n                RunbookStepArgs.builder()\n                    .content(\"some text here\")\n                    .build(),\n                RunbookStepArgs.builder()\n                    .content(\"some text here 2\")\n                    .build())\n            .entityOwner(RunbookEntityOwnerArgs.builder()\n                .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .type(\"user\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleRunbook:\n    type: squadcast:Runbook\n    properties:\n      teamId: ${exampleTeam.id}\n      steps:\n        - content: some text here\n        - content: some text here 2\n      entityOwner:\n        id: ${exampleUser.id}\n        type: user\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:runbookID\n\nUse 'Get All Teams' and 'Get All Runbooks' APIs to get the id of the team and runbook respectively \n\n```sh\n$ pulumi import squadcast:index/runbook:Runbook test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5\n```\n\n",
            "properties": {
                "entityOwner": {
                    "$ref": "#/types/squadcast:index/RunbookEntityOwner:RunbookEntityOwner",
                    "description": "Runbooks owner.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Runbook.\n"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/RunbookStep:RunbookStep"
                    },
                    "description": "Step by Step instructions, you can add as many steps as you want, supports markdown formatting.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                }
            },
            "required": [
                "entityOwner",
                "name",
                "steps",
                "teamId"
            ],
            "inputProperties": {
                "entityOwner": {
                    "$ref": "#/types/squadcast:index/RunbookEntityOwner:RunbookEntityOwner",
                    "description": "Runbooks owner.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Runbook.\n"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/RunbookStep:RunbookStep"
                    },
                    "description": "Step by Step instructions, you can add as many steps as you want, supports markdown formatting.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "entityOwner",
                "steps",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Runbook resources.\n",
                "properties": {
                    "entityOwner": {
                        "$ref": "#/types/squadcast:index/RunbookEntityOwner:RunbookEntityOwner",
                        "description": "Runbooks owner.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Runbook.\n"
                    },
                    "steps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/RunbookStep:RunbookStep"
                        },
                        "description": "Step by Step instructions, you can add as many steps as you want, supports markdown formatting.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/schedule:Schedule": {
            "description": "[Squadcast schedules](https://support.squadcast.com/docs/schedules) are used to manage on-call scheduling \u0026 determine who will be notified when an incident is triggered. The name of the Schedule must be unique within and across Teams.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleSchedule = new squadcast.Schedule(\"exampleSchedule\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    color: \"#9900ef\",\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_schedule = squadcast.Schedule(\"exampleSchedule\",\n    team_id=example_team.id,\n    color=\"#9900ef\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleSchedule = new Squadcast.Schedule(\"exampleSchedule\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        Color = \"#9900ef\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewSchedule(ctx, \"exampleSchedule\", \u0026squadcast.ScheduleArgs{\n\t\t\tTeamId: pulumi.String(exampleTeam.Id),\n\t\t\tColor:  pulumi.String(\"#9900ef\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.Schedule;\nimport com.pulumi.squadcast.ScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        var exampleSchedule = new Schedule(\"exampleSchedule\", ScheduleArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .color(\"#9900ef\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSchedule:\n    type: squadcast:Schedule\n    properties:\n      teamId: ${exampleTeam.id}\n      color: '#9900ef'\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:scheduleName\n\nUse 'Get All Teams' API to get the id of the team\n\n```sh\n$ pulumi import squadcast:index/schedule:Schedule test \"62d2fe23a57381088224d726:Example Schedule\"\n```\n\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Calendar color scheme for this schedule, hex values.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description about the Schedule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Schedule.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                }
            },
            "required": [
                "color",
                "name",
                "teamId"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "Calendar color scheme for this schedule, hex values.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description about the Schedule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Schedule.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "color",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Schedule resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Calendar color scheme for this schedule, hex values.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed description about the Schedule.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Schedule.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/scheduleRotationV2:ScheduleRotationV2": {
            "description": "[Schedule rotations](https://support.squadcast.com/schedules/schedules-new/adding-a-schedule#2.-choose-a-rotation-pattern) are used to manage on-call scheduling \u0026 determine who will be notified when an incident is triggered. The name of the Rotation must be unique within a Schedule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleUser = squadcast.getUser({\n    email: \"test@example.com\",\n});\nconst exampleUser2 = squadcast.getUser({\n    email: \"test2@example.com\",\n});\nconst getSchedule = exampleTeam.then(exampleTeam =\u003e squadcast.getScheduleV2({\n    name: \"Test Schedule\",\n    teamId: exampleTeam.id,\n}));\n// Create a rotation with weekly period\nconst rotationsWithWeeklyPeriod = new squadcast.ScheduleRotationV2(\"rotationsWithWeeklyPeriod\", {\n    scheduleId: getSchedule.then(getSchedule =\u003e getSchedule.id),\n    startDate: \"2023-07-01T00:00:00Z\",\n    period: \"weekly\",\n    shiftTimeslots: [{\n        startHour: 10,\n        startMinute: 30,\n        duration: 720,\n    }],\n    changeParticipantsFrequency: 1,\n    changeParticipantsUnit: \"rotation\",\n    participantGroups: [{\n        participants: [\n            {\n                id: exampleUser.then(exampleUser =\u003e exampleUser.id),\n                type: \"user\",\n            },\n            {\n                id: exampleUser2.then(exampleUser2 =\u003e exampleUser2.id),\n                type: \"user\",\n            },\n        ],\n    }],\n    endsAfterIterations: 2,\n});\n// Create a rotation with custom period\nconst rotationsWithCustomPeriod = new squadcast.ScheduleRotationV2(\"rotationsWithCustomPeriod\", {\n    scheduleId: getSchedule.then(getSchedule =\u003e getSchedule.id),\n    startDate: \"2023-06-13T00:00:00Z\",\n    period: \"custom\",\n    shiftTimeslots: [\n        {\n            startHour: 10,\n            startMinute: 0,\n            duration: 1440,\n            dayOfWeek: \"saturday\",\n        },\n        {\n            startHour: 12,\n            startMinute: 30,\n            duration: 720,\n            dayOfWeek: \"sunday\",\n        },\n    ],\n    changeParticipantsFrequency: 1,\n    changeParticipantsUnit: \"rotation\",\n    customPeriodFrequency: 1,\n    customPeriodUnit: \"week\",\n    participantGroups: [\n        {\n            participants: [{\n                id: exampleUser.then(exampleUser =\u003e exampleUser.id),\n                type: \"user\",\n            }],\n        },\n        {\n            participants: [{\n                id: exampleUser2.then(exampleUser2 =\u003e exampleUser2.id),\n                type: \"user\",\n            }],\n        },\n    ],\n    endDate: \"2023-08-31T00:00:00Z\",\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_user = squadcast.get_user(email=\"test@example.com\")\nexample_user2 = squadcast.get_user(email=\"test2@example.com\")\nget_schedule = squadcast.get_schedule_v2(name=\"Test Schedule\",\n    team_id=example_team.id)\n# Create a rotation with weekly period\nrotations_with_weekly_period = squadcast.ScheduleRotationV2(\"rotationsWithWeeklyPeriod\",\n    schedule_id=get_schedule.id,\n    start_date=\"2023-07-01T00:00:00Z\",\n    period=\"weekly\",\n    shift_timeslots=[squadcast.ScheduleRotationV2ShiftTimeslotArgs(\n        start_hour=10,\n        start_minute=30,\n        duration=720,\n    )],\n    change_participants_frequency=1,\n    change_participants_unit=\"rotation\",\n    participant_groups=[squadcast.ScheduleRotationV2ParticipantGroupArgs(\n        participants=[\n            squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs(\n                id=example_user.id,\n                type=\"user\",\n            ),\n            squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs(\n                id=example_user2.id,\n                type=\"user\",\n            ),\n        ],\n    )],\n    ends_after_iterations=2)\n# Create a rotation with custom period\nrotations_with_custom_period = squadcast.ScheduleRotationV2(\"rotationsWithCustomPeriod\",\n    schedule_id=get_schedule.id,\n    start_date=\"2023-06-13T00:00:00Z\",\n    period=\"custom\",\n    shift_timeslots=[\n        squadcast.ScheduleRotationV2ShiftTimeslotArgs(\n            start_hour=10,\n            start_minute=0,\n            duration=1440,\n            day_of_week=\"saturday\",\n        ),\n        squadcast.ScheduleRotationV2ShiftTimeslotArgs(\n            start_hour=12,\n            start_minute=30,\n            duration=720,\n            day_of_week=\"sunday\",\n        ),\n    ],\n    change_participants_frequency=1,\n    change_participants_unit=\"rotation\",\n    custom_period_frequency=1,\n    custom_period_unit=\"week\",\n    participant_groups=[\n        squadcast.ScheduleRotationV2ParticipantGroupArgs(\n            participants=[squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs(\n                id=example_user.id,\n                type=\"user\",\n            )],\n        ),\n        squadcast.ScheduleRotationV2ParticipantGroupArgs(\n            participants=[squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs(\n                id=example_user2.id,\n                type=\"user\",\n            )],\n        ),\n    ],\n    end_date=\"2023-08-31T00:00:00Z\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleUser = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"test@example.com\",\n    });\n\n    var exampleUser2 = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"test2@example.com\",\n    });\n\n    var getSchedule = Squadcast.GetScheduleV2.Invoke(new()\n    {\n        Name = \"Test Schedule\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    // Create a rotation with weekly period\n    var rotationsWithWeeklyPeriod = new Squadcast.ScheduleRotationV2(\"rotationsWithWeeklyPeriod\", new()\n    {\n        ScheduleId = getSchedule.Apply(getScheduleV2Result =\u003e getScheduleV2Result.Id),\n        StartDate = \"2023-07-01T00:00:00Z\",\n        Period = \"weekly\",\n        ShiftTimeslots = new[]\n        {\n            new Squadcast.Inputs.ScheduleRotationV2ShiftTimeslotArgs\n            {\n                StartHour = 10,\n                StartMinute = 30,\n                Duration = 720,\n            },\n        },\n        ChangeParticipantsFrequency = 1,\n        ChangeParticipantsUnit = \"rotation\",\n        ParticipantGroups = new[]\n        {\n            new Squadcast.Inputs.ScheduleRotationV2ParticipantGroupArgs\n            {\n                Participants = new[]\n                {\n                    new Squadcast.Inputs.ScheduleRotationV2ParticipantGroupParticipantArgs\n                    {\n                        Id = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n                        Type = \"user\",\n                    },\n                    new Squadcast.Inputs.ScheduleRotationV2ParticipantGroupParticipantArgs\n                    {\n                        Id = exampleUser2.Apply(getUserResult =\u003e getUserResult.Id),\n                        Type = \"user\",\n                    },\n                },\n            },\n        },\n        EndsAfterIterations = 2,\n    });\n\n    // Create a rotation with custom period\n    var rotationsWithCustomPeriod = new Squadcast.ScheduleRotationV2(\"rotationsWithCustomPeriod\", new()\n    {\n        ScheduleId = getSchedule.Apply(getScheduleV2Result =\u003e getScheduleV2Result.Id),\n        StartDate = \"2023-06-13T00:00:00Z\",\n        Period = \"custom\",\n        ShiftTimeslots = new[]\n        {\n            new Squadcast.Inputs.ScheduleRotationV2ShiftTimeslotArgs\n            {\n                StartHour = 10,\n                StartMinute = 0,\n                Duration = 1440,\n                DayOfWeek = \"saturday\",\n            },\n            new Squadcast.Inputs.ScheduleRotationV2ShiftTimeslotArgs\n            {\n                StartHour = 12,\n                StartMinute = 30,\n                Duration = 720,\n                DayOfWeek = \"sunday\",\n            },\n        },\n        ChangeParticipantsFrequency = 1,\n        ChangeParticipantsUnit = \"rotation\",\n        CustomPeriodFrequency = 1,\n        CustomPeriodUnit = \"week\",\n        ParticipantGroups = new[]\n        {\n            new Squadcast.Inputs.ScheduleRotationV2ParticipantGroupArgs\n            {\n                Participants = new[]\n                {\n                    new Squadcast.Inputs.ScheduleRotationV2ParticipantGroupParticipantArgs\n                    {\n                        Id = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n                        Type = \"user\",\n                    },\n                },\n            },\n            new Squadcast.Inputs.ScheduleRotationV2ParticipantGroupArgs\n            {\n                Participants = new[]\n                {\n                    new Squadcast.Inputs.ScheduleRotationV2ParticipantGroupParticipantArgs\n                    {\n                        Id = exampleUser2.Apply(getUserResult =\u003e getUserResult.Id),\n                        Type = \"user\",\n                    },\n                },\n            },\n        },\n        EndDate = \"2023-08-31T00:00:00Z\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"test@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser2, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"test2@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgetSchedule, err := squadcast.LookupScheduleV2(ctx, \u0026squadcast.LookupScheduleV2Args{\n\t\t\tName:   \"Test Schedule\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a rotation with weekly period\n\t\t_, err = squadcast.NewScheduleRotationV2(ctx, \"rotationsWithWeeklyPeriod\", \u0026squadcast.ScheduleRotationV2Args{\n\t\t\tScheduleId: pulumi.String(getSchedule.Id),\n\t\t\tStartDate:  pulumi.String(\"2023-07-01T00:00:00Z\"),\n\t\t\tPeriod:     pulumi.String(\"weekly\"),\n\t\t\tShiftTimeslots: squadcast.ScheduleRotationV2ShiftTimeslotArray{\n\t\t\t\t\u0026squadcast.ScheduleRotationV2ShiftTimeslotArgs{\n\t\t\t\t\tStartHour:   pulumi.Int(10),\n\t\t\t\t\tStartMinute: pulumi.Int(30),\n\t\t\t\t\tDuration:    pulumi.Int(720),\n\t\t\t\t},\n\t\t\t},\n\t\t\tChangeParticipantsFrequency: pulumi.Int(1),\n\t\t\tChangeParticipantsUnit:      pulumi.String(\"rotation\"),\n\t\t\tParticipantGroups: squadcast.ScheduleRotationV2ParticipantGroupArray{\n\t\t\t\t\u0026squadcast.ScheduleRotationV2ParticipantGroupArgs{\n\t\t\t\t\tParticipants: squadcast.ScheduleRotationV2ParticipantGroupParticipantArray{\n\t\t\t\t\t\t\u0026squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(exampleUser.Id),\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(exampleUser2.Id),\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tEndsAfterIterations: pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Create a rotation with custom period\n\t\t_, err = squadcast.NewScheduleRotationV2(ctx, \"rotationsWithCustomPeriod\", \u0026squadcast.ScheduleRotationV2Args{\n\t\t\tScheduleId: pulumi.String(getSchedule.Id),\n\t\t\tStartDate:  pulumi.String(\"2023-06-13T00:00:00Z\"),\n\t\t\tPeriod:     pulumi.String(\"custom\"),\n\t\t\tShiftTimeslots: squadcast.ScheduleRotationV2ShiftTimeslotArray{\n\t\t\t\t\u0026squadcast.ScheduleRotationV2ShiftTimeslotArgs{\n\t\t\t\t\tStartHour:   pulumi.Int(10),\n\t\t\t\t\tStartMinute: pulumi.Int(0),\n\t\t\t\t\tDuration:    pulumi.Int(1440),\n\t\t\t\t\tDayOfWeek:   pulumi.String(\"saturday\"),\n\t\t\t\t},\n\t\t\t\t\u0026squadcast.ScheduleRotationV2ShiftTimeslotArgs{\n\t\t\t\t\tStartHour:   pulumi.Int(12),\n\t\t\t\t\tStartMinute: pulumi.Int(30),\n\t\t\t\t\tDuration:    pulumi.Int(720),\n\t\t\t\t\tDayOfWeek:   pulumi.String(\"sunday\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tChangeParticipantsFrequency: pulumi.Int(1),\n\t\t\tChangeParticipantsUnit:      pulumi.String(\"rotation\"),\n\t\t\tCustomPeriodFrequency:       pulumi.Int(1),\n\t\t\tCustomPeriodUnit:            pulumi.String(\"week\"),\n\t\t\tParticipantGroups: squadcast.ScheduleRotationV2ParticipantGroupArray{\n\t\t\t\t\u0026squadcast.ScheduleRotationV2ParticipantGroupArgs{\n\t\t\t\t\tParticipants: squadcast.ScheduleRotationV2ParticipantGroupParticipantArray{\n\t\t\t\t\t\t\u0026squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(exampleUser.Id),\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026squadcast.ScheduleRotationV2ParticipantGroupArgs{\n\t\t\t\t\tParticipants: squadcast.ScheduleRotationV2ParticipantGroupParticipantArray{\n\t\t\t\t\t\t\u0026squadcast.ScheduleRotationV2ParticipantGroupParticipantArgs{\n\t\t\t\t\t\t\tId:   pulumi.String(exampleUser2.Id),\n\t\t\t\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tEndDate: pulumi.String(\"2023-08-31T00:00:00Z\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetScheduleV2Args;\nimport com.pulumi.squadcast.ScheduleRotationV2;\nimport com.pulumi.squadcast.ScheduleRotationV2Args;\nimport com.pulumi.squadcast.inputs.ScheduleRotationV2ShiftTimeslotArgs;\nimport com.pulumi.squadcast.inputs.ScheduleRotationV2ParticipantGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        final var exampleUser2 = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test2@example.com\")\n            .build());\n\n        final var getSchedule = SquadcastFunctions.getScheduleV2(GetScheduleV2Args.builder()\n            .name(\"Test Schedule\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        // Create a rotation with weekly period\n        var rotationsWithWeeklyPeriod = new ScheduleRotationV2(\"rotationsWithWeeklyPeriod\", ScheduleRotationV2Args.builder()\n            .scheduleId(getSchedule.applyValue(getScheduleV2Result -\u003e getScheduleV2Result.id()))\n            .startDate(\"2023-07-01T00:00:00Z\")\n            .period(\"weekly\")\n            .shiftTimeslots(ScheduleRotationV2ShiftTimeslotArgs.builder()\n                .startHour(10)\n                .startMinute(30)\n                .duration(720)\n                .build())\n            .changeParticipantsFrequency(1)\n            .changeParticipantsUnit(\"rotation\")\n            .participantGroups(ScheduleRotationV2ParticipantGroupArgs.builder()\n                .participants(                \n                    ScheduleRotationV2ParticipantGroupParticipantArgs.builder()\n                        .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                        .type(\"user\")\n                        .build(),\n                    ScheduleRotationV2ParticipantGroupParticipantArgs.builder()\n                        .id(exampleUser2.applyValue(getUserResult -\u003e getUserResult.id()))\n                        .type(\"user\")\n                        .build())\n                .build())\n            .endsAfterIterations(2)\n            .build());\n\n        // Create a rotation with custom period\n        var rotationsWithCustomPeriod = new ScheduleRotationV2(\"rotationsWithCustomPeriod\", ScheduleRotationV2Args.builder()\n            .scheduleId(getSchedule.applyValue(getScheduleV2Result -\u003e getScheduleV2Result.id()))\n            .startDate(\"2023-06-13T00:00:00Z\")\n            .period(\"custom\")\n            .shiftTimeslots(            \n                ScheduleRotationV2ShiftTimeslotArgs.builder()\n                    .startHour(10)\n                    .startMinute(0)\n                    .duration(1440)\n                    .dayOfWeek(\"saturday\")\n                    .build(),\n                ScheduleRotationV2ShiftTimeslotArgs.builder()\n                    .startHour(12)\n                    .startMinute(30)\n                    .duration(720)\n                    .dayOfWeek(\"sunday\")\n                    .build())\n            .changeParticipantsFrequency(1)\n            .changeParticipantsUnit(\"rotation\")\n            .customPeriodFrequency(1)\n            .customPeriodUnit(\"week\")\n            .participantGroups(            \n                ScheduleRotationV2ParticipantGroupArgs.builder()\n                    .participants(ScheduleRotationV2ParticipantGroupParticipantArgs.builder()\n                        .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                        .type(\"user\")\n                        .build())\n                    .build(),\n                ScheduleRotationV2ParticipantGroupArgs.builder()\n                    .participants(ScheduleRotationV2ParticipantGroupParticipantArgs.builder()\n                        .id(exampleUser2.applyValue(getUserResult -\u003e getUserResult.id()))\n                        .type(\"user\")\n                        .build())\n                    .build())\n            .endDate(\"2023-08-31T00:00:00Z\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create a rotation with weekly period\n  rotationsWithWeeklyPeriod:\n    type: squadcast:ScheduleRotationV2\n    properties:\n      scheduleId: ${getSchedule.id}\n      startDate: 2023-07-01T00:00:00Z\n      period: weekly\n      shiftTimeslots:\n        - startHour: 10\n          startMinute: 30\n          duration: 720\n      changeParticipantsFrequency: 1\n      changeParticipantsUnit: rotation\n      participantGroups:\n        - participants:\n            - id: ${exampleUser.id}\n              type: user\n            - id: ${exampleUser2.id}\n              type: user\n      endsAfterIterations: 2\n  # Create a rotation with custom period\n  rotationsWithCustomPeriod:\n    type: squadcast:ScheduleRotationV2\n    properties:\n      scheduleId: ${getSchedule.id}\n      startDate: 2023-06-13T00:00:00Z\n      period: custom\n      shiftTimeslots:\n        - startHour: 10\n          startMinute: 0\n          duration: 1440\n          dayOfWeek: saturday\n        - startHour: 12\n          startMinute: 30\n          duration: 720\n          dayOfWeek: sunday\n      changeParticipantsFrequency: 1\n      changeParticipantsUnit: rotation\n      customPeriodFrequency: 1\n      customPeriodUnit: week\n      participantGroups:\n        - participants:\n            - id: ${exampleUser.id}\n              type: user\n        - participants:\n            - id: ${exampleUser2.id}\n              type: user\n      endDate: 2023-08-31T00:00:00Z\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n  exampleUser2:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test2@example.com\n  getSchedule:\n    fn::invoke:\n      Function: squadcast:getScheduleV2\n      Arguments:\n        name: Test Schedule\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:scheduleName:rotationName\n\n```sh\n$ pulumi import squadcast:index/scheduleRotationV2:ScheduleRotationV2 rotation \"62d2fe23a57381088224d726:Example Schedule:Example Rotation\"\n```\n\n",
            "properties": {
                "changeParticipantsFrequency": {
                    "type": "integer",
                    "description": "Frequency with which participants change in the rotation.\n"
                },
                "changeParticipantsUnit": {
                    "type": "string",
                    "description": "Unit of the frequency with which participants change in the rotation (rotation, day, week, month).\n"
                },
                "customPeriodFrequency": {
                    "type": "integer",
                    "description": "Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.\n"
                },
                "customPeriodUnit": {
                    "type": "string",
                    "description": "Unit of the custom rotation repeat pattern (day, week). Only applicable if period is set to custom.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "Defines the end date of the schedule rotation.\n"
                },
                "endsAfterIterations": {
                    "type": "integer",
                    "description": "Defines the number of iterations of the schedule rotation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rotation name.\n"
                },
                "participantGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/ScheduleRotationV2ParticipantGroup:ScheduleRotationV2ParticipantGroup"
                    },
                    "description": "Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.\n"
                },
                "period": {
                    "type": "string",
                    "description": "Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.\n"
                },
                "scheduleId": {
                    "type": "integer",
                    "description": "id of the schedule that the rotation belongs to.\n"
                },
                "shiftTimeslots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/ScheduleRotationV2ShiftTimeslot:ScheduleRotationV2ShiftTimeslot"
                    },
                    "description": "Timeslots where the rotation is active.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Defines the start date of the rotation.\n"
                }
            },
            "required": [
                "changeParticipantsFrequency",
                "changeParticipantsUnit",
                "name",
                "period",
                "scheduleId",
                "shiftTimeslots",
                "startDate"
            ],
            "inputProperties": {
                "changeParticipantsFrequency": {
                    "type": "integer",
                    "description": "Frequency with which participants change in the rotation.\n"
                },
                "changeParticipantsUnit": {
                    "type": "string",
                    "description": "Unit of the frequency with which participants change in the rotation (rotation, day, week, month).\n"
                },
                "customPeriodFrequency": {
                    "type": "integer",
                    "description": "Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.\n"
                },
                "customPeriodUnit": {
                    "type": "string",
                    "description": "Unit of the custom rotation repeat pattern (day, week). Only applicable if period is set to custom.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "Defines the end date of the schedule rotation.\n"
                },
                "endsAfterIterations": {
                    "type": "integer",
                    "description": "Defines the number of iterations of the schedule rotation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Rotation name.\n"
                },
                "participantGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/ScheduleRotationV2ParticipantGroup:ScheduleRotationV2ParticipantGroup"
                    },
                    "description": "Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.\n"
                },
                "period": {
                    "type": "string",
                    "description": "Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.\n"
                },
                "scheduleId": {
                    "type": "integer",
                    "description": "id of the schedule that the rotation belongs to.\n"
                },
                "shiftTimeslots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/ScheduleRotationV2ShiftTimeslot:ScheduleRotationV2ShiftTimeslot"
                    },
                    "description": "Timeslots where the rotation is active.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "Defines the start date of the rotation.\n"
                }
            },
            "requiredInputs": [
                "changeParticipantsFrequency",
                "changeParticipantsUnit",
                "period",
                "scheduleId",
                "shiftTimeslots",
                "startDate"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScheduleRotationV2 resources.\n",
                "properties": {
                    "changeParticipantsFrequency": {
                        "type": "integer",
                        "description": "Frequency with which participants change in the rotation.\n"
                    },
                    "changeParticipantsUnit": {
                        "type": "string",
                        "description": "Unit of the frequency with which participants change in the rotation (rotation, day, week, month).\n"
                    },
                    "customPeriodFrequency": {
                        "type": "integer",
                        "description": "Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.\n"
                    },
                    "customPeriodUnit": {
                        "type": "string",
                        "description": "Unit of the custom rotation repeat pattern (day, week). Only applicable if period is set to custom.\n"
                    },
                    "endDate": {
                        "type": "string",
                        "description": "Defines the end date of the schedule rotation.\n"
                    },
                    "endsAfterIterations": {
                        "type": "integer",
                        "description": "Defines the number of iterations of the schedule rotation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Rotation name.\n"
                    },
                    "participantGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/ScheduleRotationV2ParticipantGroup:ScheduleRotationV2ParticipantGroup"
                        },
                        "description": "Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.\n"
                    },
                    "period": {
                        "type": "string",
                        "description": "Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.\n"
                    },
                    "scheduleId": {
                        "type": "integer",
                        "description": "id of the schedule that the rotation belongs to.\n"
                    },
                    "shiftTimeslots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/ScheduleRotationV2ShiftTimeslot:ScheduleRotationV2ShiftTimeslot"
                        },
                        "description": "Timeslots where the rotation is active.\n"
                    },
                    "startDate": {
                        "type": "string",
                        "description": "Defines the start date of the rotation.\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/scheduleV2:ScheduleV2": {
            "description": "[Squadcast schedules v2](https://support.squadcast.com/schedules/schedules-new) are used to manage on-call scheduling \u0026 determine who will be notified when an incident is triggered. The name of the Schedule must be unique within a Team.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleUser = squadcast.getUser({\n    email: \"test@example.com\",\n});\nconst scheduleTest = new squadcast.ScheduleV2(\"scheduleTest\", {\n    description: \"test schedule\",\n    timezone: \"Asia/Kolkata\",\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    entityOwner: {\n        id: exampleUser.then(exampleUser =\u003e exampleUser.id),\n        type: \"user\",\n    },\n    tags: [\n        {\n            key: \"testkey\",\n            value: \"testval\",\n        },\n        {\n            key: \"testkey2\",\n            value: \"testval2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_user = squadcast.get_user(email=\"test@example.com\")\nschedule_test = squadcast.ScheduleV2(\"scheduleTest\",\n    description=\"test schedule\",\n    timezone=\"Asia/Kolkata\",\n    team_id=example_team.id,\n    entity_owner=squadcast.ScheduleV2EntityOwnerArgs(\n        id=example_user.id,\n        type=\"user\",\n    ),\n    tags=[\n        squadcast.ScheduleV2TagArgs(\n            key=\"testkey\",\n            value=\"testval\",\n        ),\n        squadcast.ScheduleV2TagArgs(\n            key=\"testkey2\",\n            value=\"testval2\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleUser = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"test@example.com\",\n    });\n\n    var scheduleTest = new Squadcast.ScheduleV2(\"scheduleTest\", new()\n    {\n        Description = \"test schedule\",\n        Timezone = \"Asia/Kolkata\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        EntityOwner = new Squadcast.Inputs.ScheduleV2EntityOwnerArgs\n        {\n            Id = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n            Type = \"user\",\n        },\n        Tags = new[]\n        {\n            new Squadcast.Inputs.ScheduleV2TagArgs\n            {\n                Key = \"testkey\",\n                Value = \"testval\",\n            },\n            new Squadcast.Inputs.ScheduleV2TagArgs\n            {\n                Key = \"testkey2\",\n                Value = \"testval2\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"test@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewScheduleV2(ctx, \"scheduleTest\", \u0026squadcast.ScheduleV2Args{\n\t\t\tDescription: pulumi.String(\"test schedule\"),\n\t\t\tTimezone:    pulumi.String(\"Asia/Kolkata\"),\n\t\t\tTeamId:      pulumi.String(exampleTeam.Id),\n\t\t\tEntityOwner: \u0026squadcast.ScheduleV2EntityOwnerArgs{\n\t\t\t\tId:   pulumi.String(exampleUser.Id),\n\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t},\n\t\t\tTags: squadcast.ScheduleV2TagArray{\n\t\t\t\t\u0026squadcast.ScheduleV2TagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"testkey\"),\n\t\t\t\t\tValue: pulumi.String(\"testval\"),\n\t\t\t\t},\n\t\t\t\t\u0026squadcast.ScheduleV2TagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"testkey2\"),\n\t\t\t\t\tValue: pulumi.String(\"testval2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.ScheduleV2;\nimport com.pulumi.squadcast.ScheduleV2Args;\nimport com.pulumi.squadcast.inputs.ScheduleV2EntityOwnerArgs;\nimport com.pulumi.squadcast.inputs.ScheduleV2TagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        var scheduleTest = new ScheduleV2(\"scheduleTest\", ScheduleV2Args.builder()\n            .description(\"test schedule\")\n            .timezone(\"Asia/Kolkata\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .entityOwner(ScheduleV2EntityOwnerArgs.builder()\n                .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .type(\"user\")\n                .build())\n            .tags(            \n                ScheduleV2TagArgs.builder()\n                    .key(\"testkey\")\n                    .value(\"testval\")\n                    .build(),\n                ScheduleV2TagArgs.builder()\n                    .key(\"testkey2\")\n                    .value(\"testval2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  scheduleTest:\n    type: squadcast:ScheduleV2\n    properties:\n      description: test schedule\n      timezone: Asia/Kolkata\n      teamId: ${exampleTeam.id}\n      entityOwner:\n        id: ${exampleUser.id}\n        type: user\n      tags:\n        - key: testkey\n          value: testval\n        - key: testkey2\n          value: testval2\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:scheduleName\n\nUse 'Get All Teams' API to get the id of the team\n\n```sh\n$ pulumi import squadcast:index/scheduleV2:ScheduleV2 schedule_test \"62d2fe23a57381088224d726:Example Schedule\"\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Detailed description about the schedule.\n"
                },
                "entityOwner": {
                    "$ref": "#/types/squadcast:index/ScheduleV2EntityOwner:ScheduleV2EntityOwner",
                    "description": "Schedule owner.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the schedule.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/ScheduleV2Tag:ScheduleV2Tag"
                    },
                    "description": "Schedule tags.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone for the schedule.\n"
                }
            },
            "required": [
                "entityOwner",
                "name",
                "teamId",
                "timezone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Detailed description about the schedule.\n"
                },
                "entityOwner": {
                    "$ref": "#/types/squadcast:index/ScheduleV2EntityOwner:ScheduleV2EntityOwner",
                    "description": "Schedule owner.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the schedule.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/ScheduleV2Tag:ScheduleV2Tag"
                    },
                    "description": "Schedule tags.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n",
                    "willReplaceOnChanges": true
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone for the schedule.\n"
                }
            },
            "requiredInputs": [
                "entityOwner",
                "teamId",
                "timezone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ScheduleV2 resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Detailed description about the schedule.\n"
                    },
                    "entityOwner": {
                        "$ref": "#/types/squadcast:index/ScheduleV2EntityOwner:ScheduleV2EntityOwner",
                        "description": "Schedule owner.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the schedule.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/ScheduleV2Tag:ScheduleV2Tag"
                        },
                        "description": "Schedule tags.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Timezone for the schedule.\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/service:Service": {
            "description": "[Squadcast Services](https://support.squadcast.com/docs/adding-a-service-1) are the core components of your infrastructure/application for which alerts are generated. Services in Squadcast represent specific systems, applications, components, products, or teams for which an incident is created. To check out some of the best practices on creating Services in Squadcast, refer to the guide [here](https://www.squadcast.com/blog/how-to-configure-services-in-squadcast-best-practices-to-reduce-mttr). The name of the Service must be unique within and across Teams.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleUser = squadcast.getUser({\n    email: \"test@example.com\",\n});\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleEscalaionPolicy = exampleTeam.then(exampleTeam =\u003e squadcast.getEscalationPolicy({\n    name: \"example escalation policy name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleService = new squadcast.Service(\"exampleService\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    escalationPolicyId: exampleEscalaionPolicy.then(exampleEscalaionPolicy =\u003e exampleEscalaionPolicy.id),\n    emailPrefix: \"example-service-email\",\n    maintainer: {\n        id: exampleUser.then(exampleUser =\u003e exampleUser.id),\n        type: \"user\",\n    },\n    tags: [\n        {\n            key: \"testkey\",\n            value: \"testval\",\n        },\n        {\n            key: \"testkey2\",\n            value: \"testval2\",\n        },\n    ],\n    alertSources: [\"example-alert-source\"],\n    slackChannelId: \"D0KAQDEPSH\",\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_user = squadcast.get_user(email=\"test@example.com\")\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_escalaion_policy = squadcast.get_escalation_policy(name=\"example escalation policy name\",\n    team_id=example_team.id)\nexample_service = squadcast.Service(\"exampleService\",\n    team_id=example_team.id,\n    escalation_policy_id=example_escalaion_policy.id,\n    email_prefix=\"example-service-email\",\n    maintainer=squadcast.ServiceMaintainerArgs(\n        id=example_user.id,\n        type=\"user\",\n    ),\n    tags=[\n        squadcast.ServiceTagArgs(\n            key=\"testkey\",\n            value=\"testval\",\n        ),\n        squadcast.ServiceTagArgs(\n            key=\"testkey2\",\n            value=\"testval2\",\n        ),\n    ],\n    alert_sources=[\"example-alert-source\"],\n    slack_channel_id=\"D0KAQDEPSH\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"test@example.com\",\n    });\n\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleEscalaionPolicy = Squadcast.GetEscalationPolicy.Invoke(new()\n    {\n        Name = \"example escalation policy name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleService = new Squadcast.Service(\"exampleService\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        EscalationPolicyId = exampleEscalaionPolicy.Apply(getEscalationPolicyResult =\u003e getEscalationPolicyResult.Id),\n        EmailPrefix = \"example-service-email\",\n        Maintainer = new Squadcast.Inputs.ServiceMaintainerArgs\n        {\n            Id = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n            Type = \"user\",\n        },\n        Tags = new[]\n        {\n            new Squadcast.Inputs.ServiceTagArgs\n            {\n                Key = \"testkey\",\n                Value = \"testval\",\n            },\n            new Squadcast.Inputs.ServiceTagArgs\n            {\n                Key = \"testkey2\",\n                Value = \"testval2\",\n            },\n        },\n        AlertSources = new[]\n        {\n            \"example-alert-source\",\n        },\n        SlackChannelId = \"D0KAQDEPSH\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleUser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"test@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEscalaionPolicy, err := squadcast.LookupEscalationPolicy(ctx, \u0026squadcast.LookupEscalationPolicyArgs{\n\t\t\tName:   \"example escalation policy name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewService(ctx, \"exampleService\", \u0026squadcast.ServiceArgs{\n\t\t\tTeamId:             pulumi.String(exampleTeam.Id),\n\t\t\tEscalationPolicyId: pulumi.String(exampleEscalaionPolicy.Id),\n\t\t\tEmailPrefix:        pulumi.String(\"example-service-email\"),\n\t\t\tMaintainer: \u0026squadcast.ServiceMaintainerArgs{\n\t\t\t\tId:   pulumi.String(exampleUser.Id),\n\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t},\n\t\t\tTags: squadcast.ServiceTagArray{\n\t\t\t\t\u0026squadcast.ServiceTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"testkey\"),\n\t\t\t\t\tValue: pulumi.String(\"testval\"),\n\t\t\t\t},\n\t\t\t\t\u0026squadcast.ServiceTagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"testkey2\"),\n\t\t\t\t\tValue: pulumi.String(\"testval2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAlertSources: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"example-alert-source\"),\n\t\t\t},\n\t\t\tSlackChannelId: pulumi.String(\"D0KAQDEPSH\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetEscalationPolicyArgs;\nimport com.pulumi.squadcast.Service;\nimport com.pulumi.squadcast.ServiceArgs;\nimport com.pulumi.squadcast.inputs.ServiceMaintainerArgs;\nimport com.pulumi.squadcast.inputs.ServiceTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        final var exampleEscalaionPolicy = SquadcastFunctions.getEscalationPolicy(GetEscalationPolicyArgs.builder()\n            .name(\"example escalation policy name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleService = new Service(\"exampleService\", ServiceArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .escalationPolicyId(exampleEscalaionPolicy.applyValue(getEscalationPolicyResult -\u003e getEscalationPolicyResult.id()))\n            .emailPrefix(\"example-service-email\")\n            .maintainer(ServiceMaintainerArgs.builder()\n                .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .type(\"user\")\n                .build())\n            .tags(            \n                ServiceTagArgs.builder()\n                    .key(\"testkey\")\n                    .value(\"testval\")\n                    .build(),\n                ServiceTagArgs.builder()\n                    .key(\"testkey2\")\n                    .value(\"testval2\")\n                    .build())\n            .alertSources(\"example-alert-source\")\n            .slackChannelId(\"D0KAQDEPSH\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleService:\n    type: squadcast:Service\n    properties:\n      teamId: ${exampleTeam.id}\n      escalationPolicyId: ${exampleEscalaionPolicy.id}\n      emailPrefix: example-service-email\n      maintainer:\n        id: ${exampleUser.id}\n        type: user\n      tags:\n        - key: testkey\n          value: testval\n        - key: testkey2\n          value: testval2\n      alertSources:\n        - example-alert-source\n      slackChannelId: D0KAQDEPSH\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n  exampleEscalaionPolicy:\n    fn::invoke:\n      Function: squadcast:getEscalationPolicy\n      Arguments:\n        name: example escalation policy name\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:serviceID\n\nUse 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively \n\n```sh\n$ pulumi import squadcast:index/service:Service test_parent 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5\n```\n\n",
            "properties": {
                "activeAlertSourceEndpoints": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Active alert source endpoints.\n"
                },
                "alertSourceEndpoints": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "All available alert source endpoints.\n"
                },
                "alertSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of active alert source names. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "Unique API key of this service.\n"
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Dependencies (serviceIds)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description about this service.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email.\n"
                },
                "emailPrefix": {
                    "type": "string",
                    "description": "Email prefix.\n"
                },
                "escalationPolicyId": {
                    "type": "string",
                    "description": "Escalation policy id.\n"
                },
                "maintainer": {
                    "$ref": "#/types/squadcast:index/ServiceMaintainer:ServiceMaintainer",
                    "description": "Service owner.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Service.\n"
                },
                "slackChannelId": {
                    "type": "string",
                    "description": "Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/ServiceTag:ServiceTag"
                    },
                    "description": "Service tags.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                }
            },
            "required": [
                "activeAlertSourceEndpoints",
                "alertSourceEndpoints",
                "apiKey",
                "email",
                "emailPrefix",
                "escalationPolicyId",
                "maintainer",
                "name",
                "slackChannelId",
                "teamId"
            ],
            "inputProperties": {
                "alertSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of active alert source names. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).\n"
                },
                "dependencies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Dependencies (serviceIds)\n"
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description about this service.\n"
                },
                "emailPrefix": {
                    "type": "string",
                    "description": "Email prefix.\n"
                },
                "escalationPolicyId": {
                    "type": "string",
                    "description": "Escalation policy id.\n"
                },
                "maintainer": {
                    "$ref": "#/types/squadcast:index/ServiceMaintainer:ServiceMaintainer",
                    "description": "Service owner.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Service.\n"
                },
                "slackChannelId": {
                    "type": "string",
                    "description": "Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/ServiceTag:ServiceTag"
                    },
                    "description": "Service tags.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "emailPrefix",
                "escalationPolicyId",
                "maintainer",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "activeAlertSourceEndpoints": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Active alert source endpoints.\n"
                    },
                    "alertSourceEndpoints": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "All available alert source endpoints.\n"
                    },
                    "alertSources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of active alert source names. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "Unique API key of this service.\n"
                    },
                    "dependencies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Dependencies (serviceIds)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed description about this service.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email.\n"
                    },
                    "emailPrefix": {
                        "type": "string",
                        "description": "Email prefix.\n"
                    },
                    "escalationPolicyId": {
                        "type": "string",
                        "description": "Escalation policy id.\n"
                    },
                    "maintainer": {
                        "$ref": "#/types/squadcast:index/ServiceMaintainer:ServiceMaintainer",
                        "description": "Service owner.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Service.\n"
                    },
                    "slackChannelId": {
                        "type": "string",
                        "description": "Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/ServiceTag:ServiceTag"
                        },
                        "description": "Service tags.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/serviceMaintenance:ServiceMaintenance": {
            "description": "[Maintenance Mode](https://support.squadcast.com/docs/maintenance-mode) enables you to reduce alert noise during the scheduled maintenance window. Alerts generated during active maintenance windows would be automatically suppressed and hence, no notifications are generated for those suppressed alerts.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleService = exampleTeam.then(exampleTeam =\u003e squadcast.getService({\n    name: \"example service name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleServiceMaintenance = new squadcast.ServiceMaintenance(\"exampleServiceMaintenance\", {\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    windows: [\n        {\n            from: \"2032-06-01T10:30:00.000Z\",\n            till: \"2032-06-01T11:30:00.000Z\",\n            repeatTill: \"2032-06-30T10:30:00.000Z\",\n            repeatFrequency: \"week\",\n        },\n        {\n            from: \"2032-07-01T10:30:00.000Z\",\n            till: \"2032-07-02T10:30:00.000Z\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_service = squadcast.get_service(name=\"example service name\",\n    team_id=example_team.id)\nexample_service_maintenance = squadcast.ServiceMaintenance(\"exampleServiceMaintenance\",\n    service_id=example_service.id,\n    windows=[\n        squadcast.ServiceMaintenanceWindowArgs(\n            from_=\"2032-06-01T10:30:00.000Z\",\n            till=\"2032-06-01T11:30:00.000Z\",\n            repeat_till=\"2032-06-30T10:30:00.000Z\",\n            repeat_frequency=\"week\",\n        ),\n        squadcast.ServiceMaintenanceWindowArgs(\n            from_=\"2032-07-01T10:30:00.000Z\",\n            till=\"2032-07-02T10:30:00.000Z\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleService = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"example service name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleServiceMaintenance = new Squadcast.ServiceMaintenance(\"exampleServiceMaintenance\", new()\n    {\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        Windows = new[]\n        {\n            new Squadcast.Inputs.ServiceMaintenanceWindowArgs\n            {\n                From = \"2032-06-01T10:30:00.000Z\",\n                Till = \"2032-06-01T11:30:00.000Z\",\n                RepeatTill = \"2032-06-30T10:30:00.000Z\",\n                RepeatFrequency = \"week\",\n            },\n            new Squadcast.Inputs.ServiceMaintenanceWindowArgs\n            {\n                From = \"2032-07-01T10:30:00.000Z\",\n                Till = \"2032-07-02T10:30:00.000Z\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"example service name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewServiceMaintenance(ctx, \"exampleServiceMaintenance\", \u0026squadcast.ServiceMaintenanceArgs{\n\t\t\tServiceId: pulumi.String(exampleService.Id),\n\t\t\tWindows: squadcast.ServiceMaintenanceWindowArray{\n\t\t\t\t\u0026squadcast.ServiceMaintenanceWindowArgs{\n\t\t\t\t\tFrom:            pulumi.String(\"2032-06-01T10:30:00.000Z\"),\n\t\t\t\t\tTill:            pulumi.String(\"2032-06-01T11:30:00.000Z\"),\n\t\t\t\t\tRepeatTill:      pulumi.String(\"2032-06-30T10:30:00.000Z\"),\n\t\t\t\t\tRepeatFrequency: pulumi.String(\"week\"),\n\t\t\t\t},\n\t\t\t\t\u0026squadcast.ServiceMaintenanceWindowArgs{\n\t\t\t\t\tFrom: pulumi.String(\"2032-07-01T10:30:00.000Z\"),\n\t\t\t\t\tTill: pulumi.String(\"2032-07-02T10:30:00.000Z\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.ServiceMaintenance;\nimport com.pulumi.squadcast.ServiceMaintenanceArgs;\nimport com.pulumi.squadcast.inputs.ServiceMaintenanceWindowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"example service name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleServiceMaintenance = new ServiceMaintenance(\"exampleServiceMaintenance\", ServiceMaintenanceArgs.builder()\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .windows(            \n                ServiceMaintenanceWindowArgs.builder()\n                    .from(\"2032-06-01T10:30:00.000Z\")\n                    .till(\"2032-06-01T11:30:00.000Z\")\n                    .repeatTill(\"2032-06-30T10:30:00.000Z\")\n                    .repeatFrequency(\"week\")\n                    .build(),\n                ServiceMaintenanceWindowArgs.builder()\n                    .from(\"2032-07-01T10:30:00.000Z\")\n                    .till(\"2032-07-02T10:30:00.000Z\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleServiceMaintenance:\n    type: squadcast:ServiceMaintenance\n    properties:\n      serviceId: ${exampleService.id}\n      windows:\n        - from: 2032-06-01T10:30:00.000Z\n          till: 2032-06-01T11:30:00.000Z\n          repeatTill: 2032-06-30T10:30:00.000Z\n          repeatFrequency: week\n        - from: 2032-07-01T10:30:00.000Z\n          till: 2032-07-02T10:30:00.000Z\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: example service name\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:serviceID\n\nUse 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively \n\n```sh\n$ pulumi import squadcast:index/serviceMaintenance:ServiceMaintenance test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5\n```\n\n",
            "properties": {
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n"
                },
                "windows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/ServiceMaintenanceWindow:ServiceMaintenanceWindow"
                    },
                    "description": "Date and Time range during which maintenance would be carried out\n"
                }
            },
            "required": [
                "serviceId"
            ],
            "inputProperties": {
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n",
                    "willReplaceOnChanges": true
                },
                "windows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/ServiceMaintenanceWindow:ServiceMaintenanceWindow"
                    },
                    "description": "Date and Time range during which maintenance would be carried out\n"
                }
            },
            "requiredInputs": [
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceMaintenance resources.\n",
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "Service id.\n",
                        "willReplaceOnChanges": true
                    },
                    "windows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/ServiceMaintenanceWindow:ServiceMaintenanceWindow"
                        },
                        "description": "Date and Time range during which maintenance would be carried out\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/slo:Slo": {
            "description": "`squadcast.Slo` manages an SLO. The name of the SLO must be unique within a Team.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleUser = squadcast.getUser({\n    email: \"test@example.com\",\n});\nconst exampleService = exampleTeam.then(exampleTeam =\u003e squadcast.getService({\n    name: \"example service name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleSlo = new squadcast.Slo(\"exampleSlo\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    description: \"Slo for checkout flow\",\n    targetSlo: 99.99,\n    serviceIds: [exampleService.then(exampleService =\u003e exampleService.id)],\n    slis: [\n        \"latency\",\n        \"high-err-rate\",\n    ],\n    timeIntervalType: \"rolling\",\n    durationInDays: 7,\n    rules: [\n        {\n            name: \"breached_error_budget\",\n        },\n        {\n            name: \"remaining_error_budget\",\n            threshold: 11,\n        },\n        {\n            name: \"unhealthy_slo\",\n            threshold: 1,\n        },\n    ],\n    notify: {\n        userIds: [exampleUser.then(exampleUser =\u003e exampleUser.id)],\n    },\n    entityOwner: {\n        id: exampleUser.then(exampleUser =\u003e exampleUser.id),\n        type: \"user\",\n    },\n    tags: {\n        tagKey: \"tagValue\",\n        tagKey2: \"tagValue2\",\n    },\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_user = squadcast.get_user(email=\"test@example.com\")\nexample_service = squadcast.get_service(name=\"example service name\",\n    team_id=example_team.id)\nexample_slo = squadcast.Slo(\"exampleSlo\",\n    team_id=example_team.id,\n    description=\"Slo for checkout flow\",\n    target_slo=99.99,\n    service_ids=[example_service.id],\n    slis=[\n        \"latency\",\n        \"high-err-rate\",\n    ],\n    time_interval_type=\"rolling\",\n    duration_in_days=7,\n    rules=[\n        squadcast.SloRuleArgs(\n            name=\"breached_error_budget\",\n        ),\n        squadcast.SloRuleArgs(\n            name=\"remaining_error_budget\",\n            threshold=11,\n        ),\n        squadcast.SloRuleArgs(\n            name=\"unhealthy_slo\",\n            threshold=1,\n        ),\n    ],\n    notify=squadcast.SloNotifyArgs(\n        user_ids=[example_user.id],\n    ),\n    entity_owner=squadcast.SloEntityOwnerArgs(\n        id=example_user.id,\n        type=\"user\",\n    ),\n    tags={\n        \"tagKey\": \"tagValue\",\n        \"tagKey2\": \"tagValue2\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleUser = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"test@example.com\",\n    });\n\n    var exampleService = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"example service name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleSlo = new Squadcast.Slo(\"exampleSlo\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        Description = \"Slo for checkout flow\",\n        TargetSlo = 99.99,\n        ServiceIds = new[]\n        {\n            exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        },\n        Slis = new[]\n        {\n            \"latency\",\n            \"high-err-rate\",\n        },\n        TimeIntervalType = \"rolling\",\n        DurationInDays = 7,\n        Rules = new[]\n        {\n            new Squadcast.Inputs.SloRuleArgs\n            {\n                Name = \"breached_error_budget\",\n            },\n            new Squadcast.Inputs.SloRuleArgs\n            {\n                Name = \"remaining_error_budget\",\n                Threshold = 11,\n            },\n            new Squadcast.Inputs.SloRuleArgs\n            {\n                Name = \"unhealthy_slo\",\n                Threshold = 1,\n            },\n        },\n        Notify = new Squadcast.Inputs.SloNotifyArgs\n        {\n            UserIds = new[]\n            {\n                exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n            },\n        },\n        EntityOwner = new Squadcast.Inputs.SloEntityOwnerArgs\n        {\n            Id = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n            Type = \"user\",\n        },\n        Tags = \n        {\n            { \"tagKey\", \"tagValue\" },\n            { \"tagKey2\", \"tagValue2\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"test@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"example service name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewSlo(ctx, \"exampleSlo\", \u0026squadcast.SloArgs{\n\t\t\tTeamId:      pulumi.String(exampleTeam.Id),\n\t\t\tDescription: pulumi.String(\"Slo for checkout flow\"),\n\t\t\tTargetSlo:   pulumi.Float64(99.99),\n\t\t\tServiceIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(exampleService.Id),\n\t\t\t},\n\t\t\tSlis: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"latency\"),\n\t\t\t\tpulumi.String(\"high-err-rate\"),\n\t\t\t},\n\t\t\tTimeIntervalType: pulumi.String(\"rolling\"),\n\t\t\tDurationInDays:   pulumi.Int(7),\n\t\t\tRules: squadcast.SloRuleArray{\n\t\t\t\t\u0026squadcast.SloRuleArgs{\n\t\t\t\t\tName: pulumi.String(\"breached_error_budget\"),\n\t\t\t\t},\n\t\t\t\t\u0026squadcast.SloRuleArgs{\n\t\t\t\t\tName:      pulumi.String(\"remaining_error_budget\"),\n\t\t\t\t\tThreshold: pulumi.Int(11),\n\t\t\t\t},\n\t\t\t\t\u0026squadcast.SloRuleArgs{\n\t\t\t\t\tName:      pulumi.String(\"unhealthy_slo\"),\n\t\t\t\t\tThreshold: pulumi.Int(1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNotify: \u0026squadcast.SloNotifyArgs{\n\t\t\t\tUserIds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(exampleUser.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEntityOwner: \u0026squadcast.SloEntityOwnerArgs{\n\t\t\t\tId:   pulumi.String(exampleUser.Id),\n\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t},\n\t\t\tTags: pulumi.StringMap{\n\t\t\t\t\"tagKey\":  pulumi.String(\"tagValue\"),\n\t\t\t\t\"tagKey2\": pulumi.String(\"tagValue2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.Slo;\nimport com.pulumi.squadcast.SloArgs;\nimport com.pulumi.squadcast.inputs.SloRuleArgs;\nimport com.pulumi.squadcast.inputs.SloNotifyArgs;\nimport com.pulumi.squadcast.inputs.SloEntityOwnerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"example service name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleSlo = new Slo(\"exampleSlo\", SloArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .description(\"Slo for checkout flow\")\n            .targetSlo(99.99)\n            .serviceIds(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .slis(            \n                \"latency\",\n                \"high-err-rate\")\n            .timeIntervalType(\"rolling\")\n            .durationInDays(7)\n            .rules(            \n                SloRuleArgs.builder()\n                    .name(\"breached_error_budget\")\n                    .build(),\n                SloRuleArgs.builder()\n                    .name(\"remaining_error_budget\")\n                    .threshold(11)\n                    .build(),\n                SloRuleArgs.builder()\n                    .name(\"unhealthy_slo\")\n                    .threshold(1)\n                    .build())\n            .notify(SloNotifyArgs.builder()\n                .userIds(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .build())\n            .entityOwner(SloEntityOwnerArgs.builder()\n                .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .type(\"user\")\n                .build())\n            .tags(Map.ofEntries(\n                Map.entry(\"tagKey\", \"tagValue\"),\n                Map.entry(\"tagKey2\", \"tagValue2\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSlo:\n    type: squadcast:Slo\n    properties:\n      teamId: ${exampleTeam.id}\n      description: Slo for checkout flow\n      targetSlo: 99.99\n      serviceIds:\n        - ${exampleService.id}\n      slis:\n        - latency\n        - high-err-rate\n      timeIntervalType: rolling\n      durationInDays: 7\n      rules:\n        - name: breached_error_budget\n        - name: remaining_error_budget\n          threshold: 11\n        - name: unhealthy_slo\n          threshold: 1\n      notify:\n        userIds:\n          - ${exampleUser.id}\n      entityOwner:\n        id: ${exampleUser.id}\n        type: user\n      tags:\n        tagKey: tagValue\n        tagKey2: tagValue2\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: example service name\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:sloID\n\nUse 'Get All Teams' and 'Get All Slos' APIs to get the id of the team and slo respectively \n\n```sh\n$ pulumi import squadcast:index/slo:Slo test 61443b953ffd52818bf1617a:1023\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the SLO.\n"
                },
                "durationInDays": {
                    "type": "integer",
                    "description": "Tracks SLO for the last x days. Required only when SLO time interval type set to \"rolling\"\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "SLO end time. Required only when SLO time interval type set to \"fixed\"\n"
                },
                "entityOwner": {
                    "$ref": "#/types/squadcast:index/SloEntityOwner:SloEntityOwner",
                    "description": "SLO owner.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SLO.\n"
                },
                "notify": {
                    "$ref": "#/types/squadcast:index/SloNotify:SloNotify",
                    "description": "Notification rules for SLO violationUser can either choose to create an incident or get alerted via email\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/SloRule:SloRule"
                    },
                    "description": "SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident\n"
                },
                "slis": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of indentified SLIs for the SLO\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "SLO start time. Required only when SLO time interval type set to \"fixed\"\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "SLO Tags.\n"
                },
                "targetSlo": {
                    "type": "number",
                    "description": "The target SLO for the time period.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team which SLO resource belongs to\n"
                },
                "timeIntervalType": {
                    "type": "string",
                    "description": "Type of the SLO. Values can either be \"rolling\" or \"fixed\"\n"
                }
            },
            "required": [
                "durationInDays",
                "endTime",
                "entityOwner",
                "name",
                "serviceIds",
                "slis",
                "startTime",
                "tags",
                "targetSlo",
                "teamId",
                "timeIntervalType"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the SLO.\n"
                },
                "durationInDays": {
                    "type": "integer",
                    "description": "Tracks SLO for the last x days. Required only when SLO time interval type set to \"rolling\"\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "SLO end time. Required only when SLO time interval type set to \"fixed\"\n"
                },
                "entityOwner": {
                    "$ref": "#/types/squadcast:index/SloEntityOwner:SloEntityOwner",
                    "description": "SLO owner.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SLO.\n"
                },
                "notify": {
                    "$ref": "#/types/squadcast:index/SloNotify:SloNotify",
                    "description": "Notification rules for SLO violationUser can either choose to create an incident or get alerted via email\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/SloRule:SloRule"
                    },
                    "description": "SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident\n"
                },
                "slis": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of indentified SLIs for the SLO\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "SLO start time. Required only when SLO time interval type set to \"fixed\"\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "SLO Tags.\n"
                },
                "targetSlo": {
                    "type": "number",
                    "description": "The target SLO for the time period.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team which SLO resource belongs to\n",
                    "willReplaceOnChanges": true
                },
                "timeIntervalType": {
                    "type": "string",
                    "description": "Type of the SLO. Values can either be \"rolling\" or \"fixed\"\n"
                }
            },
            "requiredInputs": [
                "entityOwner",
                "serviceIds",
                "slis",
                "targetSlo",
                "teamId",
                "timeIntervalType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Slo resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the SLO.\n"
                    },
                    "durationInDays": {
                        "type": "integer",
                        "description": "Tracks SLO for the last x days. Required only when SLO time interval type set to \"rolling\"\n"
                    },
                    "endTime": {
                        "type": "string",
                        "description": "SLO end time. Required only when SLO time interval type set to \"fixed\"\n"
                    },
                    "entityOwner": {
                        "$ref": "#/types/squadcast:index/SloEntityOwner:SloEntityOwner",
                        "description": "SLO owner.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SLO.\n"
                    },
                    "notify": {
                        "$ref": "#/types/squadcast:index/SloNotify:SloNotify",
                        "description": "Notification rules for SLO violationUser can either choose to create an incident or get alerted via email\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/SloRule:SloRule"
                        },
                        "description": "SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident\n"
                    },
                    "slis": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of indentified SLIs for the SLO\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "SLO start time. Required only when SLO time interval type set to \"fixed\"\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "SLO Tags.\n"
                    },
                    "targetSlo": {
                        "type": "number",
                        "description": "The target SLO for the time period.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team which SLO resource belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "timeIntervalType": {
                        "type": "string",
                        "description": "Type of the SLO. Values can either be \"rolling\" or \"fixed\"\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/squad:Squad": {
            "description": "[Squads](https://support.squadcast.com/docs/squads) are smaller groups of members within Teams. Squads could correspond to groups of people that are responsible for specific projects within a Team. The name of the Squad must be unique within a Team.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example test name\",\n});\nconst exampleUser = squadcast.getUser({\n    email: \"test@example.com\",\n});\nconst exampleSquad = new squadcast.Squad(\"exampleSquad\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    memberIds: [exampleUser.then(exampleUser =\u003e exampleUser.id)],\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example test name\")\nexample_user = squadcast.get_user(email=\"test@example.com\")\nexample_squad = squadcast.Squad(\"exampleSquad\",\n    team_id=example_team.id,\n    member_ids=[example_user.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example test name\",\n    });\n\n    var exampleUser = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"test@example.com\",\n    });\n\n    var exampleSquad = new Squadcast.Squad(\"exampleSquad\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        MemberIds = new[]\n        {\n            exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example test name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"test@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewSquad(ctx, \"exampleSquad\", \u0026squadcast.SquadArgs{\n\t\t\tTeamId: pulumi.String(exampleTeam.Id),\n\t\t\tMemberIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(exampleUser.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.Squad;\nimport com.pulumi.squadcast.SquadArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example test name\")\n            .build());\n\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        var exampleSquad = new Squad(\"exampleSquad\", SquadArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .memberIds(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSquad:\n    type: squadcast:Squad\n    properties:\n      teamId: ${exampleTeam.id}\n      memberIds:\n        - ${exampleUser.id}\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example test name\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:squadID\n\nUse 'Get All Teams' and 'Get All Squads' APIs to get the id of the squad and slo respectively \n\n```sh\n$ pulumi import squadcast:index/squad:Squad test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5\n```\n\n",
            "properties": {
                "memberIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User ObjectId.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Squad.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                }
            },
            "required": [
                "memberIds",
                "name",
                "teamId"
            ],
            "inputProperties": {
                "memberIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "User ObjectId.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Squad.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "memberIds",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Squad resources.\n",
                "properties": {
                    "memberIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "User ObjectId.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Squad.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/statusPage:StatusPage": {
            "description": "[Status Pages](https://www.squadcast.com/blog/status-pages-101-everything-you-need-to-know-about-status-pages) serves as a communication instrument enabling you to notify your customers regarding service interruptions and scheduled maintenance. You can create a status page for each of your services and customize it to your liking. You can also add components \u0026 groups to your status page to show the status of your services.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst team = squadcast.getTeam({\n    name: \"Default Team\",\n});\nconst user = squadcast.getUser({\n    email: \"john@example.com\",\n});\nconst testStatusPage = new squadcast.StatusPage(\"testStatusPage\", {\n    teamId: team.then(team =\u003e team.id),\n    description: \"Status Page description\",\n    isPublic: true,\n    domainName: \"test-statuspage\",\n    timezone: \"Asia/Kolkata\",\n    contactEmail: \"example@test.com\",\n    themeColor: {\n        primary: \"#000000\",\n        secondary: \"#dddddd\",\n    },\n    owner: {\n        type: \"user\",\n        id: user.then(user =\u003e user.id),\n    },\n    allowWebhookSubscription: true,\n    allowComponentsSubscription: true,\n    allowMaintenanceSubscription: true,\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nteam = squadcast.get_team(name=\"Default Team\")\nuser = squadcast.get_user(email=\"john@example.com\")\ntest_status_page = squadcast.StatusPage(\"testStatusPage\",\n    team_id=team.id,\n    description=\"Status Page description\",\n    is_public=True,\n    domain_name=\"test-statuspage\",\n    timezone=\"Asia/Kolkata\",\n    contact_email=\"example@test.com\",\n    theme_color=squadcast.StatusPageThemeColorArgs(\n        primary=\"#000000\",\n        secondary=\"#dddddd\",\n    ),\n    owner=squadcast.StatusPageOwnerArgs(\n        type=\"user\",\n        id=user.id,\n    ),\n    allow_webhook_subscription=True,\n    allow_components_subscription=True,\n    allow_maintenance_subscription=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var team = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"Default Team\",\n    });\n\n    var user = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"john@example.com\",\n    });\n\n    var testStatusPage = new Squadcast.StatusPage(\"testStatusPage\", new()\n    {\n        TeamId = team.Apply(getTeamResult =\u003e getTeamResult.Id),\n        Description = \"Status Page description\",\n        IsPublic = true,\n        DomainName = \"test-statuspage\",\n        Timezone = \"Asia/Kolkata\",\n        ContactEmail = \"example@test.com\",\n        ThemeColor = new Squadcast.Inputs.StatusPageThemeColorArgs\n        {\n            Primary = \"#000000\",\n            Secondary = \"#dddddd\",\n        },\n        Owner = new Squadcast.Inputs.StatusPageOwnerArgs\n        {\n            Type = \"user\",\n            Id = user.Apply(getUserResult =\u003e getUserResult.Id),\n        },\n        AllowWebhookSubscription = true,\n        AllowComponentsSubscription = true,\n        AllowMaintenanceSubscription = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tteam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"Default Team\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"john@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewStatusPage(ctx, \"testStatusPage\", \u0026squadcast.StatusPageArgs{\n\t\t\tTeamId:       pulumi.String(team.Id),\n\t\t\tDescription:  pulumi.String(\"Status Page description\"),\n\t\t\tIsPublic:     pulumi.Bool(true),\n\t\t\tDomainName:   pulumi.String(\"test-statuspage\"),\n\t\t\tTimezone:     pulumi.String(\"Asia/Kolkata\"),\n\t\t\tContactEmail: pulumi.String(\"example@test.com\"),\n\t\t\tThemeColor: \u0026squadcast.StatusPageThemeColorArgs{\n\t\t\t\tPrimary:   pulumi.String(\"#000000\"),\n\t\t\t\tSecondary: pulumi.String(\"#dddddd\"),\n\t\t\t},\n\t\t\tOwner: \u0026squadcast.StatusPageOwnerArgs{\n\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\tId:   pulumi.String(user.Id),\n\t\t\t},\n\t\t\tAllowWebhookSubscription:     pulumi.Bool(true),\n\t\t\tAllowComponentsSubscription:  pulumi.Bool(true),\n\t\t\tAllowMaintenanceSubscription: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.StatusPage;\nimport com.pulumi.squadcast.StatusPageArgs;\nimport com.pulumi.squadcast.inputs.StatusPageThemeColorArgs;\nimport com.pulumi.squadcast.inputs.StatusPageOwnerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var team = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"Default Team\")\n            .build());\n\n        final var user = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"john@example.com\")\n            .build());\n\n        var testStatusPage = new StatusPage(\"testStatusPage\", StatusPageArgs.builder()\n            .teamId(team.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .description(\"Status Page description\")\n            .isPublic(true)\n            .domainName(\"test-statuspage\")\n            .timezone(\"Asia/Kolkata\")\n            .contactEmail(\"example@test.com\")\n            .themeColor(StatusPageThemeColorArgs.builder()\n                .primary(\"#000000\")\n                .secondary(\"#dddddd\")\n                .build())\n            .owner(StatusPageOwnerArgs.builder()\n                .type(\"user\")\n                .id(user.applyValue(getUserResult -\u003e getUserResult.id()))\n                .build())\n            .allowWebhookSubscription(true)\n            .allowComponentsSubscription(true)\n            .allowMaintenanceSubscription(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testStatusPage:\n    type: squadcast:StatusPage\n    properties:\n      teamId: ${team.id}\n      description: Status Page description\n      isPublic: true\n      domainName: test-statuspage\n      timezone: Asia/Kolkata\n      contactEmail: example@test.com\n      themeColor:\n        primary: '#000000'\n        secondary: '#dddddd'\n      owner:\n        type: user\n        id: ${user.id}\n      allowWebhookSubscription: true\n      allowComponentsSubscription: true\n      allowMaintenanceSubscription: true\nvariables:\n  team:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: Default Team\n  user:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: john@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nstatusPageID\n\n```sh\n$ pulumi import squadcast:index/statusPage:StatusPage test_status_page 285\n```\n\n",
            "properties": {
                "allowComponentsSubscription": {
                    "type": "boolean",
                    "description": "Determines if components subscription is allowed to the status page.\n"
                },
                "allowMaintenanceSubscription": {
                    "type": "boolean",
                    "description": "Determines if maintenance subscription is allowed to the status page.\n"
                },
                "allowWebhookSubscription": {
                    "type": "boolean",
                    "description": "Determines if webhook subscription is allowed to the status page.\n"
                },
                "contactEmail": {
                    "type": "string",
                    "description": "Contact email.\n"
                },
                "customDomainName": {
                    "type": "string",
                    "description": "Custom domain name of the status page.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Status page description.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\\n\\n/ to form the URL of the status page (can only be set during creation)\n"
                },
                "hideFromSearchEngines": {
                    "type": "boolean",
                    "description": "Determines if the status page is hidden from search engines. Applicable on public status pages only.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Determines if the status page is public or not.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Status page name.\n"
                },
                "owner": {
                    "$ref": "#/types/squadcast:index/StatusPageOwner:StatusPageOwner",
                    "description": "Status page owner.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                },
                "themeColor": {
                    "$ref": "#/types/squadcast:index/StatusPageThemeColor:StatusPageThemeColor",
                    "description": "Theme color for the status page.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone for the status page.\n"
                }
            },
            "required": [
                "contactEmail",
                "domainName",
                "isPublic",
                "name",
                "owner",
                "teamId",
                "themeColor",
                "timezone"
            ],
            "inputProperties": {
                "allowComponentsSubscription": {
                    "type": "boolean",
                    "description": "Determines if components subscription is allowed to the status page.\n"
                },
                "allowMaintenanceSubscription": {
                    "type": "boolean",
                    "description": "Determines if maintenance subscription is allowed to the status page.\n"
                },
                "allowWebhookSubscription": {
                    "type": "boolean",
                    "description": "Determines if webhook subscription is allowed to the status page.\n"
                },
                "contactEmail": {
                    "type": "string",
                    "description": "Contact email.\n"
                },
                "customDomainName": {
                    "type": "string",
                    "description": "Custom domain name of the status page.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Status page description.\n"
                },
                "domainName": {
                    "type": "string",
                    "description": "Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\\n\\n/ to form the URL of the status page (can only be set during creation)\n"
                },
                "hideFromSearchEngines": {
                    "type": "boolean",
                    "description": "Determines if the status page is hidden from search engines. Applicable on public status pages only.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Determines if the status page is public or not.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Status page name.\n"
                },
                "owner": {
                    "$ref": "#/types/squadcast:index/StatusPageOwner:StatusPageOwner",
                    "description": "Status page owner.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                },
                "themeColor": {
                    "$ref": "#/types/squadcast:index/StatusPageThemeColor:StatusPageThemeColor",
                    "description": "Theme color for the status page.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone for the status page.\n"
                }
            },
            "requiredInputs": [
                "contactEmail",
                "domainName",
                "isPublic",
                "owner",
                "teamId",
                "themeColor",
                "timezone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StatusPage resources.\n",
                "properties": {
                    "allowComponentsSubscription": {
                        "type": "boolean",
                        "description": "Determines if components subscription is allowed to the status page.\n"
                    },
                    "allowMaintenanceSubscription": {
                        "type": "boolean",
                        "description": "Determines if maintenance subscription is allowed to the status page.\n"
                    },
                    "allowWebhookSubscription": {
                        "type": "boolean",
                        "description": "Determines if webhook subscription is allowed to the status page.\n"
                    },
                    "contactEmail": {
                        "type": "string",
                        "description": "Contact email.\n"
                    },
                    "customDomainName": {
                        "type": "string",
                        "description": "Custom domain name of the status page.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Status page description.\n"
                    },
                    "domainName": {
                        "type": "string",
                        "description": "Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\\n\\n/ to form the URL of the status page (can only be set during creation)\n"
                    },
                    "hideFromSearchEngines": {
                        "type": "boolean",
                        "description": "Determines if the status page is hidden from search engines. Applicable on public status pages only.\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "Determines if the status page is public or not.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Status page name.\n"
                    },
                    "owner": {
                        "$ref": "#/types/squadcast:index/StatusPageOwner:StatusPageOwner",
                        "description": "Status page owner.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    },
                    "themeColor": {
                        "$ref": "#/types/squadcast:index/StatusPageThemeColor:StatusPageThemeColor",
                        "description": "Theme color for the status page.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Timezone for the status page.\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/statusPageComponent:StatusPageComponent": {
            "description": "Status page component defines a component that represents a specific element within a status page. This resource enables you to configure various attributes of the component, and optionally associate it with a group on the status page.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst team = squadcast.getTeam({\n    name: \"Default Team\",\n});\nconst user = squadcast.getUser({\n    email: \"john@example.com\",\n});\nconst testStatusPage = new squadcast.StatusPage(\"testStatusPage\", {\n    teamId: team.then(team =\u003e team.id),\n    description: \"Status Page description\",\n    isPublic: true,\n    domainName: \"test-statuspage\",\n    timezone: \"Asia/Kolkata\",\n    contactEmail: \"example@test.com\",\n    themeColor: {\n        primary: \"#000000\",\n        secondary: \"#dddddd\",\n    },\n    owner: {\n        type: \"user\",\n        id: user.then(user =\u003e user.id),\n    },\n});\nconst exampleGroup = new squadcast.StatusPageGroup(\"exampleGroup\", {statusPageId: testStatusPage.id});\nconst exampleComponent = new squadcast.StatusPageComponent(\"exampleComponent\", {\n    statusPageId: testStatusPage.id,\n    description: \"Component 1 description\",\n    groupId: exampleGroup.id,\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nteam = squadcast.get_team(name=\"Default Team\")\nuser = squadcast.get_user(email=\"john@example.com\")\ntest_status_page = squadcast.StatusPage(\"testStatusPage\",\n    team_id=team.id,\n    description=\"Status Page description\",\n    is_public=True,\n    domain_name=\"test-statuspage\",\n    timezone=\"Asia/Kolkata\",\n    contact_email=\"example@test.com\",\n    theme_color=squadcast.StatusPageThemeColorArgs(\n        primary=\"#000000\",\n        secondary=\"#dddddd\",\n    ),\n    owner=squadcast.StatusPageOwnerArgs(\n        type=\"user\",\n        id=user.id,\n    ))\nexample_group = squadcast.StatusPageGroup(\"exampleGroup\", status_page_id=test_status_page.id)\nexample_component = squadcast.StatusPageComponent(\"exampleComponent\",\n    status_page_id=test_status_page.id,\n    description=\"Component 1 description\",\n    group_id=example_group.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var team = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"Default Team\",\n    });\n\n    var user = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"john@example.com\",\n    });\n\n    var testStatusPage = new Squadcast.StatusPage(\"testStatusPage\", new()\n    {\n        TeamId = team.Apply(getTeamResult =\u003e getTeamResult.Id),\n        Description = \"Status Page description\",\n        IsPublic = true,\n        DomainName = \"test-statuspage\",\n        Timezone = \"Asia/Kolkata\",\n        ContactEmail = \"example@test.com\",\n        ThemeColor = new Squadcast.Inputs.StatusPageThemeColorArgs\n        {\n            Primary = \"#000000\",\n            Secondary = \"#dddddd\",\n        },\n        Owner = new Squadcast.Inputs.StatusPageOwnerArgs\n        {\n            Type = \"user\",\n            Id = user.Apply(getUserResult =\u003e getUserResult.Id),\n        },\n    });\n\n    var exampleGroup = new Squadcast.StatusPageGroup(\"exampleGroup\", new()\n    {\n        StatusPageId = testStatusPage.Id,\n    });\n\n    var exampleComponent = new Squadcast.StatusPageComponent(\"exampleComponent\", new()\n    {\n        StatusPageId = testStatusPage.Id,\n        Description = \"Component 1 description\",\n        GroupId = exampleGroup.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tteam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"Default Team\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"john@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestStatusPage, err := squadcast.NewStatusPage(ctx, \"testStatusPage\", \u0026squadcast.StatusPageArgs{\n\t\t\tTeamId:       pulumi.String(team.Id),\n\t\t\tDescription:  pulumi.String(\"Status Page description\"),\n\t\t\tIsPublic:     pulumi.Bool(true),\n\t\t\tDomainName:   pulumi.String(\"test-statuspage\"),\n\t\t\tTimezone:     pulumi.String(\"Asia/Kolkata\"),\n\t\t\tContactEmail: pulumi.String(\"example@test.com\"),\n\t\t\tThemeColor: \u0026squadcast.StatusPageThemeColorArgs{\n\t\t\t\tPrimary:   pulumi.String(\"#000000\"),\n\t\t\t\tSecondary: pulumi.String(\"#dddddd\"),\n\t\t\t},\n\t\t\tOwner: \u0026squadcast.StatusPageOwnerArgs{\n\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\tId:   pulumi.String(user.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGroup, err := squadcast.NewStatusPageGroup(ctx, \"exampleGroup\", \u0026squadcast.StatusPageGroupArgs{\n\t\t\tStatusPageId: testStatusPage.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewStatusPageComponent(ctx, \"exampleComponent\", \u0026squadcast.StatusPageComponentArgs{\n\t\t\tStatusPageId: testStatusPage.ID(),\n\t\t\tDescription:  pulumi.String(\"Component 1 description\"),\n\t\t\tGroupId:      exampleGroup.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.StatusPage;\nimport com.pulumi.squadcast.StatusPageArgs;\nimport com.pulumi.squadcast.inputs.StatusPageThemeColorArgs;\nimport com.pulumi.squadcast.inputs.StatusPageOwnerArgs;\nimport com.pulumi.squadcast.StatusPageGroup;\nimport com.pulumi.squadcast.StatusPageGroupArgs;\nimport com.pulumi.squadcast.StatusPageComponent;\nimport com.pulumi.squadcast.StatusPageComponentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var team = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"Default Team\")\n            .build());\n\n        final var user = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"john@example.com\")\n            .build());\n\n        var testStatusPage = new StatusPage(\"testStatusPage\", StatusPageArgs.builder()\n            .teamId(team.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .description(\"Status Page description\")\n            .isPublic(true)\n            .domainName(\"test-statuspage\")\n            .timezone(\"Asia/Kolkata\")\n            .contactEmail(\"example@test.com\")\n            .themeColor(StatusPageThemeColorArgs.builder()\n                .primary(\"#000000\")\n                .secondary(\"#dddddd\")\n                .build())\n            .owner(StatusPageOwnerArgs.builder()\n                .type(\"user\")\n                .id(user.applyValue(getUserResult -\u003e getUserResult.id()))\n                .build())\n            .build());\n\n        var exampleGroup = new StatusPageGroup(\"exampleGroup\", StatusPageGroupArgs.builder()\n            .statusPageId(testStatusPage.id())\n            .build());\n\n        var exampleComponent = new StatusPageComponent(\"exampleComponent\", StatusPageComponentArgs.builder()\n            .statusPageId(testStatusPage.id())\n            .description(\"Component 1 description\")\n            .groupId(exampleGroup.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testStatusPage:\n    type: squadcast:StatusPage\n    properties:\n      teamId: ${team.id}\n      description: Status Page description\n      isPublic: true\n      domainName: test-statuspage\n      timezone: Asia/Kolkata\n      contactEmail: example@test.com\n      themeColor:\n        primary: '#000000'\n        secondary: '#dddddd'\n      owner:\n        type: user\n        id: ${user.id}\n  exampleGroup:\n    type: squadcast:StatusPageGroup\n    properties:\n      statusPageId: ${testStatusPage.id}\n  exampleComponent:\n    type: squadcast:StatusPageComponent\n    properties:\n      statusPageId: ${testStatusPage.id}\n      description: Component 1 description\n      groupId: ${exampleGroup.id}\nvariables:\n  team:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: Default Team\n  user:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: john@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nstatusPageID:componentID\n\n```sh\n$ pulumi import squadcast:index/statusPageComponent:StatusPageComponent test_component 300:573\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the status page component.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "Id of the group to which this component belongs to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the status page component.\n"
                },
                "statusPageId": {
                    "type": "string",
                    "description": "Id of the status page to which this component belongs to.\n"
                }
            },
            "required": [
                "name",
                "statusPageId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the status page component.\n"
                },
                "groupId": {
                    "type": "string",
                    "description": "Id of the group to which this component belongs to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the status page component.\n"
                },
                "statusPageId": {
                    "type": "string",
                    "description": "Id of the status page to which this component belongs to.\n"
                }
            },
            "requiredInputs": [
                "statusPageId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StatusPageComponent resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the status page component.\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "Id of the group to which this component belongs to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the status page component.\n"
                    },
                    "statusPageId": {
                        "type": "string",
                        "description": "Id of the status page to which this component belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/statusPageGroup:StatusPageGroup": {
            "description": "Status page group is a collection of components. You can add multiple components to a group and show the status of the group on your status page. You can also add multiple groups and show the status of each group on your status page.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst team = squadcast.getTeam({\n    name: \"Default Team\",\n});\nconst user = squadcast.getUser({\n    email: \"john@example.com\",\n});\nconst testStatusPage = new squadcast.StatusPage(\"testStatusPage\", {\n    teamId: team.then(team =\u003e team.id),\n    description: \"Status Page description\",\n    isPublic: true,\n    domainName: \"test-statuspage\",\n    timezone: \"Asia/Kolkata\",\n    contactEmail: \"example@test.com\",\n    themeColor: {\n        primary: \"#000000\",\n        secondary: \"#dddddd\",\n    },\n    owner: {\n        type: \"user\",\n        id: user.then(user =\u003e user.id),\n    },\n});\nconst exampleGroup = new squadcast.StatusPageGroup(\"exampleGroup\", {statusPageId: testStatusPage.id});\nconst exampleComponent = new squadcast.StatusPageComponent(\"exampleComponent\", {\n    statusPageId: testStatusPage.id,\n    description: \"Component 1 description\",\n    groupId: exampleGroup.id,\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nteam = squadcast.get_team(name=\"Default Team\")\nuser = squadcast.get_user(email=\"john@example.com\")\ntest_status_page = squadcast.StatusPage(\"testStatusPage\",\n    team_id=team.id,\n    description=\"Status Page description\",\n    is_public=True,\n    domain_name=\"test-statuspage\",\n    timezone=\"Asia/Kolkata\",\n    contact_email=\"example@test.com\",\n    theme_color=squadcast.StatusPageThemeColorArgs(\n        primary=\"#000000\",\n        secondary=\"#dddddd\",\n    ),\n    owner=squadcast.StatusPageOwnerArgs(\n        type=\"user\",\n        id=user.id,\n    ))\nexample_group = squadcast.StatusPageGroup(\"exampleGroup\", status_page_id=test_status_page.id)\nexample_component = squadcast.StatusPageComponent(\"exampleComponent\",\n    status_page_id=test_status_page.id,\n    description=\"Component 1 description\",\n    group_id=example_group.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var team = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"Default Team\",\n    });\n\n    var user = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"john@example.com\",\n    });\n\n    var testStatusPage = new Squadcast.StatusPage(\"testStatusPage\", new()\n    {\n        TeamId = team.Apply(getTeamResult =\u003e getTeamResult.Id),\n        Description = \"Status Page description\",\n        IsPublic = true,\n        DomainName = \"test-statuspage\",\n        Timezone = \"Asia/Kolkata\",\n        ContactEmail = \"example@test.com\",\n        ThemeColor = new Squadcast.Inputs.StatusPageThemeColorArgs\n        {\n            Primary = \"#000000\",\n            Secondary = \"#dddddd\",\n        },\n        Owner = new Squadcast.Inputs.StatusPageOwnerArgs\n        {\n            Type = \"user\",\n            Id = user.Apply(getUserResult =\u003e getUserResult.Id),\n        },\n    });\n\n    var exampleGroup = new Squadcast.StatusPageGroup(\"exampleGroup\", new()\n    {\n        StatusPageId = testStatusPage.Id,\n    });\n\n    var exampleComponent = new Squadcast.StatusPageComponent(\"exampleComponent\", new()\n    {\n        StatusPageId = testStatusPage.Id,\n        Description = \"Component 1 description\",\n        GroupId = exampleGroup.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tteam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"Default Team\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"john@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestStatusPage, err := squadcast.NewStatusPage(ctx, \"testStatusPage\", \u0026squadcast.StatusPageArgs{\n\t\t\tTeamId:       pulumi.String(team.Id),\n\t\t\tDescription:  pulumi.String(\"Status Page description\"),\n\t\t\tIsPublic:     pulumi.Bool(true),\n\t\t\tDomainName:   pulumi.String(\"test-statuspage\"),\n\t\t\tTimezone:     pulumi.String(\"Asia/Kolkata\"),\n\t\t\tContactEmail: pulumi.String(\"example@test.com\"),\n\t\t\tThemeColor: \u0026squadcast.StatusPageThemeColorArgs{\n\t\t\t\tPrimary:   pulumi.String(\"#000000\"),\n\t\t\t\tSecondary: pulumi.String(\"#dddddd\"),\n\t\t\t},\n\t\t\tOwner: \u0026squadcast.StatusPageOwnerArgs{\n\t\t\t\tType: pulumi.String(\"user\"),\n\t\t\t\tId:   pulumi.String(user.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGroup, err := squadcast.NewStatusPageGroup(ctx, \"exampleGroup\", \u0026squadcast.StatusPageGroupArgs{\n\t\t\tStatusPageId: testStatusPage.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewStatusPageComponent(ctx, \"exampleComponent\", \u0026squadcast.StatusPageComponentArgs{\n\t\t\tStatusPageId: testStatusPage.ID(),\n\t\t\tDescription:  pulumi.String(\"Component 1 description\"),\n\t\t\tGroupId:      exampleGroup.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.StatusPage;\nimport com.pulumi.squadcast.StatusPageArgs;\nimport com.pulumi.squadcast.inputs.StatusPageThemeColorArgs;\nimport com.pulumi.squadcast.inputs.StatusPageOwnerArgs;\nimport com.pulumi.squadcast.StatusPageGroup;\nimport com.pulumi.squadcast.StatusPageGroupArgs;\nimport com.pulumi.squadcast.StatusPageComponent;\nimport com.pulumi.squadcast.StatusPageComponentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var team = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"Default Team\")\n            .build());\n\n        final var user = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"john@example.com\")\n            .build());\n\n        var testStatusPage = new StatusPage(\"testStatusPage\", StatusPageArgs.builder()\n            .teamId(team.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .description(\"Status Page description\")\n            .isPublic(true)\n            .domainName(\"test-statuspage\")\n            .timezone(\"Asia/Kolkata\")\n            .contactEmail(\"example@test.com\")\n            .themeColor(StatusPageThemeColorArgs.builder()\n                .primary(\"#000000\")\n                .secondary(\"#dddddd\")\n                .build())\n            .owner(StatusPageOwnerArgs.builder()\n                .type(\"user\")\n                .id(user.applyValue(getUserResult -\u003e getUserResult.id()))\n                .build())\n            .build());\n\n        var exampleGroup = new StatusPageGroup(\"exampleGroup\", StatusPageGroupArgs.builder()\n            .statusPageId(testStatusPage.id())\n            .build());\n\n        var exampleComponent = new StatusPageComponent(\"exampleComponent\", StatusPageComponentArgs.builder()\n            .statusPageId(testStatusPage.id())\n            .description(\"Component 1 description\")\n            .groupId(exampleGroup.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testStatusPage:\n    type: squadcast:StatusPage\n    properties:\n      teamId: ${team.id}\n      description: Status Page description\n      isPublic: true\n      domainName: test-statuspage\n      timezone: Asia/Kolkata\n      contactEmail: example@test.com\n      themeColor:\n        primary: '#000000'\n        secondary: '#dddddd'\n      owner:\n        type: user\n        id: ${user.id}\n  exampleGroup:\n    type: squadcast:StatusPageGroup\n    properties:\n      statusPageId: ${testStatusPage.id}\n  exampleComponent:\n    type: squadcast:StatusPageComponent\n    properties:\n      statusPageId: ${testStatusPage.id}\n      description: Component 1 description\n      groupId: ${exampleGroup.id}\nvariables:\n  team:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: Default Team\n  user:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: john@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nstatusPageID:groupID\n\n```sh\n$ pulumi import squadcast:index/statusPageGroup:StatusPageGroup test_group 300:246\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the status page group.\n"
                },
                "statusPageId": {
                    "type": "string",
                    "description": "Id of the status page to which this group belongs to.\n"
                }
            },
            "required": [
                "name",
                "statusPageId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the status page group.\n"
                },
                "statusPageId": {
                    "type": "string",
                    "description": "Id of the status page to which this group belongs to.\n"
                }
            },
            "requiredInputs": [
                "statusPageId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StatusPageGroup resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the status page group.\n"
                    },
                    "statusPageId": {
                        "type": "string",
                        "description": "Id of the status page to which this group belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/suppressionRuleV2:SuppressionRuleV2": {
            "description": "[Suppression rules](https://support.squadcast.com/docs/alert-suppression) can help you avoid alert fatigue by suppressing notifications for non-actionable alerts.Squadcast will suppress the incidents that match any of the Suppression Rules you create for your Services. These incidents will go into the Suppressed state and you will not get any notifications for them\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"exammple team name\",\n});\nconst exampleService = exampleTeam.then(exampleTeam =\u003e squadcast.getService({\n    name: \"example service name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleBasicSuppressionRules = new squadcast.SuppressionRuleV2(\"exampleBasicSuppressionRules\", {\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    isBasic: true,\n    description: \"sample basic expression\",\n    basicExpressions: [{\n        lhs: \"abc\",\n        op: \"is\",\n        rhs: \"xyz\",\n    }],\n});\nconst exampleSuppressionRules = new squadcast.SuppressionRuleV2(\"exampleSuppressionRules\", {\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    isBasic: false,\n    description: \"not basic\",\n    expression: \"payload[\\\"event_id\\\"] == 40\",\n});\nconst exampleTimeBasedSuppressionRules = new squadcast.SuppressionRuleV2(\"exampleTimeBasedSuppressionRules\", {\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    isBasic: false,\n    description: \"not basic\",\n    expression: \"payload[\\\"event_id\\\"] == 40\",\n    timeslots: [{\n        timeZone: \"Asia/Calcutta\",\n        startTime: \"2022-04-08T06:22:14.975Z\",\n        endTime: \"2022-04-28T06:22:14.975Z\",\n        endsOn: \"2022-04-28T06:22:14.975Z\",\n        repetition: \"none\",\n        isAllday: false,\n        endsNever: true,\n    }],\n});\nconst exampleTimeBasedSuppressionRulesCustomRepetition = new squadcast.SuppressionRuleV2(\"exampleTimeBasedSuppressionRulesCustomRepetition\", {\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    isBasic: false,\n    description: \"not basic\",\n    expression: \"payload[\\\"event_id\\\"] == 40\",\n    timeslots: [\n        {\n            timeZone: \"Asia/Calcutta\",\n            startTime: \"2022-04-08T06:22:14.975Z\",\n            endTime: \"2022-04-28T06:22:14.975Z\",\n            endsOn: \"2022-04-28T06:22:14.975Z\",\n            repetition: \"custom\",\n            isAllday: false,\n            endsNever: true,\n            customs: [{\n                repeats: \"day\",\n                repeatsCount: 2,\n            }],\n        },\n        {\n            timeZone: \"Asia/Calcutta\",\n            startTime: \"2022-04-08T06:22:14.975Z\",\n            endTime: \"2022-04-28T06:22:14.975Z\",\n            endsOn: \"2022-04-28T06:22:14.975Z\",\n            repetition: \"custom\",\n            isAllday: false,\n            endsNever: true,\n            customs: [{\n                repeats: \"week\",\n                repeatsCount: 4,\n                repeatsOnWeekdays: [\n                    0,\n                    1,\n                    2,\n                    3,\n                ],\n            }],\n        },\n        {\n            timeZone: \"Asia/Calcutta\",\n            startTime: \"2022-04-08T06:22:14.975Z\",\n            endTime: \"2022-04-28T06:22:14.975Z\",\n            endsOn: \"2022-04-28T06:22:14.975Z\",\n            repetition: \"custom\",\n            isAllday: false,\n            endsNever: true,\n            customs: [{\n                repeats: \"month\",\n                repeatsCount: 6,\n            }],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"exammple team name\")\nexample_service = squadcast.get_service(name=\"example service name\",\n    team_id=example_team.id)\nexample_basic_suppression_rules = squadcast.SuppressionRuleV2(\"exampleBasicSuppressionRules\",\n    service_id=example_service.id,\n    is_basic=True,\n    description=\"sample basic expression\",\n    basic_expressions=[squadcast.SuppressionRuleV2BasicExpressionArgs(\n        lhs=\"abc\",\n        op=\"is\",\n        rhs=\"xyz\",\n    )])\nexample_suppression_rules = squadcast.SuppressionRuleV2(\"exampleSuppressionRules\",\n    service_id=example_service.id,\n    is_basic=False,\n    description=\"not basic\",\n    expression=\"payload[\\\"event_id\\\"] == 40\")\nexample_time_based_suppression_rules = squadcast.SuppressionRuleV2(\"exampleTimeBasedSuppressionRules\",\n    service_id=example_service.id,\n    is_basic=False,\n    description=\"not basic\",\n    expression=\"payload[\\\"event_id\\\"] == 40\",\n    timeslots=[squadcast.SuppressionRuleV2TimeslotArgs(\n        time_zone=\"Asia/Calcutta\",\n        start_time=\"2022-04-08T06:22:14.975Z\",\n        end_time=\"2022-04-28T06:22:14.975Z\",\n        ends_on=\"2022-04-28T06:22:14.975Z\",\n        repetition=\"none\",\n        is_allday=False,\n        ends_never=True,\n    )])\nexample_time_based_suppression_rules_custom_repetition = squadcast.SuppressionRuleV2(\"exampleTimeBasedSuppressionRulesCustomRepetition\",\n    service_id=example_service.id,\n    is_basic=False,\n    description=\"not basic\",\n    expression=\"payload[\\\"event_id\\\"] == 40\",\n    timeslots=[\n        squadcast.SuppressionRuleV2TimeslotArgs(\n            time_zone=\"Asia/Calcutta\",\n            start_time=\"2022-04-08T06:22:14.975Z\",\n            end_time=\"2022-04-28T06:22:14.975Z\",\n            ends_on=\"2022-04-28T06:22:14.975Z\",\n            repetition=\"custom\",\n            is_allday=False,\n            ends_never=True,\n            customs=[squadcast.SuppressionRuleV2TimeslotCustomArgs(\n                repeats=\"day\",\n                repeats_count=2,\n            )],\n        ),\n        squadcast.SuppressionRuleV2TimeslotArgs(\n            time_zone=\"Asia/Calcutta\",\n            start_time=\"2022-04-08T06:22:14.975Z\",\n            end_time=\"2022-04-28T06:22:14.975Z\",\n            ends_on=\"2022-04-28T06:22:14.975Z\",\n            repetition=\"custom\",\n            is_allday=False,\n            ends_never=True,\n            customs=[squadcast.SuppressionRuleV2TimeslotCustomArgs(\n                repeats=\"week\",\n                repeats_count=4,\n                repeats_on_weekdays=[\n                    0,\n                    1,\n                    2,\n                    3,\n                ],\n            )],\n        ),\n        squadcast.SuppressionRuleV2TimeslotArgs(\n            time_zone=\"Asia/Calcutta\",\n            start_time=\"2022-04-08T06:22:14.975Z\",\n            end_time=\"2022-04-28T06:22:14.975Z\",\n            ends_on=\"2022-04-28T06:22:14.975Z\",\n            repetition=\"custom\",\n            is_allday=False,\n            ends_never=True,\n            customs=[squadcast.SuppressionRuleV2TimeslotCustomArgs(\n                repeats=\"month\",\n                repeats_count=6,\n            )],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"exammple team name\",\n    });\n\n    var exampleService = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"example service name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleBasicSuppressionRules = new Squadcast.SuppressionRuleV2(\"exampleBasicSuppressionRules\", new()\n    {\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        IsBasic = true,\n        Description = \"sample basic expression\",\n        BasicExpressions = new[]\n        {\n            new Squadcast.Inputs.SuppressionRuleV2BasicExpressionArgs\n            {\n                Lhs = \"abc\",\n                Op = \"is\",\n                Rhs = \"xyz\",\n            },\n        },\n    });\n\n    var exampleSuppressionRules = new Squadcast.SuppressionRuleV2(\"exampleSuppressionRules\", new()\n    {\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        IsBasic = false,\n        Description = \"not basic\",\n        Expression = \"payload[\\\"event_id\\\"] == 40\",\n    });\n\n    var exampleTimeBasedSuppressionRules = new Squadcast.SuppressionRuleV2(\"exampleTimeBasedSuppressionRules\", new()\n    {\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        IsBasic = false,\n        Description = \"not basic\",\n        Expression = \"payload[\\\"event_id\\\"] == 40\",\n        Timeslots = new[]\n        {\n            new Squadcast.Inputs.SuppressionRuleV2TimeslotArgs\n            {\n                TimeZone = \"Asia/Calcutta\",\n                StartTime = \"2022-04-08T06:22:14.975Z\",\n                EndTime = \"2022-04-28T06:22:14.975Z\",\n                EndsOn = \"2022-04-28T06:22:14.975Z\",\n                Repetition = \"none\",\n                IsAllday = false,\n                EndsNever = true,\n            },\n        },\n    });\n\n    var exampleTimeBasedSuppressionRulesCustomRepetition = new Squadcast.SuppressionRuleV2(\"exampleTimeBasedSuppressionRulesCustomRepetition\", new()\n    {\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        IsBasic = false,\n        Description = \"not basic\",\n        Expression = \"payload[\\\"event_id\\\"] == 40\",\n        Timeslots = new[]\n        {\n            new Squadcast.Inputs.SuppressionRuleV2TimeslotArgs\n            {\n                TimeZone = \"Asia/Calcutta\",\n                StartTime = \"2022-04-08T06:22:14.975Z\",\n                EndTime = \"2022-04-28T06:22:14.975Z\",\n                EndsOn = \"2022-04-28T06:22:14.975Z\",\n                Repetition = \"custom\",\n                IsAllday = false,\n                EndsNever = true,\n                Customs = new[]\n                {\n                    new Squadcast.Inputs.SuppressionRuleV2TimeslotCustomArgs\n                    {\n                        Repeats = \"day\",\n                        RepeatsCount = 2,\n                    },\n                },\n            },\n            new Squadcast.Inputs.SuppressionRuleV2TimeslotArgs\n            {\n                TimeZone = \"Asia/Calcutta\",\n                StartTime = \"2022-04-08T06:22:14.975Z\",\n                EndTime = \"2022-04-28T06:22:14.975Z\",\n                EndsOn = \"2022-04-28T06:22:14.975Z\",\n                Repetition = \"custom\",\n                IsAllday = false,\n                EndsNever = true,\n                Customs = new[]\n                {\n                    new Squadcast.Inputs.SuppressionRuleV2TimeslotCustomArgs\n                    {\n                        Repeats = \"week\",\n                        RepeatsCount = 4,\n                        RepeatsOnWeekdays = new[]\n                        {\n                            0,\n                            1,\n                            2,\n                            3,\n                        },\n                    },\n                },\n            },\n            new Squadcast.Inputs.SuppressionRuleV2TimeslotArgs\n            {\n                TimeZone = \"Asia/Calcutta\",\n                StartTime = \"2022-04-08T06:22:14.975Z\",\n                EndTime = \"2022-04-28T06:22:14.975Z\",\n                EndsOn = \"2022-04-28T06:22:14.975Z\",\n                Repetition = \"custom\",\n                IsAllday = false,\n                EndsNever = true,\n                Customs = new[]\n                {\n                    new Squadcast.Inputs.SuppressionRuleV2TimeslotCustomArgs\n                    {\n                        Repeats = \"month\",\n                        RepeatsCount = 6,\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"exammple team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"example service name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewSuppressionRuleV2(ctx, \"exampleBasicSuppressionRules\", \u0026squadcast.SuppressionRuleV2Args{\n\t\t\tServiceId:   pulumi.String(exampleService.Id),\n\t\t\tIsBasic:     pulumi.Bool(true),\n\t\t\tDescription: pulumi.String(\"sample basic expression\"),\n\t\t\tBasicExpressions: squadcast.SuppressionRuleV2BasicExpressionArray{\n\t\t\t\t\u0026squadcast.SuppressionRuleV2BasicExpressionArgs{\n\t\t\t\t\tLhs: pulumi.String(\"abc\"),\n\t\t\t\t\tOp:  pulumi.String(\"is\"),\n\t\t\t\t\tRhs: pulumi.String(\"xyz\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewSuppressionRuleV2(ctx, \"exampleSuppressionRules\", \u0026squadcast.SuppressionRuleV2Args{\n\t\t\tServiceId:   pulumi.String(exampleService.Id),\n\t\t\tIsBasic:     pulumi.Bool(false),\n\t\t\tDescription: pulumi.String(\"not basic\"),\n\t\t\tExpression:  pulumi.String(\"payload[\\\"event_id\\\"] == 40\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewSuppressionRuleV2(ctx, \"exampleTimeBasedSuppressionRules\", \u0026squadcast.SuppressionRuleV2Args{\n\t\t\tServiceId:   pulumi.String(exampleService.Id),\n\t\t\tIsBasic:     pulumi.Bool(false),\n\t\t\tDescription: pulumi.String(\"not basic\"),\n\t\t\tExpression:  pulumi.String(\"payload[\\\"event_id\\\"] == 40\"),\n\t\t\tTimeslots: squadcast.SuppressionRuleV2TimeslotArray{\n\t\t\t\t\u0026squadcast.SuppressionRuleV2TimeslotArgs{\n\t\t\t\t\tTimeZone:   pulumi.String(\"Asia/Calcutta\"),\n\t\t\t\t\tStartTime:  pulumi.String(\"2022-04-08T06:22:14.975Z\"),\n\t\t\t\t\tEndTime:    pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\tEndsOn:     pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\tRepetition: pulumi.String(\"none\"),\n\t\t\t\t\tIsAllday:   pulumi.Bool(false),\n\t\t\t\t\tEndsNever:  pulumi.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewSuppressionRuleV2(ctx, \"exampleTimeBasedSuppressionRulesCustomRepetition\", \u0026squadcast.SuppressionRuleV2Args{\n\t\t\tServiceId:   pulumi.String(exampleService.Id),\n\t\t\tIsBasic:     pulumi.Bool(false),\n\t\t\tDescription: pulumi.String(\"not basic\"),\n\t\t\tExpression:  pulumi.String(\"payload[\\\"event_id\\\"] == 40\"),\n\t\t\tTimeslots: squadcast.SuppressionRuleV2TimeslotArray{\n\t\t\t\t\u0026squadcast.SuppressionRuleV2TimeslotArgs{\n\t\t\t\t\tTimeZone:   pulumi.String(\"Asia/Calcutta\"),\n\t\t\t\t\tStartTime:  pulumi.String(\"2022-04-08T06:22:14.975Z\"),\n\t\t\t\t\tEndTime:    pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\tEndsOn:     pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\tRepetition: pulumi.String(\"custom\"),\n\t\t\t\t\tIsAllday:   pulumi.Bool(false),\n\t\t\t\t\tEndsNever:  pulumi.Bool(true),\n\t\t\t\t\tCustoms: squadcast.SuppressionRuleV2TimeslotCustomArray{\n\t\t\t\t\t\t\u0026squadcast.SuppressionRuleV2TimeslotCustomArgs{\n\t\t\t\t\t\t\tRepeats:      pulumi.String(\"day\"),\n\t\t\t\t\t\t\tRepeatsCount: pulumi.Int(2),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026squadcast.SuppressionRuleV2TimeslotArgs{\n\t\t\t\t\tTimeZone:   pulumi.String(\"Asia/Calcutta\"),\n\t\t\t\t\tStartTime:  pulumi.String(\"2022-04-08T06:22:14.975Z\"),\n\t\t\t\t\tEndTime:    pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\tEndsOn:     pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\tRepetition: pulumi.String(\"custom\"),\n\t\t\t\t\tIsAllday:   pulumi.Bool(false),\n\t\t\t\t\tEndsNever:  pulumi.Bool(true),\n\t\t\t\t\tCustoms: squadcast.SuppressionRuleV2TimeslotCustomArray{\n\t\t\t\t\t\t\u0026squadcast.SuppressionRuleV2TimeslotCustomArgs{\n\t\t\t\t\t\t\tRepeats:      pulumi.String(\"week\"),\n\t\t\t\t\t\t\tRepeatsCount: pulumi.Int(4),\n\t\t\t\t\t\t\tRepeatsOnWeekdays: pulumi.IntArray{\n\t\t\t\t\t\t\t\tpulumi.Int(0),\n\t\t\t\t\t\t\t\tpulumi.Int(1),\n\t\t\t\t\t\t\t\tpulumi.Int(2),\n\t\t\t\t\t\t\t\tpulumi.Int(3),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026squadcast.SuppressionRuleV2TimeslotArgs{\n\t\t\t\t\tTimeZone:   pulumi.String(\"Asia/Calcutta\"),\n\t\t\t\t\tStartTime:  pulumi.String(\"2022-04-08T06:22:14.975Z\"),\n\t\t\t\t\tEndTime:    pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\tEndsOn:     pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\tRepetition: pulumi.String(\"custom\"),\n\t\t\t\t\tIsAllday:   pulumi.Bool(false),\n\t\t\t\t\tEndsNever:  pulumi.Bool(true),\n\t\t\t\t\tCustoms: squadcast.SuppressionRuleV2TimeslotCustomArray{\n\t\t\t\t\t\t\u0026squadcast.SuppressionRuleV2TimeslotCustomArgs{\n\t\t\t\t\t\t\tRepeats:      pulumi.String(\"month\"),\n\t\t\t\t\t\t\tRepeatsCount: pulumi.Int(6),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.SuppressionRuleV2;\nimport com.pulumi.squadcast.SuppressionRuleV2Args;\nimport com.pulumi.squadcast.inputs.SuppressionRuleV2BasicExpressionArgs;\nimport com.pulumi.squadcast.inputs.SuppressionRuleV2TimeslotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"exammple team name\")\n            .build());\n\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"example service name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleBasicSuppressionRules = new SuppressionRuleV2(\"exampleBasicSuppressionRules\", SuppressionRuleV2Args.builder()\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .isBasic(true)\n            .description(\"sample basic expression\")\n            .basicExpressions(SuppressionRuleV2BasicExpressionArgs.builder()\n                .lhs(\"abc\")\n                .op(\"is\")\n                .rhs(\"xyz\")\n                .build())\n            .build());\n\n        var exampleSuppressionRules = new SuppressionRuleV2(\"exampleSuppressionRules\", SuppressionRuleV2Args.builder()\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .isBasic(false)\n            .description(\"not basic\")\n            .expression(\"payload[\\\"event_id\\\"] == 40\")\n            .build());\n\n        var exampleTimeBasedSuppressionRules = new SuppressionRuleV2(\"exampleTimeBasedSuppressionRules\", SuppressionRuleV2Args.builder()\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .isBasic(false)\n            .description(\"not basic\")\n            .expression(\"payload[\\\"event_id\\\"] == 40\")\n            .timeslots(SuppressionRuleV2TimeslotArgs.builder()\n                .timeZone(\"Asia/Calcutta\")\n                .startTime(\"2022-04-08T06:22:14.975Z\")\n                .endTime(\"2022-04-28T06:22:14.975Z\")\n                .endsOn(\"2022-04-28T06:22:14.975Z\")\n                .repetition(\"none\")\n                .isAllday(false)\n                .endsNever(true)\n                .build())\n            .build());\n\n        var exampleTimeBasedSuppressionRulesCustomRepetition = new SuppressionRuleV2(\"exampleTimeBasedSuppressionRulesCustomRepetition\", SuppressionRuleV2Args.builder()\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .isBasic(false)\n            .description(\"not basic\")\n            .expression(\"payload[\\\"event_id\\\"] == 40\")\n            .timeslots(            \n                SuppressionRuleV2TimeslotArgs.builder()\n                    .timeZone(\"Asia/Calcutta\")\n                    .startTime(\"2022-04-08T06:22:14.975Z\")\n                    .endTime(\"2022-04-28T06:22:14.975Z\")\n                    .endsOn(\"2022-04-28T06:22:14.975Z\")\n                    .repetition(\"custom\")\n                    .isAllday(false)\n                    .endsNever(true)\n                    .customs(SuppressionRuleV2TimeslotCustomArgs.builder()\n                        .repeats(\"day\")\n                        .repeatsCount(2)\n                        .build())\n                    .build(),\n                SuppressionRuleV2TimeslotArgs.builder()\n                    .timeZone(\"Asia/Calcutta\")\n                    .startTime(\"2022-04-08T06:22:14.975Z\")\n                    .endTime(\"2022-04-28T06:22:14.975Z\")\n                    .endsOn(\"2022-04-28T06:22:14.975Z\")\n                    .repetition(\"custom\")\n                    .isAllday(false)\n                    .endsNever(true)\n                    .customs(SuppressionRuleV2TimeslotCustomArgs.builder()\n                        .repeats(\"week\")\n                        .repeatsCount(4)\n                        .repeatsOnWeekdays(                        \n                            0,\n                            1,\n                            2,\n                            3)\n                        .build())\n                    .build(),\n                SuppressionRuleV2TimeslotArgs.builder()\n                    .timeZone(\"Asia/Calcutta\")\n                    .startTime(\"2022-04-08T06:22:14.975Z\")\n                    .endTime(\"2022-04-28T06:22:14.975Z\")\n                    .endsOn(\"2022-04-28T06:22:14.975Z\")\n                    .repetition(\"custom\")\n                    .isAllday(false)\n                    .endsNever(true)\n                    .customs(SuppressionRuleV2TimeslotCustomArgs.builder()\n                        .repeats(\"month\")\n                        .repeatsCount(6)\n                        .build())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleBasicSuppressionRules:\n    type: squadcast:SuppressionRuleV2\n    properties:\n      serviceId: ${exampleService.id}\n      isBasic: true\n      description: sample basic expression\n      basicExpressions:\n        - lhs: abc\n          op: is\n          rhs: xyz\n  exampleSuppressionRules:\n    type: squadcast:SuppressionRuleV2\n    properties:\n      serviceId: ${exampleService.id}\n      isBasic: false\n      description: not basic\n      expression: payload[\"event_id\"] == 40\n  exampleTimeBasedSuppressionRules:\n    type: squadcast:SuppressionRuleV2\n    properties:\n      serviceId: ${exampleService.id}\n      isBasic: false\n      description: not basic\n      expression: payload[\"event_id\"] == 40\n      timeslots:\n        - timeZone: Asia/Calcutta\n          startTime: 2022-04-08T06:22:14.975Z\n          endTime: 2022-04-28T06:22:14.975Z\n          endsOn: 2022-04-28T06:22:14.975Z\n          repetition: none\n          isAllday: false\n          endsNever: true\n  exampleTimeBasedSuppressionRulesCustomRepetition:\n    type: squadcast:SuppressionRuleV2\n    properties:\n      serviceId: ${exampleService.id}\n      isBasic: false\n      description: not basic\n      expression: payload[\"event_id\"] == 40\n      # custom repetition - daily\n      timeslots:\n        - timeZone: Asia/Calcutta\n          startTime: 2022-04-08T06:22:14.975Z\n          endTime: 2022-04-28T06:22:14.975Z\n          endsOn: 2022-04-28T06:22:14.975Z\n          repetition: custom\n          isAllday: false\n          endsNever: true\n          customs:\n            - repeats: day\n              repeatsCount: 2\n        - timeZone: Asia/Calcutta\n          startTime: 2022-04-08T06:22:14.975Z\n          endTime: 2022-04-28T06:22:14.975Z\n          endsOn: 2022-04-28T06:22:14.975Z\n          repetition: custom\n          isAllday: false\n          endsNever: true\n          customs:\n            - repeats: week\n              repeatsCount: 4\n              repeatsOnWeekdays:\n                - 0\n                - 1\n                - 2\n                - 3\n        - timeZone: Asia/Calcutta\n          startTime: 2022-04-08T06:22:14.975Z\n          endTime: 2022-04-28T06:22:14.975Z\n          endsOn: 2022-04-28T06:22:14.975Z\n          repetition: custom\n          isAllday: false\n          endsNever: true\n          customs:\n            - repeats: month\n              repeatsCount: 6\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: exammple team name\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: example service name\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nserviceID:ruleID\n\n```sh\n$ pulumi import squadcast:index/suppressionRuleV2:SuppressionRuleV2 test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5\n```\n\n",
            "properties": {
                "basicExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/SuppressionRuleV2BasicExpression:SuppressionRuleV2BasicExpression"
                    },
                    "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "description": {
                    "type": "string",
                    "description": "description.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "isBasic": {
                    "type": "boolean",
                    "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                },
                "isTimebased": {
                    "type": "boolean",
                    "description": "is_timebased will be true when users use the time based suppression rule\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n"
                },
                "timeslots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/SuppressionRuleV2Timeslot:SuppressionRuleV2Timeslot"
                    },
                    "description": "The timeslots for which this rule should be applied.\n"
                }
            },
            "required": [
                "isBasic",
                "isTimebased",
                "serviceId"
            ],
            "inputProperties": {
                "basicExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/SuppressionRuleV2BasicExpression:SuppressionRuleV2BasicExpression"
                    },
                    "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "description": {
                    "type": "string",
                    "description": "description.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "isBasic": {
                    "type": "boolean",
                    "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n",
                    "willReplaceOnChanges": true
                },
                "timeslots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/SuppressionRuleV2Timeslot:SuppressionRuleV2Timeslot"
                    },
                    "description": "The timeslots for which this rule should be applied.\n"
                }
            },
            "requiredInputs": [
                "isBasic",
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SuppressionRuleV2 resources.\n",
                "properties": {
                    "basicExpressions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/SuppressionRuleV2BasicExpression:SuppressionRuleV2BasicExpression"
                        },
                        "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "description.\n"
                    },
                    "expression": {
                        "type": "string",
                        "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                    },
                    "isBasic": {
                        "type": "boolean",
                        "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                    },
                    "isTimebased": {
                        "type": "boolean",
                        "description": "is_timebased will be true when users use the time based suppression rule\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "Service id.\n",
                        "willReplaceOnChanges": true
                    },
                    "timeslots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/SuppressionRuleV2Timeslot:SuppressionRuleV2Timeslot"
                        },
                        "description": "The timeslots for which this rule should be applied.\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/taggingRuleV2:TaggingRuleV2": {
            "description": "[Tagging](https://support.squadcast.com/docs/event-tagging) is a rule-based, auto-tagging system with which you can define customised tags based on incident payloads, that get automatically assigned to incidents when they are triggered.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleService = squadcast.getService({\n    name: \"example service name\",\n    teamId: data.squadcast_team.example_team.id,\n});\nconst exampleTaggingRule = new squadcast.TaggingRuleV2(\"exampleTaggingRule\", {\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    isBasic: false,\n    expression: \"payload[\\\"event_id\\\"] == 40\",\n    tags: [\n        {\n            key: \"MyTag\",\n            value: \"foo\",\n            color: \"#ababab\",\n        },\n        {\n            key: \"MyTag2\",\n            value: \"bar\",\n            color: \"#f0f0f0\",\n        },\n    ],\n});\nconst exampleBasicTaggingRule = new squadcast.TaggingRuleV2(\"exampleBasicTaggingRule\", {\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    isBasic: true,\n    basicExpressions: [{\n        lhs: \"payload[\\\"foo\\\"]\",\n        op: \"is\",\n        rhs: \"bar\",\n    }],\n    tags: [{\n        key: \"MyTag\",\n        value: \"foo\",\n        color: \"#ababab\",\n    }],\n});\n// addTags must be set in expression when tags are not passed\nconst exampleTaggingRulesResourceWithouttags = new squadcast.TaggingRuleV2(\"exampleTaggingRulesResourceWithouttags\", {\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    isBasic: false,\n    expression: \"addTag(\\\"EventType\\\", payload.details.event_type_key, \\\"#037916\\\")\",\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_service = squadcast.get_service(name=\"example service name\",\n    team_id=data[\"squadcast_team\"][\"example_team\"][\"id\"])\nexample_tagging_rule = squadcast.TaggingRuleV2(\"exampleTaggingRule\",\n    service_id=example_service.id,\n    is_basic=False,\n    expression=\"payload[\\\"event_id\\\"] == 40\",\n    tags=[\n        squadcast.TaggingRuleV2TagArgs(\n            key=\"MyTag\",\n            value=\"foo\",\n            color=\"#ababab\",\n        ),\n        squadcast.TaggingRuleV2TagArgs(\n            key=\"MyTag2\",\n            value=\"bar\",\n            color=\"#f0f0f0\",\n        ),\n    ])\nexample_basic_tagging_rule = squadcast.TaggingRuleV2(\"exampleBasicTaggingRule\",\n    service_id=example_service.id,\n    is_basic=True,\n    basic_expressions=[squadcast.TaggingRuleV2BasicExpressionArgs(\n        lhs=\"payload[\\\"foo\\\"]\",\n        op=\"is\",\n        rhs=\"bar\",\n    )],\n    tags=[squadcast.TaggingRuleV2TagArgs(\n        key=\"MyTag\",\n        value=\"foo\",\n        color=\"#ababab\",\n    )])\n# addTags must be set in expression when tags are not passed\nexample_tagging_rules_resource_withouttags = squadcast.TaggingRuleV2(\"exampleTaggingRulesResourceWithouttags\",\n    service_id=example_service.id,\n    is_basic=False,\n    expression=\"addTag(\\\"EventType\\\", payload.details.event_type_key, \\\"#037916\\\")\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleService = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"example service name\",\n        TeamId = data.Squadcast_team.Example_team.Id,\n    });\n\n    var exampleTaggingRule = new Squadcast.TaggingRuleV2(\"exampleTaggingRule\", new()\n    {\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        IsBasic = false,\n        Expression = \"payload[\\\"event_id\\\"] == 40\",\n        Tags = new[]\n        {\n            new Squadcast.Inputs.TaggingRuleV2TagArgs\n            {\n                Key = \"MyTag\",\n                Value = \"foo\",\n                Color = \"#ababab\",\n            },\n            new Squadcast.Inputs.TaggingRuleV2TagArgs\n            {\n                Key = \"MyTag2\",\n                Value = \"bar\",\n                Color = \"#f0f0f0\",\n            },\n        },\n    });\n\n    var exampleBasicTaggingRule = new Squadcast.TaggingRuleV2(\"exampleBasicTaggingRule\", new()\n    {\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        IsBasic = true,\n        BasicExpressions = new[]\n        {\n            new Squadcast.Inputs.TaggingRuleV2BasicExpressionArgs\n            {\n                Lhs = \"payload[\\\"foo\\\"]\",\n                Op = \"is\",\n                Rhs = \"bar\",\n            },\n        },\n        Tags = new[]\n        {\n            new Squadcast.Inputs.TaggingRuleV2TagArgs\n            {\n                Key = \"MyTag\",\n                Value = \"foo\",\n                Color = \"#ababab\",\n            },\n        },\n    });\n\n    // addTags must be set in expression when tags are not passed\n    var exampleTaggingRulesResourceWithouttags = new Squadcast.TaggingRuleV2(\"exampleTaggingRulesResourceWithouttags\", new()\n    {\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        IsBasic = false,\n        Expression = \"addTag(\\\"EventType\\\", payload.details.event_type_key, \\\"#037916\\\")\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleService, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"example service name\",\n\t\t\tTeamId: data.Squadcast_team.Example_team.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewTaggingRuleV2(ctx, \"exampleTaggingRule\", \u0026squadcast.TaggingRuleV2Args{\n\t\t\tServiceId:  pulumi.String(exampleService.Id),\n\t\t\tIsBasic:    pulumi.Bool(false),\n\t\t\tExpression: pulumi.String(\"payload[\\\"event_id\\\"] == 40\"),\n\t\t\tTags: squadcast.TaggingRuleV2TagArray{\n\t\t\t\t\u0026squadcast.TaggingRuleV2TagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"MyTag\"),\n\t\t\t\t\tValue: pulumi.String(\"foo\"),\n\t\t\t\t\tColor: pulumi.String(\"#ababab\"),\n\t\t\t\t},\n\t\t\t\t\u0026squadcast.TaggingRuleV2TagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"MyTag2\"),\n\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t\tColor: pulumi.String(\"#f0f0f0\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewTaggingRuleV2(ctx, \"exampleBasicTaggingRule\", \u0026squadcast.TaggingRuleV2Args{\n\t\t\tServiceId: pulumi.String(exampleService.Id),\n\t\t\tIsBasic:   pulumi.Bool(true),\n\t\t\tBasicExpressions: squadcast.TaggingRuleV2BasicExpressionArray{\n\t\t\t\t\u0026squadcast.TaggingRuleV2BasicExpressionArgs{\n\t\t\t\t\tLhs: pulumi.String(\"payload[\\\"foo\\\"]\"),\n\t\t\t\t\tOp:  pulumi.String(\"is\"),\n\t\t\t\t\tRhs: pulumi.String(\"bar\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTags: squadcast.TaggingRuleV2TagArray{\n\t\t\t\t\u0026squadcast.TaggingRuleV2TagArgs{\n\t\t\t\t\tKey:   pulumi.String(\"MyTag\"),\n\t\t\t\t\tValue: pulumi.String(\"foo\"),\n\t\t\t\t\tColor: pulumi.String(\"#ababab\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// addTags must be set in expression when tags are not passed\n\t\t_, err = squadcast.NewTaggingRuleV2(ctx, \"exampleTaggingRulesResourceWithouttags\", \u0026squadcast.TaggingRuleV2Args{\n\t\t\tServiceId:  pulumi.String(exampleService.Id),\n\t\t\tIsBasic:    pulumi.Bool(false),\n\t\t\tExpression: pulumi.String(\"addTag(\\\"EventType\\\", payload.details.event_type_key, \\\"#037916\\\")\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.TaggingRuleV2;\nimport com.pulumi.squadcast.TaggingRuleV2Args;\nimport com.pulumi.squadcast.inputs.TaggingRuleV2TagArgs;\nimport com.pulumi.squadcast.inputs.TaggingRuleV2BasicExpressionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"example service name\")\n            .teamId(data.squadcast_team().example_team().id())\n            .build());\n\n        var exampleTaggingRule = new TaggingRuleV2(\"exampleTaggingRule\", TaggingRuleV2Args.builder()\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .isBasic(false)\n            .expression(\"payload[\\\"event_id\\\"] == 40\")\n            .tags(            \n                TaggingRuleV2TagArgs.builder()\n                    .key(\"MyTag\")\n                    .value(\"foo\")\n                    .color(\"#ababab\")\n                    .build(),\n                TaggingRuleV2TagArgs.builder()\n                    .key(\"MyTag2\")\n                    .value(\"bar\")\n                    .color(\"#f0f0f0\")\n                    .build())\n            .build());\n\n        var exampleBasicTaggingRule = new TaggingRuleV2(\"exampleBasicTaggingRule\", TaggingRuleV2Args.builder()\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .isBasic(true)\n            .basicExpressions(TaggingRuleV2BasicExpressionArgs.builder()\n                .lhs(\"payload[\\\"foo\\\"]\")\n                .op(\"is\")\n                .rhs(\"bar\")\n                .build())\n            .tags(TaggingRuleV2TagArgs.builder()\n                .key(\"MyTag\")\n                .value(\"foo\")\n                .color(\"#ababab\")\n                .build())\n            .build());\n\n        // addTags must be set in expression when tags are not passed\n        var exampleTaggingRulesResourceWithouttags = new TaggingRuleV2(\"exampleTaggingRulesResourceWithouttags\", TaggingRuleV2Args.builder()\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .isBasic(false)\n            .expression(\"addTag(\\\"EventType\\\", payload.details.event_type_key, \\\"#037916\\\")\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleTaggingRule:\n    type: squadcast:TaggingRuleV2\n    properties:\n      serviceId: ${exampleService.id}\n      isBasic: false\n      expression: payload[\"event_id\"] == 40\n      tags:\n        - key: MyTag\n          value: foo\n          color: '#ababab'\n        - key: MyTag2\n          value: bar\n          color: '#f0f0f0'\n  exampleBasicTaggingRule:\n    type: squadcast:TaggingRuleV2\n    properties:\n      serviceId: ${exampleService.id}\n      isBasic: true\n      basicExpressions:\n        - lhs: payload[\"foo\"]\n          op: is\n          rhs: bar\n      tags:\n        - key: MyTag\n          value: foo\n          color: '#ababab'\n  # addTags must be set in expression when tags are not passed\n  exampleTaggingRulesResourceWithouttags:\n    type: squadcast:TaggingRuleV2\n    properties:\n      serviceId: ${exampleService.id}\n      isBasic: false\n      expression: addTag(\"EventType\", payload.details.event_type_key, \"#037916\")\nvariables:\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: example service name\n        teamId: ${data.squadcast_team.example_team.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nserviceID:ruleID\n\n```sh\n$ pulumi import squadcast:index/taggingRuleV2:TaggingRuleV2 test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5\n```\n\n",
            "properties": {
                "basicExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/TaggingRuleV2BasicExpression:TaggingRuleV2BasicExpression"
                    },
                    "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "isBasic": {
                    "type": "boolean",
                    "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/TaggingRuleV2Tag:TaggingRuleV2Tag"
                    },
                    "description": "The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.\n"
                }
            },
            "required": [
                "isBasic",
                "serviceId"
            ],
            "inputProperties": {
                "basicExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/TaggingRuleV2BasicExpression:TaggingRuleV2BasicExpression"
                    },
                    "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                },
                "isBasic": {
                    "type": "boolean",
                    "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/TaggingRuleV2Tag:TaggingRuleV2Tag"
                    },
                    "description": "The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.\n"
                }
            },
            "requiredInputs": [
                "isBasic",
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TaggingRuleV2 resources.\n",
                "properties": {
                    "basicExpressions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/TaggingRuleV2BasicExpression:TaggingRuleV2BasicExpression"
                        },
                        "description": "The basic expression which needs to be evaluated to be true for this rule to apply.\n"
                    },
                    "expression": {
                        "type": "string",
                        "description": "The expression which needs to be evaluated to be true for this rule to apply.\n"
                    },
                    "isBasic": {
                        "type": "boolean",
                        "description": "is_basic will be true when users use the drop down selectors which will have lhs, op \u0026 rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "Service id.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/TaggingRuleV2Tag:TaggingRuleV2Tag"
                        },
                        "description": "The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/team:Team": {
            "description": "Use this resource to manage the Team meta details like Name, description etc. The name of the Team must be unique within an organization.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\n\nconst exampleTeam = new squadcast.Team(\"exampleTeam\", {});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\n\nexample_team = squadcast.Team(\"exampleTeam\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = new Squadcast.Team(\"exampleTeam\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := squadcast.NewTeam(ctx, \"exampleTeam\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.Team;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleTeam = new Team(\"exampleTeam\");\n\n    }\n}\n```\n```yaml\nresources:\n  exampleTeam:\n    type: squadcast:Team\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\n#teamName\n\n```sh\n$ pulumi import squadcast:index/team:Team test \"My Team Name\"\n```\n\n",
            "properties": {
                "default": {
                    "type": "boolean",
                    "description": "Team is default?.\n"
                },
                "defaultRoleIds": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Team description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Team name.\n"
                }
            },
            "required": [
                "default",
                "defaultRoleIds",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Team description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Team name.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "Team is default?.\n"
                    },
                    "defaultRoleIds": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "Team description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Team name.\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/teamMember:TeamMember": {
            "description": "You can manage the members of a Team here.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleUser = squadcast.getUser({\n    email: \"test@example.com\",\n});\nconst exampleTeamRole = exampleTeam.then(exampleTeam =\u003e squadcast.getTeamRole({\n    name: \"example role name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleTeamMember = new squadcast.TeamMember(\"exampleTeamMember\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    userId: exampleUser.then(exampleUser =\u003e exampleUser.id),\n    roleIds: [exampleTeamRole.then(exampleTeamRole =\u003e exampleTeamRole.id)],\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_user = squadcast.get_user(email=\"test@example.com\")\nexample_team_role = squadcast.get_team_role(name=\"example role name\",\n    team_id=example_team.id)\nexample_team_member = squadcast.TeamMember(\"exampleTeamMember\",\n    team_id=example_team.id,\n    user_id=example_user.id,\n    role_ids=[example_team_role.id])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleUser = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"test@example.com\",\n    });\n\n    var exampleTeamRole = Squadcast.GetTeamRole.Invoke(new()\n    {\n        Name = \"example role name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleTeamMember = new Squadcast.TeamMember(\"exampleTeamMember\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        UserId = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n        RoleIds = new[]\n        {\n            exampleTeamRole.Apply(getTeamRoleResult =\u003e getTeamRoleResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"test@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleTeamRole, err := squadcast.LookupTeamRole(ctx, \u0026squadcast.LookupTeamRoleArgs{\n\t\t\tName:   \"example role name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewTeamMember(ctx, \"exampleTeamMember\", \u0026squadcast.TeamMemberArgs{\n\t\t\tTeamId: pulumi.String(exampleTeam.Id),\n\t\t\tUserId: pulumi.String(exampleUser.Id),\n\t\t\tRoleIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(exampleTeamRole.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetTeamRoleArgs;\nimport com.pulumi.squadcast.TeamMember;\nimport com.pulumi.squadcast.TeamMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        final var exampleTeamRole = SquadcastFunctions.getTeamRole(GetTeamRoleArgs.builder()\n            .name(\"example role name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleTeamMember = new TeamMember(\"exampleTeamMember\", TeamMemberArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .userId(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n            .roleIds(exampleTeamRole.applyValue(getTeamRoleResult -\u003e getTeamRoleResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleTeamMember:\n    type: squadcast:TeamMember\n    properties:\n      teamId: ${exampleTeam.id}\n      userId: ${exampleUser.id}\n      roleIds:\n        - ${exampleTeamRole.id}\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n  exampleTeamRole:\n    fn::invoke:\n      Function: squadcast:getTeamRole\n      Arguments:\n        name: example role name\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:emailID\n\nUse 'Get All Teams' API to get the id of the team\n\n```sh\n$ pulumi import squadcast:index/teamMember:TeamMember example_resource_name 62d2fe23a57381088224d726:test@example.com\n```\n\n",
            "properties": {
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "role ids.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "user id (ObjectId).\n"
                }
            },
            "required": [
                "roleIds",
                "teamId",
                "userId"
            ],
            "inputProperties": {
                "roleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "role ids.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "user id (ObjectId).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "roleIds",
                "teamId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamMember resources.\n",
                "properties": {
                    "roleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "role ids.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "user id (ObjectId).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/teamRole:TeamRole": {
            "description": "Use this resource to manage the Team roles and their permissions. The name of the Team Role must be unique within a Team.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleTeamRole = new squadcast.TeamRole(\"exampleTeamRole\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    abilities: [\n        \"create-escalation-policies\",\n        \"read-escalation-policies\",\n        \"update-escalation-policies\",\n    ],\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_team_role = squadcast.TeamRole(\"exampleTeamRole\",\n    team_id=example_team.id,\n    abilities=[\n        \"create-escalation-policies\",\n        \"read-escalation-policies\",\n        \"update-escalation-policies\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleTeamRole = new Squadcast.TeamRole(\"exampleTeamRole\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        Abilities = new[]\n        {\n            \"create-escalation-policies\",\n            \"read-escalation-policies\",\n            \"update-escalation-policies\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.NewTeamRole(ctx, \"exampleTeamRole\", \u0026squadcast.TeamRoleArgs{\n\t\t\tTeamId: pulumi.String(exampleTeam.Id),\n\t\t\tAbilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"create-escalation-policies\"),\n\t\t\t\tpulumi.String(\"read-escalation-policies\"),\n\t\t\t\tpulumi.String(\"update-escalation-policies\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.TeamRole;\nimport com.pulumi.squadcast.TeamRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        var exampleTeamRole = new TeamRole(\"exampleTeamRole\", TeamRoleArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .abilities(            \n                \"create-escalation-policies\",\n                \"read-escalation-policies\",\n                \"update-escalation-policies\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleTeamRole:\n    type: squadcast:TeamRole\n    properties:\n      teamId: ${exampleTeam.id}\n      abilities:\n        - create-escalation-policies\n        - read-escalation-policies\n        - update-escalation-policies\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:teamRole(ex: Admin, User, Observer)\n\nUse 'Get All Teams' API to get the id of the team\n\n```sh\n$ pulumi import squadcast:index/teamRole:TeamRole example_resource_name \"62d2fe23a57381088224d726:Admin\"\n```\n\n",
            "properties": {
                "abilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "abilities.\nCurrent available abilities are :\ncreate-escalation-policies, create-postmortems, create-runbooks, create-schedules, create-services, create-slos, create-squads, create-status-pages, delete-escalation-policies, delete-postmortems, delete-runbooks, delete-schedules, delete-services, delete-slos, delete-squads, delete-status-pages, read-escalation-policies, read-postmortems, read-runbooks, read-schedules, read-services, read-slos, read-squads, read-status-pages, read-team-analytics, update-escalation-policies, update-postmortems, update-runbooks, update-schedules, update-services, update-slos, update-squads, update-status-pages\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Team role default.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Team role name.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                }
            },
            "required": [
                "abilities",
                "default",
                "name",
                "teamId"
            ],
            "inputProperties": {
                "abilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "abilities.\nCurrent available abilities are :\ncreate-escalation-policies, create-postmortems, create-runbooks, create-schedules, create-services, create-slos, create-squads, create-status-pages, delete-escalation-policies, delete-postmortems, delete-runbooks, delete-schedules, delete-services, delete-slos, delete-squads, delete-status-pages, read-escalation-policies, read-postmortems, read-runbooks, read-schedules, read-services, read-slos, read-squads, read-status-pages, read-team-analytics, update-escalation-policies, update-postmortems, update-runbooks, update-schedules, update-services, update-slos, update-squads, update-status-pages\n"
                },
                "name": {
                    "type": "string",
                    "description": "Team role name.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "abilities",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamRole resources.\n",
                "properties": {
                    "abilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "abilities.\nCurrent available abilities are :\ncreate-escalation-policies, create-postmortems, create-runbooks, create-schedules, create-services, create-slos, create-squads, create-status-pages, delete-escalation-policies, delete-postmortems, delete-runbooks, delete-schedules, delete-services, delete-slos, delete-squads, delete-status-pages, read-escalation-policies, read-postmortems, read-runbooks, read-schedules, read-services, read-slos, read-squads, read-status-pages, read-team-analytics, update-escalation-policies, update-postmortems, update-runbooks, update-schedules, update-services, update-slos, update-squads, update-status-pages\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Team role default.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Team role name.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/user:User": {
            "description": "User resource.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\n\nconst exampleUser = new squadcast.User(\"exampleUser\", {\n    abilities: [\"manage-billing\"],\n    email: \"test@example.com\",\n    firstName: \"test\",\n    lastName: \"lastname\",\n    role: \"stakeholder\",\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\n\nexample_user = squadcast.User(\"exampleUser\",\n    abilities=[\"manage-billing\"],\n    email=\"test@example.com\",\n    first_name=\"test\",\n    last_name=\"lastname\",\n    role=\"stakeholder\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleUser = new Squadcast.User(\"exampleUser\", new()\n    {\n        Abilities = new[]\n        {\n            \"manage-billing\",\n        },\n        Email = \"test@example.com\",\n        FirstName = \"test\",\n        LastName = \"lastname\",\n        Role = \"stakeholder\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := squadcast.NewUser(ctx, \"exampleUser\", \u0026squadcast.UserArgs{\n\t\t\tAbilities: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"manage-billing\"),\n\t\t\t},\n\t\t\tEmail:     pulumi.String(\"test@example.com\"),\n\t\t\tFirstName: pulumi.String(\"test\"),\n\t\t\tLastName:  pulumi.String(\"lastname\"),\n\t\t\tRole:      pulumi.String(\"stakeholder\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.User;\nimport com.pulumi.squadcast.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleUser = new User(\"exampleUser\", UserArgs.builder()\n            .abilities(\"manage-billing\")\n            .email(\"test@example.com\")\n            .firstName(\"test\")\n            .lastName(\"lastname\")\n            .role(\"stakeholder\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleUser:\n    type: squadcast:User\n    properties:\n      abilities:\n        - manage-billing\n      email: test@example.com\n      firstName: test\n      lastName: lastname\n      role: stakeholder\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nemailID\n\n```sh\n$ pulumi import squadcast:index/user:User example_resource_name test@example.com\n```\n\n",
            "properties": {
                "abilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "user abilities/permissions. (manage-api-tokens, manage-billing, manage-extensions, manage-teams, manage-users, manage-webhooks, manage-organization-analytics, manage-postmortem-templates)\n"
                },
                "email": {
                    "type": "string",
                    "description": "User email.\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "User first name.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "User last name.\n"
                },
                "role": {
                    "type": "string",
                    "description": "User role.\n"
                }
            },
            "required": [
                "email",
                "firstName",
                "lastName",
                "role"
            ],
            "inputProperties": {
                "abilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "user abilities/permissions. (manage-api-tokens, manage-billing, manage-extensions, manage-teams, manage-users, manage-webhooks, manage-organization-analytics, manage-postmortem-templates)\n"
                },
                "email": {
                    "type": "string",
                    "description": "User email.\n",
                    "willReplaceOnChanges": true
                },
                "firstName": {
                    "type": "string",
                    "description": "User first name.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "User last name.\n"
                },
                "role": {
                    "type": "string",
                    "description": "User role.\n"
                }
            },
            "requiredInputs": [
                "email",
                "firstName",
                "lastName",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "abilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "user abilities/permissions. (manage-api-tokens, manage-billing, manage-extensions, manage-teams, manage-users, manage-webhooks, manage-organization-analytics, manage-postmortem-templates)\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "User email.\n",
                        "willReplaceOnChanges": true
                    },
                    "firstName": {
                        "type": "string",
                        "description": "User first name.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User last name.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "User role.\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/webform:Webform": {
            "description": "[Squadcast Webforms](https://support.squadcast.com/webforms/webforms) allows organizations to expand their customer support by hosting public Webforms, so their customers can quickly create an alert from outside the Squadcast ecosystem. Not only this, but internal stakeholders can also leverage Webforms for easy alert creation. The name of the Webform must be unique within and across Teams.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.Webform;\nimport com.pulumi.squadcast.WebformArgs;\nimport com.pulumi.squadcast.inputs.WebformOwnerArgs;\nimport com.pulumi.squadcast.inputs.WebformServiceArgs;\nimport com.pulumi.squadcast.inputs.WebformInputFieldArgs;\nimport com.pulumi.squadcast.inputs.WebformSeverityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example test name\")\n            .build());\n\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"example service name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        final var exampleService2 = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"example service name 2\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleWebformWebform = new Webform(\"exampleWebformWebform\", WebformArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .owner(WebformOwnerArgs.builder()\n                .type(\"user\")\n                .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .build())\n            .services(            \n                WebformServiceArgs.builder()\n                    .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n                    .alias(\"example service alias\")\n                    .build(),\n                WebformServiceArgs.builder()\n                    .serviceId(exampleService2.applyValue(getServiceResult -\u003e getServiceResult.id()))\n                    .build())\n            .customDomainName(\"example.com\")\n            .header(\"formHeader\")\n            .description(\"formDescription\")\n            .title(\"formTitle\")\n            .footerText(\"footerText\")\n            .footerLink(\"footerLink\")\n            .emailOns(            \n                \"acknowledged\",\n                \"resolved\",\n                \"triggered\")\n            .inputFields(            \n                WebformInputFieldArgs.builder()\n                    .label(\"test_label\")\n                    .options(                    \n                        \"test1\",\n                        \"test2\")\n                    .build(),\n                WebformInputFieldArgs.builder()\n                    .label(\"test_label2\")\n                    .options(\"test1\")\n                    .build())\n            .tags(Map.ofEntries(\n                Map.entry(\"tagKey\", \"tagValue\"),\n                Map.entry(\"tagKey2\", \"tagValue2\")\n            ))\n            .build());\n\n        var exampleWebformIndex_webformWebform = new Webform(\"exampleWebformIndex/webformWebform\", WebformArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .owner(WebformOwnerArgs.builder()\n                .type(\"user\")\n                .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .build())\n            .services(            \n                WebformServiceArgs.builder()\n                    .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n                    .alias(\"example service alias\")\n                    .build(),\n                WebformServiceArgs.builder()\n                    .serviceId(exampleService2.applyValue(getServiceResult -\u003e getServiceResult.id()))\n                    .build())\n            .customDomainName(\"example.com\")\n            .header(\"formHeader\")\n            .description(\"formDescription\")\n            .title(\"formTitle\")\n            .footerText(\"footerText\")\n            .footerLink(\"footerLink\")\n            .emailOns(            \n                \"acknowledged\",\n                \"resolved\",\n                \"triggered\")\n            .severities(WebformSeverityArgs.builder()\n                .type(\"critical\")\n                .label(\"critical\")\n                .build())\n            .tags(Map.ofEntries(\n                Map.entry(\"tagKey\", \"tagValue\"),\n                Map.entry(\"tagKey2\", \"tagValue2\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleWebformWebform:\n    type: squadcast:Webform\n    properties:\n      teamId: ${exampleTeam.id}\n      owner:\n        type: user\n        id: ${exampleUser.id}\n      services:\n        - serviceId: ${exampleService.id}\n          alias: example service alias\n        - serviceId: ${exampleService2.id}\n      customDomainName: example.com\n      header: formHeader\n      description: formDescription\n      title: formTitle\n      footerText: footerText\n      footerLink: footerLink\n      emailOns:\n        - acknowledged\n        - resolved\n        - triggered\n      inputFields:\n        - label: test_label\n          options:\n            - test1\n            - test2\n        - label: test_label2\n          options:\n            - test1\n      tags:\n        tagKey: tagValue\n        tagKey2: tagValue2\n  exampleWebformIndex/webformWebform:\n    type: squadcast:Webform\n    properties:\n      teamId: ${exampleTeam.id}\n      owner:\n        type: user\n        id: ${exampleUser.id}\n      services:\n        - serviceId: ${exampleService.id}\n          alias: example service alias\n        - serviceId: ${exampleService2.id}\n      customDomainName: example.com\n      header: formHeader\n      description: formDescription\n      title: formTitle\n      footerText: footerText\n      footerLink: footerLink\n      emailOns:\n        - acknowledged\n        - resolved\n        - triggered\n      severities:\n        - type: critical\n          label: critical\n      tags:\n        tagKey: tagValue\n        tagKey2: tagValue2\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example test name\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: example service name\n        teamId: ${exampleTeam.id}\n  exampleService2:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: example service name 2\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:webformName\n\nUse 'Get All Teams' API to get the id of the team\n\n```sh\n$ pulumi import squadcast:index/webform:Webform example_webform \"63065e992a5f9a1d5792b6c5:Webform Name\"\n```\n\n",
            "properties": {
                "customDomainName": {
                    "type": "string",
                    "description": "Custom domain name (URL).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Webform.\n"
                },
                "emailOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines when to send email to the reporter (triggered, acknowledged, resolved).\n"
                },
                "footerLink": {
                    "type": "string",
                    "description": "Footer link.\n"
                },
                "footerText": {
                    "type": "string",
                    "description": "Footer text.\n"
                },
                "header": {
                    "type": "string",
                    "description": "Webform header.\n"
                },
                "inputFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WebformInputField:WebformInputField"
                    },
                    "description": "Input Fields added to Webforms. Added as tags to incident based on selection.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Webform.\n"
                },
                "owner": {
                    "$ref": "#/types/squadcast:index/WebformOwner:WebformOwner",
                    "description": "Form owner.\n"
                },
                "publicUrl": {
                    "type": "string",
                    "description": "Public URL of the Webform.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WebformService:WebformService"
                    },
                    "description": "Services added to Webform.\n"
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WebformSeverity:WebformSeverity"
                    },
                    "description": "Severity of the incident.\n",
                    "deprecationMessage": "Use `input_field` instead of `severity`."
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Webform Tags.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Webform title (public).\n"
                }
            },
            "required": [
                "header",
                "name",
                "owner",
                "publicUrl",
                "services",
                "teamId",
                "title"
            ],
            "inputProperties": {
                "customDomainName": {
                    "type": "string",
                    "description": "Custom domain name (URL).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Webform.\n"
                },
                "emailOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines when to send email to the reporter (triggered, acknowledged, resolved).\n"
                },
                "footerLink": {
                    "type": "string",
                    "description": "Footer link.\n"
                },
                "footerText": {
                    "type": "string",
                    "description": "Footer text.\n"
                },
                "header": {
                    "type": "string",
                    "description": "Webform header.\n"
                },
                "inputFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WebformInputField:WebformInputField"
                    },
                    "description": "Input Fields added to Webforms. Added as tags to incident based on selection.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Webform.\n"
                },
                "owner": {
                    "$ref": "#/types/squadcast:index/WebformOwner:WebformOwner",
                    "description": "Form owner.\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WebformService:WebformService"
                    },
                    "description": "Services added to Webform.\n"
                },
                "severities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WebformSeverity:WebformSeverity"
                    },
                    "description": "Severity of the incident.\n",
                    "deprecationMessage": "Use `input_field` instead of `severity`."
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Webform Tags.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n",
                    "willReplaceOnChanges": true
                },
                "title": {
                    "type": "string",
                    "description": "Webform title (public).\n"
                }
            },
            "requiredInputs": [
                "header",
                "owner",
                "services",
                "teamId",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webform resources.\n",
                "properties": {
                    "customDomainName": {
                        "type": "string",
                        "description": "Custom domain name (URL).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Webform.\n"
                    },
                    "emailOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Defines when to send email to the reporter (triggered, acknowledged, resolved).\n"
                    },
                    "footerLink": {
                        "type": "string",
                        "description": "Footer link.\n"
                    },
                    "footerText": {
                        "type": "string",
                        "description": "Footer text.\n"
                    },
                    "header": {
                        "type": "string",
                        "description": "Webform header.\n"
                    },
                    "inputFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/WebformInputField:WebformInputField"
                        },
                        "description": "Input Fields added to Webforms. Added as tags to incident based on selection.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Webform.\n"
                    },
                    "owner": {
                        "$ref": "#/types/squadcast:index/WebformOwner:WebformOwner",
                        "description": "Form owner.\n"
                    },
                    "publicUrl": {
                        "type": "string",
                        "description": "Public URL of the Webform.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/WebformService:WebformService"
                        },
                        "description": "Services added to Webform.\n"
                    },
                    "severities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/WebformSeverity:WebformSeverity"
                        },
                        "description": "Severity of the incident.\n",
                        "deprecationMessage": "Use `input_field` instead of `severity`."
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Webform Tags.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    },
                    "title": {
                        "type": "string",
                        "description": "Webform title (public).\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/workflow:Workflow": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.Workflow;\nimport com.pulumi.squadcast.WorkflowArgs;\nimport com.pulumi.squadcast.inputs.WorkflowFiltersArgs;\nimport com.pulumi.squadcast.inputs.WorkflowEntityOwnerArgs;\nimport com.pulumi.squadcast.inputs.WorkflowTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        var exampleWorkflowWithSimpleFilters = new Workflow(\"exampleWorkflowWithSimpleFilters\", WorkflowArgs.builder()\n            .title(\"test workflow\")\n            .description(\"Test workflow description\")\n            .ownerId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .enabled(true)\n            .trigger(\"incident_triggered\")\n            .filters(WorkflowFiltersArgs.builder()\n                .fields(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .type(\"priority_is\")\n                .build())\n            .entityOwners(WorkflowEntityOwnerArgs.builder()\n                .type(\"user\")\n                .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .build())\n            .tags(WorkflowTagArgs.builder()\n                .key(\"tagKey\")\n                .value(\"tagValue\")\n                .color(\"#000000\")\n                .build())\n            .build());\n\n        var exampleWorkflowWithAdvancedFilters = new Workflow(\"exampleWorkflowWithAdvancedFilters\", WorkflowArgs.builder()\n            .title(\"test workflow\")\n            .description(\"Test workflow description\")\n            .ownerId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .enabled(true)\n            .trigger(\"incident_triggered\")\n            .filters(WorkflowFiltersArgs.builder()\n                .condition(\"or\")\n                .filters(                \n                    WorkflowFiltersFilterArgs.builder()\n                        .condition(\"and\")\n                        .filters(                        \n                            WorkflowFiltersFilterFilterArgs.builder()\n                                .type(\"tag_is\")\n                                .key(\"hello\")\n                                .value(\"world\")\n                                .build(),\n                            WorkflowFiltersFilterFilterArgs.builder()\n                                .type(\"tag_is\")\n                                .key(\"service\")\n                                .value(\"payment-gw\")\n                                .build())\n                        .build(),\n                    WorkflowFiltersFilterArgs.builder()\n                        .type(\"priority_is\")\n                        .value(\"P1\")\n                        .build())\n                .build())\n            .entityOwners(WorkflowEntityOwnerArgs.builder()\n                .type(\"user\")\n                .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .build())\n            .tags(WorkflowTagArgs.builder()\n                .key(\"tagKey\")\n                .value(\"tagValue\")\n                .color(\"#000000\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleWorkflowWithSimpleFilters:\n    type: squadcast:Workflow\n    properties:\n      title: test workflow\n      description: Test workflow description\n      ownerId: ${exampleTeam.id}\n      enabled: true\n      trigger: incident_triggered\n      filters:\n        fields:\n          - value: P1\n        type: priority_is\n      entityOwners:\n        - type: user\n          id: ${exampleUser.id}\n      tags:\n        - key: tagKey\n          value: tagValue\n          color: '#000000'\n  exampleWorkflowWithAdvancedFilters:\n    type: squadcast:Workflow\n    properties:\n      title: test workflow\n      description: Test workflow description\n      ownerId: ${exampleTeam.id}\n      enabled: true\n      trigger: incident_triggered\n      filters:\n        condition: or\n        filters:\n          - condition: and\n            filters:\n              - type: tag_is\n                key: hello\n                value: world\n              - type: tag_is\n                key: service\n                value: payment-gw\n          - type: priority_is\n            value: P1\n      entityOwners:\n        - type: user\n          id: ${exampleUser.id}\n      tags:\n        - key: tagKey\n          value: tagValue\n          color: '#000000'\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the workflow is enabled or not\n"
                },
                "entityOwners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowEntityOwner:WorkflowEntityOwner"
                    },
                    "description": "The entity owner of the workflow\n"
                },
                "filters": {
                    "$ref": "#/types/squadcast:index/WorkflowFilters:WorkflowFilters",
                    "description": "The filters to be applied on the workflow\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of the user who owns the workflow\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowTag:WorkflowTag"
                    },
                    "description": "The tags to be applied on the workflow\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "trigger": {
                    "type": "string",
                    "description": "The trigger for the workflow\n"
                }
            },
            "required": [
                "entityOwners",
                "ownerId",
                "title",
                "trigger"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the workflow is enabled or not\n"
                },
                "entityOwners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowEntityOwner:WorkflowEntityOwner"
                    },
                    "description": "The entity owner of the workflow\n"
                },
                "filters": {
                    "$ref": "#/types/squadcast:index/WorkflowFilters:WorkflowFilters",
                    "description": "The filters to be applied on the workflow\n"
                },
                "ownerId": {
                    "type": "string",
                    "description": "The ID of the user who owns the workflow\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowTag:WorkflowTag"
                    },
                    "description": "The tags to be applied on the workflow\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "trigger": {
                    "type": "string",
                    "description": "The trigger for the workflow\n"
                }
            },
            "requiredInputs": [
                "entityOwners",
                "ownerId",
                "title",
                "trigger"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Workflow resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the workflow is enabled or not\n"
                    },
                    "entityOwners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/WorkflowEntityOwner:WorkflowEntityOwner"
                        },
                        "description": "The entity owner of the workflow\n"
                    },
                    "filters": {
                        "$ref": "#/types/squadcast:index/WorkflowFilters:WorkflowFilters",
                        "description": "The filters to be applied on the workflow\n"
                    },
                    "ownerId": {
                        "type": "string",
                        "description": "The ID of the user who owns the workflow\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/WorkflowTag:WorkflowTag"
                        },
                        "description": "The tags to be applied on the workflow\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the workflow\n"
                    },
                    "trigger": {
                        "type": "string",
                        "description": "The trigger for the workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/workflowAction:WorkflowAction": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.Workflow;\nimport com.pulumi.squadcast.WorkflowArgs;\nimport com.pulumi.squadcast.inputs.WorkflowFiltersArgs;\nimport com.pulumi.squadcast.inputs.WorkflowEntityOwnerArgs;\nimport com.pulumi.squadcast.inputs.WorkflowTagArgs;\nimport com.pulumi.squadcast.WorkflowAction;\nimport com.pulumi.squadcast.WorkflowActionArgs;\nimport com.pulumi.squadcast.inputs.WorkflowActionHeaderArgs;\nimport com.pulumi.squadcast.inputs.WorkflowActionChannelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        var exampleWorkflowWorkflow = new Workflow(\"exampleWorkflowWorkflow\", WorkflowArgs.builder()\n            .title(\"test workflow\")\n            .description(\"Test workflow description\")\n            .ownerId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .enabled(true)\n            .trigger(\"incident_triggered\")\n            .filters(WorkflowFiltersArgs.builder()\n                .fields(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .type(\"priority_is\")\n                .build())\n            .entityOwners(WorkflowEntityOwnerArgs.builder()\n                .type(\"user\")\n                .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .build())\n            .tags(WorkflowTagArgs.builder()\n                .key(\"tagKey\")\n                .value(\"tagValue\")\n                .color(\"#000000\")\n                .build())\n            .build());\n\n        var exampleWorkflowIndex_workflowActionWorkflowAction = new WorkflowAction(\"exampleWorkflowIndex/workflowActionWorkflowAction\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .autoName(false)\n            .channelName(\"enter-channel-name\")\n            .build());\n\n        var exampleWorkflowSquadcastIndex_workflowActionWorkflowAction = new WorkflowAction(\"exampleWorkflowSquadcastIndex/workflowActionWorkflowAction\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .build());\n\n        var exampleWorkflowSquadcastIndex_workflowActionWorkflowAction1 = new WorkflowAction(\"exampleWorkflowSquadcastIndex/workflowActionWorkflowAction1\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .channelId(\"C06P4473BJA\")\n            .message(\"test incident created...\")\n            .build());\n\n        var exampleWorkflowWorkflowAction = new WorkflowAction(\"exampleWorkflowWorkflowAction\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .webhookId(\"660edb863a1cefa8f291aebe\")\n            .build());\n\n        var exampleWorkflowSquadcastIndex_workflowActionWorkflowAction2 = new WorkflowAction(\"exampleWorkflowSquadcastIndex/workflowActionWorkflowAction2\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .tos(            \n                \"abc@squadcast.com\",\n                \"xyz@squadcast.com\")\n            .subject(\"enter your subject here\")\n            .body(\"enter your body here\")\n            .build());\n\n        var exampleWorkflowSquadcastIndex_workflowActionWorkflowAction3 = new WorkflowAction(\"exampleWorkflowSquadcastIndex/workflowActionWorkflowAction3\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .url(\"https://httpbin.org/post\")\n            .method(\"GET\")\n            .headers(WorkflowActionHeaderArgs.builder()\n                .key(\"content-type\")\n                .value(\"application/json\")\n                .build())\n            .body(\"{\\\"key\\\":\\\"value\\\"}\")\n            .build());\n\n        var exampleWorkflowSquadcastIndex_workflowActionWorkflowAction4 = new WorkflowAction(\"exampleWorkflowSquadcastIndex/workflowActionWorkflowAction4\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .priority(\"P2\")\n            .build());\n\n        var exampleWorkflowSquadcastIndex_workflowActionWorkflowAction5 = new WorkflowAction(\"exampleWorkflowSquadcastIndex/workflowActionWorkflowAction5\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .channels(WorkflowActionChannelArgs.builder()\n                .type(\"chat_room\")\n                .link(\"https://chat.squadcast.com/room/123456\")\n                .displayText(\"enter your display text here\")\n                .build())\n            .build());\n\n        var exampleWorkflowSquadcastIndex_workflowActionWorkflowAction6 = new WorkflowAction(\"exampleWorkflowSquadcastIndex/workflowActionWorkflowAction6\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .slo(\"2119\")\n            .slis(\"errors\")\n            .build());\n\n        var exampleWorkflowSquadcastIndex_workflowActionWorkflowAction7 = new WorkflowAction(\"exampleWorkflowSquadcastIndex/workflowActionWorkflowAction7\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .runbooks(            \n                \"660ced558d1d4df4a61823ee\",\n                \"660d46f62f8acc7786618202\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleWorkflowWorkflow:\n    type: squadcast:Workflow\n    properties:\n      title: test workflow\n      description: Test workflow description\n      ownerId: ${exampleTeam.id}\n      enabled: true\n      trigger: incident_triggered\n      filters:\n        fields:\n          - value: P1\n        type: priority_is\n      entityOwners:\n        - type: user\n          id: ${exampleUser.id}\n      tags:\n        - key: tagKey\n          value: tagValue\n          color: '#000000'\n  exampleWorkflowIndex/workflowActionWorkflowAction:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n      autoName: false\n      channelName: enter-channel-name\n  exampleWorkflowSquadcastIndex/workflowActionWorkflowAction:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n  exampleWorkflowSquadcastIndex/workflowActionWorkflowAction1:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n      channelId: C06P4473BJA\n      message: test incident created...\n  exampleWorkflowWorkflowAction:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n      webhookId: 660edb863a1cefa8f291aebe\n  exampleWorkflowSquadcastIndex/workflowActionWorkflowAction2:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n      tos:\n        - abc@squadcast.com\n        - xyz@squadcast.com\n      subject: enter your subject here\n      body: enter your body here\n  exampleWorkflowSquadcastIndex/workflowActionWorkflowAction3:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n      url: https://httpbin.org/post\n      method: GET\n      headers:\n        - key: content-type\n          value: application/json\n      body: '{\"key\":\"value\"}'\n  exampleWorkflowSquadcastIndex/workflowActionWorkflowAction4:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n      priority: P2\n  exampleWorkflowSquadcastIndex/workflowActionWorkflowAction5:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n      channels:\n        - type: chat_room\n          link: https://chat.squadcast.com/room/123456\n          displayText: enter your display text here\n  exampleWorkflowSquadcastIndex/workflowActionWorkflowAction6:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n      slo: '2119'\n      slis:\n        - errors\n  exampleWorkflowSquadcastIndex/workflowActionWorkflowAction7:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n      runbooks:\n        - 660ced558d1d4df4a61823ee\n        - 660d46f62f8acc7786618202\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "account": {
                    "type": "string",
                    "description": "The account to be used for creating the ticket. (Only for Jira Create Ticket action)\n"
                },
                "autoName": {
                    "type": "boolean",
                    "description": "Whether to automatically name the action\n"
                },
                "body": {
                    "type": "string",
                    "description": "The body of the request\n"
                },
                "channelId": {
                    "type": "string",
                    "description": "The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)\n"
                },
                "channelName": {
                    "type": "string",
                    "description": "The name of the channel to be archived. (Only for Slack Archive Channel action)\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowActionChannel:WorkflowActionChannel"
                    },
                    "description": "The communication channels to be added to the incident\n"
                },
                "componentAndImpacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowActionComponentAndImpact:WorkflowActionComponentAndImpact"
                    },
                    "description": "The components and their impact to be set for the issue. (Only for Add Status Page Issue action)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the ticket. (Only for Jira Create Ticket action)\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowActionHeader:WorkflowActionHeader"
                    },
                    "description": "The headers to be sent with the request\n"
                },
                "issueTitle": {
                    "type": "string",
                    "description": "The title of the issue to be added. (Only for Add Status Page Issue action)\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)\n"
                },
                "memberId": {
                    "type": "string",
                    "description": "The ID of the user to which the message is to be sent. (Only for Slack Message User action)\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message to be sent. (Only for Slack/MS-Team Message Channel action)\n"
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to be used for the call\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the action\n"
                },
                "note": {
                    "type": "string",
                    "description": "The note to be added to the incident\n"
                },
                "pageStatusId": {
                    "type": "integer",
                    "description": "The ID of the status to be set for the issue. (Only for Add Status Page Issue action)\n"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority of the incident\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project to be used for creating the ticket. (Only for Jira Create Ticket action)\n"
                },
                "runbooks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The runbooks to be added to the incident\n"
                },
                "slis": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SLIs to be added to the incident\n"
                },
                "slo": {
                    "type": "integer",
                    "description": "ID of the SLO to be added to the incident\n"
                },
                "statusAndMessages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowActionStatusAndMessage:WorkflowActionStatusAndMessage"
                    },
                    "description": "The status and message to be set for the issue. (Only for Add Status Page Issue action)\n"
                },
                "statusPageId": {
                    "type": "integer",
                    "description": "The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject of the email\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the ticket. (Only for Jira Create Ticket action)\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The email addresses to which the email is to be sent\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to be called\n"
                },
                "webhookId": {
                    "type": "string",
                    "description": "The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the workflow to which this action belongs\n"
                }
            },
            "required": [
                "name",
                "workflowId"
            ],
            "inputProperties": {
                "account": {
                    "type": "string",
                    "description": "The account to be used for creating the ticket. (Only for Jira Create Ticket action)\n"
                },
                "autoName": {
                    "type": "boolean",
                    "description": "Whether to automatically name the action\n"
                },
                "body": {
                    "type": "string",
                    "description": "The body of the request\n"
                },
                "channelId": {
                    "type": "string",
                    "description": "The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)\n"
                },
                "channelName": {
                    "type": "string",
                    "description": "The name of the channel to be archived. (Only for Slack Archive Channel action)\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowActionChannel:WorkflowActionChannel"
                    },
                    "description": "The communication channels to be added to the incident\n"
                },
                "componentAndImpacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowActionComponentAndImpact:WorkflowActionComponentAndImpact"
                    },
                    "description": "The components and their impact to be set for the issue. (Only for Add Status Page Issue action)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the ticket. (Only for Jira Create Ticket action)\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowActionHeader:WorkflowActionHeader"
                    },
                    "description": "The headers to be sent with the request\n"
                },
                "issueTitle": {
                    "type": "string",
                    "description": "The title of the issue to be added. (Only for Add Status Page Issue action)\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)\n"
                },
                "memberId": {
                    "type": "string",
                    "description": "The ID of the user to which the message is to be sent. (Only for Slack Message User action)\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message to be sent. (Only for Slack/MS-Team Message Channel action)\n"
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to be used for the call\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the action\n"
                },
                "note": {
                    "type": "string",
                    "description": "The note to be added to the incident\n"
                },
                "pageStatusId": {
                    "type": "integer",
                    "description": "The ID of the status to be set for the issue. (Only for Add Status Page Issue action)\n"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority of the incident\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project to be used for creating the ticket. (Only for Jira Create Ticket action)\n"
                },
                "runbooks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The runbooks to be added to the incident\n"
                },
                "slis": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The SLIs to be added to the incident\n"
                },
                "slo": {
                    "type": "integer",
                    "description": "ID of the SLO to be added to the incident\n"
                },
                "statusAndMessages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:index/WorkflowActionStatusAndMessage:WorkflowActionStatusAndMessage"
                    },
                    "description": "The status and message to be set for the issue. (Only for Add Status Page Issue action)\n"
                },
                "statusPageId": {
                    "type": "integer",
                    "description": "The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject of the email\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the ticket. (Only for Jira Create Ticket action)\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The email addresses to which the email is to be sent\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to be called\n"
                },
                "webhookId": {
                    "type": "string",
                    "description": "The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the workflow to which this action belongs\n"
                }
            },
            "requiredInputs": [
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowAction resources.\n",
                "properties": {
                    "account": {
                        "type": "string",
                        "description": "The account to be used for creating the ticket. (Only for Jira Create Ticket action)\n"
                    },
                    "autoName": {
                        "type": "boolean",
                        "description": "Whether to automatically name the action\n"
                    },
                    "body": {
                        "type": "string",
                        "description": "The body of the request\n"
                    },
                    "channelId": {
                        "type": "string",
                        "description": "The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)\n"
                    },
                    "channelName": {
                        "type": "string",
                        "description": "The name of the channel to be archived. (Only for Slack Archive Channel action)\n"
                    },
                    "channels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/WorkflowActionChannel:WorkflowActionChannel"
                        },
                        "description": "The communication channels to be added to the incident\n"
                    },
                    "componentAndImpacts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/WorkflowActionComponentAndImpact:WorkflowActionComponentAndImpact"
                        },
                        "description": "The components and their impact to be set for the issue. (Only for Add Status Page Issue action)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the ticket. (Only for Jira Create Ticket action)\n"
                    },
                    "headers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/WorkflowActionHeader:WorkflowActionHeader"
                        },
                        "description": "The headers to be sent with the request\n"
                    },
                    "issueTitle": {
                        "type": "string",
                        "description": "The title of the issue to be added. (Only for Add Status Page Issue action)\n"
                    },
                    "issueType": {
                        "type": "string",
                        "description": "The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)\n"
                    },
                    "memberId": {
                        "type": "string",
                        "description": "The ID of the user to which the message is to be sent. (Only for Slack Message User action)\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "The message to be sent. (Only for Slack/MS-Team Message Channel action)\n"
                    },
                    "method": {
                        "type": "string",
                        "description": "The HTTP method to be used for the call\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the action\n"
                    },
                    "note": {
                        "type": "string",
                        "description": "The note to be added to the incident\n"
                    },
                    "pageStatusId": {
                        "type": "integer",
                        "description": "The ID of the status to be set for the issue. (Only for Add Status Page Issue action)\n"
                    },
                    "priority": {
                        "type": "string",
                        "description": "The priority of the incident\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "The project to be used for creating the ticket. (Only for Jira Create Ticket action)\n"
                    },
                    "runbooks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The runbooks to be added to the incident\n"
                    },
                    "slis": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The SLIs to be added to the incident\n"
                    },
                    "slo": {
                        "type": "integer",
                        "description": "ID of the SLO to be added to the incident\n"
                    },
                    "statusAndMessages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/WorkflowActionStatusAndMessage:WorkflowActionStatusAndMessage"
                        },
                        "description": "The status and message to be set for the issue. (Only for Add Status Page Issue action)\n"
                    },
                    "statusPageId": {
                        "type": "integer",
                        "description": "The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "The subject of the email\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the ticket. (Only for Jira Create Ticket action)\n"
                    },
                    "tos": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The email addresses to which the email is to be sent\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to be called\n"
                    },
                    "webhookId": {
                        "type": "string",
                        "description": "The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the workflow to which this action belongs\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:index/workflowActionOrdering:WorkflowActionOrdering": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.Workflow;\nimport com.pulumi.squadcast.WorkflowArgs;\nimport com.pulumi.squadcast.inputs.WorkflowFiltersArgs;\nimport com.pulumi.squadcast.inputs.WorkflowEntityOwnerArgs;\nimport com.pulumi.squadcast.inputs.WorkflowTagArgs;\nimport com.pulumi.squadcast.WorkflowAction;\nimport com.pulumi.squadcast.WorkflowActionArgs;\nimport com.pulumi.squadcast.inputs.WorkflowActionChannelArgs;\nimport com.pulumi.squadcast.WorkflowActionOrdering;\nimport com.pulumi.squadcast.WorkflowActionOrderingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        var exampleWorkflow = new Workflow(\"exampleWorkflow\", WorkflowArgs.builder()\n            .title(\"test workflow\")\n            .description(\"Test workflow description\")\n            .ownerId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .enabled(true)\n            .trigger(\"incident_triggered\")\n            .filters(WorkflowFiltersArgs.builder()\n                .fields(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                .type(\"priority_is\")\n                .build())\n            .entityOwners(WorkflowEntityOwnerArgs.builder()\n                .type(\"user\")\n                .id(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                .build())\n            .tags(WorkflowTagArgs.builder()\n                .key(\"tagKey\")\n                .value(\"tagValue\")\n                .color(\"#000000\")\n                .build())\n            .build());\n\n        var exampleWorkflow1 = new WorkflowAction(\"exampleWorkflow1\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .autoName(false)\n            .channelName(\"enter-channel-name\")\n            .build());\n\n        var exampleWorkflow2 = new WorkflowAction(\"exampleWorkflow2\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .build());\n\n        var exampleWorkflow3 = new WorkflowAction(\"exampleWorkflow3\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .priority(\"P2\")\n            .build());\n\n        var exampleWorkflow4 = new WorkflowAction(\"exampleWorkflow4\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .channels(WorkflowActionChannelArgs.builder()\n                .type(\"chat_room\")\n                .link(\"https://chat.squadcast.com/room/123456\")\n                .displayText(\"enter your display text here\")\n                .build())\n            .build());\n\n        var exampleWorkflow5 = new WorkflowAction(\"exampleWorkflow5\", WorkflowActionArgs.builder()\n            .workflowId(squadcast_workflow.testing_workflows().id())\n            .slo(\"2119\")\n            .slis(\"errors\")\n            .build());\n\n        var def = new WorkflowActionOrdering(\"def\", WorkflowActionOrderingArgs.builder()\n            .workflowId(exampleWorkflow.id())\n            .actionOrders(            \n                exampleWorkflow5.id(),\n                exampleWorkflow3.id(),\n                exampleWorkflow4.id(),\n                exampleWorkflow1.id(),\n                exampleWorkflow2.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleWorkflow:\n    type: squadcast:Workflow\n    properties:\n      title: test workflow\n      description: Test workflow description\n      ownerId: ${exampleTeam.id}\n      enabled: true\n      trigger: incident_triggered\n      filters:\n        fields:\n          - value: P1\n        type: priority_is\n      entityOwners:\n        - type: user\n          id: ${exampleUser.id}\n      tags:\n        - key: tagKey\n          value: tagValue\n          color: '#000000'\n  exampleWorkflow1:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n      autoName: false\n      channelName: enter-channel-name\n  exampleWorkflow2:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n  exampleWorkflow3:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n      priority: P2\n  exampleWorkflow4:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n      channels:\n        - type: chat_room\n          link: https://chat.squadcast.com/room/123456\n          displayText: enter your display text here\n  exampleWorkflow5:\n    type: squadcast:WorkflowAction\n    properties:\n      workflowId: ${squadcast_workflow.testing_workflows.id}\n      slo: '2119'\n      slis:\n        - errors\n  def:\n    type: squadcast:WorkflowActionOrdering\n    properties:\n      workflowId: ${exampleWorkflow.id}\n      actionOrders:\n        - ${exampleWorkflow5.id}\n        - ${exampleWorkflow3.id}\n        - ${exampleWorkflow4.id}\n        - ${exampleWorkflow1.id}\n        - ${exampleWorkflow2.id}\nvariables:\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "actionOrders": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The order of actions in the workflow\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the workflow\n"
                }
            },
            "required": [
                "actionOrders",
                "workflowId"
            ],
            "inputProperties": {
                "actionOrders": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The order of actions in the workflow\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the workflow\n"
                }
            },
            "requiredInputs": [
                "actionOrders",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowActionOrdering resources.\n",
                "properties": {
                    "actionOrders": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The order of actions in the workflow\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "squadcast:routing/rules:Rules": {
            "description": "[Routing rules](https://support.squadcast.com/docs/alert-routing) allows you to ensure that alerts are routed to the right responder with the help of `event tags` attached to them.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example team name\",\n});\nconst exampleUser = squadcast.getUser({\n    email: \"test@example.com\",\n});\nconst exampleService = exampleTeam.then(exampleTeam =\u003e squadcast.getService({\n    name: \"example service name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleEscalaionPolicy = exampleTeam.then(exampleTeam =\u003e squadcast.getEscalationPolicy({\n    name: \"example escalation policy name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleSquad = exampleTeam.then(exampleTeam =\u003e squadcast.getSquad({\n    name: \"example squad name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleRoutingRules = new squadcast.routing.Rules(\"exampleRoutingRules\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    rules: [\n        {\n            isBasic: false,\n            expression: \"payload[\\\"event_id\\\"] == 40\",\n            routeToId: exampleEscalaionPolicy.then(exampleEscalaionPolicy =\u003e exampleEscalaionPolicy.id),\n            routeToType: \"escalationpolicy\",\n        },\n        {\n            isBasic: true,\n            basicExpressions: [{\n                lhs: \"payload[\\\"foo\\\"]\",\n                rhs: \"bar\",\n            }],\n            routeToId: exampleUser.then(exampleUser =\u003e exampleUser.id),\n            routeToType: \"user\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example team name\")\nexample_user = squadcast.get_user(email=\"test@example.com\")\nexample_service = squadcast.get_service(name=\"example service name\",\n    team_id=example_team.id)\nexample_escalaion_policy = squadcast.get_escalation_policy(name=\"example escalation policy name\",\n    team_id=example_team.id)\nexample_squad = squadcast.get_squad(name=\"example squad name\",\n    team_id=example_team.id)\nexample_routing_rules = squadcast.routing.Rules(\"exampleRoutingRules\",\n    team_id=example_team.id,\n    service_id=example_service.id,\n    rules=[\n        squadcast.routing.RulesRuleArgs(\n            is_basic=False,\n            expression=\"payload[\\\"event_id\\\"] == 40\",\n            route_to_id=example_escalaion_policy.id,\n            route_to_type=\"escalationpolicy\",\n        ),\n        squadcast.routing.RulesRuleArgs(\n            is_basic=True,\n            basic_expressions=[squadcast.routing.RulesRuleBasicExpressionArgs(\n                lhs=\"payload[\\\"foo\\\"]\",\n                rhs=\"bar\",\n            )],\n            route_to_id=example_user.id,\n            route_to_type=\"user\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example team name\",\n    });\n\n    var exampleUser = Squadcast.GetUser.Invoke(new()\n    {\n        Email = \"test@example.com\",\n    });\n\n    var exampleService = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"example service name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleEscalaionPolicy = Squadcast.GetEscalationPolicy.Invoke(new()\n    {\n        Name = \"example escalation policy name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleSquad = Squadcast.GetSquad.Invoke(new()\n    {\n        Name = \"example squad name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleRoutingRules = new Squadcast.Routing.Rules(\"exampleRoutingRules\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        RoutingRules = new[]\n        {\n            new Squadcast.Routing.Inputs.RulesRuleArgs\n            {\n                IsBasic = false,\n                Expression = \"payload[\\\"event_id\\\"] == 40\",\n                RouteToId = exampleEscalaionPolicy.Apply(getEscalationPolicyResult =\u003e getEscalationPolicyResult.Id),\n                RouteToType = \"escalationpolicy\",\n            },\n            new Squadcast.Routing.Inputs.RulesRuleArgs\n            {\n                IsBasic = true,\n                BasicExpressions = new[]\n                {\n                    new Squadcast.Routing.Inputs.RulesRuleBasicExpressionArgs\n                    {\n                        Lhs = \"payload[\\\"foo\\\"]\",\n                        Rhs = \"bar\",\n                    },\n                },\n                RouteToId = exampleUser.Apply(getUserResult =\u003e getUserResult.Id),\n                RouteToType = \"user\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/routing\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleUser, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: \"test@example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"example service name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleEscalaionPolicy, err := squadcast.LookupEscalationPolicy(ctx, \u0026squadcast.LookupEscalationPolicyArgs{\n\t\t\tName:   \"example escalation policy name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = squadcast.LookupSquad(ctx, \u0026squadcast.LookupSquadArgs{\n\t\t\tName:   \"example squad name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = routing.NewRules(ctx, \"exampleRoutingRules\", \u0026routing.RulesArgs{\n\t\t\tTeamId:    pulumi.String(exampleTeam.Id),\n\t\t\tServiceId: pulumi.String(exampleService.Id),\n\t\t\tRules: routing.RulesRuleArray{\n\t\t\t\t\u0026routing.RulesRuleArgs{\n\t\t\t\t\tIsBasic:     pulumi.Bool(false),\n\t\t\t\t\tExpression:  pulumi.String(\"payload[\\\"event_id\\\"] == 40\"),\n\t\t\t\t\tRouteToId:   pulumi.String(exampleEscalaionPolicy.Id),\n\t\t\t\t\tRouteToType: pulumi.String(\"escalationpolicy\"),\n\t\t\t\t},\n\t\t\t\t\u0026routing.RulesRuleArgs{\n\t\t\t\t\tIsBasic: pulumi.Bool(true),\n\t\t\t\t\tBasicExpressions: routing.RulesRuleBasicExpressionArray{\n\t\t\t\t\t\t\u0026routing.RulesRuleBasicExpressionArgs{\n\t\t\t\t\t\t\tLhs: pulumi.String(\"payload[\\\"foo\\\"]\"),\n\t\t\t\t\t\t\tRhs: pulumi.String(\"bar\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tRouteToId:   pulumi.String(exampleUser.Id),\n\t\t\t\t\tRouteToType: pulumi.String(\"user\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.inputs.GetEscalationPolicyArgs;\nimport com.pulumi.squadcast.inputs.GetSquadArgs;\nimport com.pulumi.squadcast.routing.Rules;\nimport com.pulumi.squadcast.routing.RulesArgs;\nimport com.pulumi.squadcast.routing.inputs.RulesRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example team name\")\n            .build());\n\n        final var exampleUser = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(\"test@example.com\")\n            .build());\n\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"example service name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        final var exampleEscalaionPolicy = SquadcastFunctions.getEscalationPolicy(GetEscalationPolicyArgs.builder()\n            .name(\"example escalation policy name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        final var exampleSquad = SquadcastFunctions.getSquad(GetSquadArgs.builder()\n            .name(\"example squad name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleRoutingRules = new Rules(\"exampleRoutingRules\", RulesArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .rules(            \n                RulesRuleArgs.builder()\n                    .isBasic(false)\n                    .expression(\"payload[\\\"event_id\\\"] == 40\")\n                    .routeToId(exampleEscalaionPolicy.applyValue(getEscalationPolicyResult -\u003e getEscalationPolicyResult.id()))\n                    .routeToType(\"escalationpolicy\")\n                    .build(),\n                RulesRuleArgs.builder()\n                    .isBasic(true)\n                    .basicExpressions(RulesRuleBasicExpressionArgs.builder()\n                        .lhs(\"payload[\\\"foo\\\"]\")\n                        .rhs(\"bar\")\n                        .build())\n                    .routeToId(exampleUser.applyValue(getUserResult -\u003e getUserResult.id()))\n                    .routeToType(\"user\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleRoutingRules:\n    type: squadcast:routing:Rules\n    properties:\n      teamId: ${exampleTeam.id}\n      serviceId: ${exampleService.id}\n      rules:\n        - isBasic: false\n          expression: payload[\"event_id\"] == 40\n          routeToId: ${exampleEscalaionPolicy.id}\n          routeToType: escalationpolicy\n        - isBasic: true\n          basicExpressions:\n            - lhs: payload[\"foo\"]\n              rhs: bar\n          routeToId: ${exampleUser.id}\n          routeToType: user\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example team name\n  exampleUser:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: test@example.com\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: example service name\n        teamId: ${exampleTeam.id}\n  exampleEscalaionPolicy:\n    fn::invoke:\n      Function: squadcast:getEscalationPolicy\n      Arguments:\n        name: example escalation policy name\n        teamId: ${exampleTeam.id}\n  exampleSquad:\n    fn::invoke:\n      Function: squadcast:getSquad\n      Arguments:\n        name: example squad name\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:serviceID\n\nUse 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively \n\n```sh\n$ pulumi import squadcast:routing/rules:Rules test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5\n```\n\n",
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:routing/RulesRule:RulesRule"
                    },
                    "language": {
                        "csharp": {
                            "name": "RoutingRules"
                        }
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                }
            },
            "required": [
                "rules",
                "serviceId",
                "teamId"
            ],
            "inputProperties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:routing/RulesRule:RulesRule"
                    },
                    "language": {
                        "csharp": {
                            "name": "RoutingRules"
                        }
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n",
                    "willReplaceOnChanges": true
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "rules",
                "serviceId",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rules resources.\n",
                "properties": {
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:routing/RulesRule:RulesRule"
                        },
                        "language": {
                            "csharp": {
                                "name": "RoutingRules"
                            }
                        }
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "Service id.\n",
                        "willReplaceOnChanges": true
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "squadcast:suppression/rules:Rules": {
            "description": "[Suppression rules](https://support.squadcast.com/docs/alert-suppression) can help you avoid alert fatigue by suppressing notifications for non-actionable alerts.Squadcast will suppress the incidents that match any of the Suppression Rules you create for your Services. These incidents will go into the Suppressed state and you will not get any notifications for them\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"exammple team name\",\n});\nconst exampleService = exampleTeam.then(exampleTeam =\u003e squadcast.getService({\n    name: \"example service name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleSuppressionRules = new squadcast.suppression.Rules(\"exampleSuppressionRules\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    rules: [{\n        isBasic: false,\n        description: \"not basic\",\n        expression: \"payload[\\\"event_id\\\"] == 40\",\n    }],\n});\nconst exampleTimeBasedSuppressionRules = new squadcast.suppression.Rules(\"exampleTimeBasedSuppressionRules\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    rules: [{\n        isBasic: false,\n        description: \"not basic\",\n        expression: \"payload[\\\"event_id\\\"] == 40\",\n        timeslots: [{\n            timeZone: \"Asia/Calcutta\",\n            startTime: \"2022-04-08T06:22:14.975Z\",\n            endTime: \"2022-04-28T06:22:14.975Z\",\n            endsOn: \"2022-04-28T06:22:14.975Z\",\n            repetition: \"none\",\n            isAllday: false,\n            endsNever: true,\n        }],\n    }],\n});\nconst exampleTimeBasedSuppressionRulesCustomRepetition = new squadcast.suppression.Rules(\"exampleTimeBasedSuppressionRulesCustomRepetition\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    rules: [{\n        isBasic: false,\n        description: \"not basic\",\n        expression: \"payload[\\\"event_id\\\"] == 40\",\n        timeslots: [\n            {\n                timeZone: \"Asia/Calcutta\",\n                startTime: \"2022-04-08T06:22:14.975Z\",\n                endTime: \"2022-04-28T06:22:14.975Z\",\n                endsOn: \"2022-04-28T06:22:14.975Z\",\n                repetition: \"custom\",\n                isAllday: false,\n                endsNever: true,\n                customs: [{\n                    repeats: \"day\",\n                    repeatsCount: 2,\n                }],\n            },\n            {\n                timeZone: \"Asia/Calcutta\",\n                startTime: \"2022-04-08T06:22:14.975Z\",\n                endTime: \"2022-04-28T06:22:14.975Z\",\n                endsOn: \"2022-04-28T06:22:14.975Z\",\n                repetition: \"custom\",\n                isAllday: false,\n                endsNever: true,\n                customs: [{\n                    repeats: \"week\",\n                    repeatsCount: 4,\n                    repeatsOnWeekdays: [\n                        0,\n                        1,\n                        2,\n                        3,\n                    ],\n                }],\n            },\n            {\n                timeZone: \"Asia/Calcutta\",\n                startTime: \"2022-04-08T06:22:14.975Z\",\n                endTime: \"2022-04-28T06:22:14.975Z\",\n                endsOn: \"2022-04-28T06:22:14.975Z\",\n                repetition: \"custom\",\n                isAllday: false,\n                endsNever: true,\n                customs: [{\n                    repeats: \"month\",\n                    repeatsCount: 6,\n                }],\n            },\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"exammple team name\")\nexample_service = squadcast.get_service(name=\"example service name\",\n    team_id=example_team.id)\nexample_suppression_rules = squadcast.suppression.Rules(\"exampleSuppressionRules\",\n    team_id=example_team.id,\n    service_id=example_service.id,\n    rules=[squadcast.suppression.RulesRuleArgs(\n        is_basic=False,\n        description=\"not basic\",\n        expression=\"payload[\\\"event_id\\\"] == 40\",\n    )])\nexample_time_based_suppression_rules = squadcast.suppression.Rules(\"exampleTimeBasedSuppressionRules\",\n    team_id=example_team.id,\n    service_id=example_service.id,\n    rules=[squadcast.suppression.RulesRuleArgs(\n        is_basic=False,\n        description=\"not basic\",\n        expression=\"payload[\\\"event_id\\\"] == 40\",\n        timeslots=[squadcast.suppression.RulesRuleTimeslotArgs(\n            time_zone=\"Asia/Calcutta\",\n            start_time=\"2022-04-08T06:22:14.975Z\",\n            end_time=\"2022-04-28T06:22:14.975Z\",\n            ends_on=\"2022-04-28T06:22:14.975Z\",\n            repetition=\"none\",\n            is_allday=False,\n            ends_never=True,\n        )],\n    )])\nexample_time_based_suppression_rules_custom_repetition = squadcast.suppression.Rules(\"exampleTimeBasedSuppressionRulesCustomRepetition\",\n    team_id=example_team.id,\n    service_id=example_service.id,\n    rules=[squadcast.suppression.RulesRuleArgs(\n        is_basic=False,\n        description=\"not basic\",\n        expression=\"payload[\\\"event_id\\\"] == 40\",\n        timeslots=[\n            squadcast.suppression.RulesRuleTimeslotArgs(\n                time_zone=\"Asia/Calcutta\",\n                start_time=\"2022-04-08T06:22:14.975Z\",\n                end_time=\"2022-04-28T06:22:14.975Z\",\n                ends_on=\"2022-04-28T06:22:14.975Z\",\n                repetition=\"custom\",\n                is_allday=False,\n                ends_never=True,\n                customs=[squadcast.suppression.RulesRuleTimeslotCustomArgs(\n                    repeats=\"day\",\n                    repeats_count=2,\n                )],\n            ),\n            squadcast.suppression.RulesRuleTimeslotArgs(\n                time_zone=\"Asia/Calcutta\",\n                start_time=\"2022-04-08T06:22:14.975Z\",\n                end_time=\"2022-04-28T06:22:14.975Z\",\n                ends_on=\"2022-04-28T06:22:14.975Z\",\n                repetition=\"custom\",\n                is_allday=False,\n                ends_never=True,\n                customs=[squadcast.suppression.RulesRuleTimeslotCustomArgs(\n                    repeats=\"week\",\n                    repeats_count=4,\n                    repeats_on_weekdays=[\n                        0,\n                        1,\n                        2,\n                        3,\n                    ],\n                )],\n            ),\n            squadcast.suppression.RulesRuleTimeslotArgs(\n                time_zone=\"Asia/Calcutta\",\n                start_time=\"2022-04-08T06:22:14.975Z\",\n                end_time=\"2022-04-28T06:22:14.975Z\",\n                ends_on=\"2022-04-28T06:22:14.975Z\",\n                repetition=\"custom\",\n                is_allday=False,\n                ends_never=True,\n                customs=[squadcast.suppression.RulesRuleTimeslotCustomArgs(\n                    repeats=\"month\",\n                    repeats_count=6,\n                )],\n            ),\n        ],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"exammple team name\",\n    });\n\n    var exampleService = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"example service name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleSuppressionRules = new Squadcast.Suppression.Rules(\"exampleSuppressionRules\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        SuppressionRules = new[]\n        {\n            new Squadcast.Suppression.Inputs.RulesRuleArgs\n            {\n                IsBasic = false,\n                Description = \"not basic\",\n                Expression = \"payload[\\\"event_id\\\"] == 40\",\n            },\n        },\n    });\n\n    var exampleTimeBasedSuppressionRules = new Squadcast.Suppression.Rules(\"exampleTimeBasedSuppressionRules\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        SuppressionRules = new[]\n        {\n            new Squadcast.Suppression.Inputs.RulesRuleArgs\n            {\n                IsBasic = false,\n                Description = \"not basic\",\n                Expression = \"payload[\\\"event_id\\\"] == 40\",\n                Timeslots = new[]\n                {\n                    new Squadcast.Suppression.Inputs.RulesRuleTimeslotArgs\n                    {\n                        TimeZone = \"Asia/Calcutta\",\n                        StartTime = \"2022-04-08T06:22:14.975Z\",\n                        EndTime = \"2022-04-28T06:22:14.975Z\",\n                        EndsOn = \"2022-04-28T06:22:14.975Z\",\n                        Repetition = \"none\",\n                        IsAllday = false,\n                        EndsNever = true,\n                    },\n                },\n            },\n        },\n    });\n\n    var exampleTimeBasedSuppressionRulesCustomRepetition = new Squadcast.Suppression.Rules(\"exampleTimeBasedSuppressionRulesCustomRepetition\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        SuppressionRules = new[]\n        {\n            new Squadcast.Suppression.Inputs.RulesRuleArgs\n            {\n                IsBasic = false,\n                Description = \"not basic\",\n                Expression = \"payload[\\\"event_id\\\"] == 40\",\n                Timeslots = new[]\n                {\n                    new Squadcast.Suppression.Inputs.RulesRuleTimeslotArgs\n                    {\n                        TimeZone = \"Asia/Calcutta\",\n                        StartTime = \"2022-04-08T06:22:14.975Z\",\n                        EndTime = \"2022-04-28T06:22:14.975Z\",\n                        EndsOn = \"2022-04-28T06:22:14.975Z\",\n                        Repetition = \"custom\",\n                        IsAllday = false,\n                        EndsNever = true,\n                        Customs = new[]\n                        {\n                            new Squadcast.Suppression.Inputs.RulesRuleTimeslotCustomArgs\n                            {\n                                Repeats = \"day\",\n                                RepeatsCount = 2,\n                            },\n                        },\n                    },\n                    new Squadcast.Suppression.Inputs.RulesRuleTimeslotArgs\n                    {\n                        TimeZone = \"Asia/Calcutta\",\n                        StartTime = \"2022-04-08T06:22:14.975Z\",\n                        EndTime = \"2022-04-28T06:22:14.975Z\",\n                        EndsOn = \"2022-04-28T06:22:14.975Z\",\n                        Repetition = \"custom\",\n                        IsAllday = false,\n                        EndsNever = true,\n                        Customs = new[]\n                        {\n                            new Squadcast.Suppression.Inputs.RulesRuleTimeslotCustomArgs\n                            {\n                                Repeats = \"week\",\n                                RepeatsCount = 4,\n                                RepeatsOnWeekdays = new[]\n                                {\n                                    0,\n                                    1,\n                                    2,\n                                    3,\n                                },\n                            },\n                        },\n                    },\n                    new Squadcast.Suppression.Inputs.RulesRuleTimeslotArgs\n                    {\n                        TimeZone = \"Asia/Calcutta\",\n                        StartTime = \"2022-04-08T06:22:14.975Z\",\n                        EndTime = \"2022-04-28T06:22:14.975Z\",\n                        EndsOn = \"2022-04-28T06:22:14.975Z\",\n                        Repetition = \"custom\",\n                        IsAllday = false,\n                        EndsNever = true,\n                        Customs = new[]\n                        {\n                            new Squadcast.Suppression.Inputs.RulesRuleTimeslotCustomArgs\n                            {\n                                Repeats = \"month\",\n                                RepeatsCount = 6,\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/suppression\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"exammple team name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"example service name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = suppression.NewRules(ctx, \"exampleSuppressionRules\", \u0026suppression.RulesArgs{\n\t\t\tTeamId:    pulumi.String(exampleTeam.Id),\n\t\t\tServiceId: pulumi.String(exampleService.Id),\n\t\t\tRules: suppression.RulesRuleArray{\n\t\t\t\t\u0026suppression.RulesRuleArgs{\n\t\t\t\t\tIsBasic:     pulumi.Bool(false),\n\t\t\t\t\tDescription: pulumi.String(\"not basic\"),\n\t\t\t\t\tExpression:  pulumi.String(\"payload[\\\"event_id\\\"] == 40\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = suppression.NewRules(ctx, \"exampleTimeBasedSuppressionRules\", \u0026suppression.RulesArgs{\n\t\t\tTeamId:    pulumi.String(exampleTeam.Id),\n\t\t\tServiceId: pulumi.String(exampleService.Id),\n\t\t\tRules: suppression.RulesRuleArray{\n\t\t\t\t\u0026suppression.RulesRuleArgs{\n\t\t\t\t\tIsBasic:     pulumi.Bool(false),\n\t\t\t\t\tDescription: pulumi.String(\"not basic\"),\n\t\t\t\t\tExpression:  pulumi.String(\"payload[\\\"event_id\\\"] == 40\"),\n\t\t\t\t\tTimeslots: suppression.RulesRuleTimeslotArray{\n\t\t\t\t\t\t\u0026suppression.RulesRuleTimeslotArgs{\n\t\t\t\t\t\t\tTimeZone:   pulumi.String(\"Asia/Calcutta\"),\n\t\t\t\t\t\t\tStartTime:  pulumi.String(\"2022-04-08T06:22:14.975Z\"),\n\t\t\t\t\t\t\tEndTime:    pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\t\t\tEndsOn:     pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\t\t\tRepetition: pulumi.String(\"none\"),\n\t\t\t\t\t\t\tIsAllday:   pulumi.Bool(false),\n\t\t\t\t\t\t\tEndsNever:  pulumi.Bool(true),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = suppression.NewRules(ctx, \"exampleTimeBasedSuppressionRulesCustomRepetition\", \u0026suppression.RulesArgs{\n\t\t\tTeamId:    pulumi.String(exampleTeam.Id),\n\t\t\tServiceId: pulumi.String(exampleService.Id),\n\t\t\tRules: suppression.RulesRuleArray{\n\t\t\t\t\u0026suppression.RulesRuleArgs{\n\t\t\t\t\tIsBasic:     pulumi.Bool(false),\n\t\t\t\t\tDescription: pulumi.String(\"not basic\"),\n\t\t\t\t\tExpression:  pulumi.String(\"payload[\\\"event_id\\\"] == 40\"),\n\t\t\t\t\tTimeslots: suppression.RulesRuleTimeslotArray{\n\t\t\t\t\t\t\u0026suppression.RulesRuleTimeslotArgs{\n\t\t\t\t\t\t\tTimeZone:   pulumi.String(\"Asia/Calcutta\"),\n\t\t\t\t\t\t\tStartTime:  pulumi.String(\"2022-04-08T06:22:14.975Z\"),\n\t\t\t\t\t\t\tEndTime:    pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\t\t\tEndsOn:     pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\t\t\tRepetition: pulumi.String(\"custom\"),\n\t\t\t\t\t\t\tIsAllday:   pulumi.Bool(false),\n\t\t\t\t\t\t\tEndsNever:  pulumi.Bool(true),\n\t\t\t\t\t\t\tCustoms: suppression.RulesRuleTimeslotCustomArray{\n\t\t\t\t\t\t\t\t\u0026suppression.RulesRuleTimeslotCustomArgs{\n\t\t\t\t\t\t\t\t\tRepeats:      pulumi.String(\"day\"),\n\t\t\t\t\t\t\t\t\tRepeatsCount: pulumi.Int(2),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026suppression.RulesRuleTimeslotArgs{\n\t\t\t\t\t\t\tTimeZone:   pulumi.String(\"Asia/Calcutta\"),\n\t\t\t\t\t\t\tStartTime:  pulumi.String(\"2022-04-08T06:22:14.975Z\"),\n\t\t\t\t\t\t\tEndTime:    pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\t\t\tEndsOn:     pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\t\t\tRepetition: pulumi.String(\"custom\"),\n\t\t\t\t\t\t\tIsAllday:   pulumi.Bool(false),\n\t\t\t\t\t\t\tEndsNever:  pulumi.Bool(true),\n\t\t\t\t\t\t\tCustoms: suppression.RulesRuleTimeslotCustomArray{\n\t\t\t\t\t\t\t\t\u0026suppression.RulesRuleTimeslotCustomArgs{\n\t\t\t\t\t\t\t\t\tRepeats:      pulumi.String(\"week\"),\n\t\t\t\t\t\t\t\t\tRepeatsCount: pulumi.Int(4),\n\t\t\t\t\t\t\t\t\tRepeatsOnWeekdays: pulumi.IntArray{\n\t\t\t\t\t\t\t\t\t\tpulumi.Int(0),\n\t\t\t\t\t\t\t\t\t\tpulumi.Int(1),\n\t\t\t\t\t\t\t\t\t\tpulumi.Int(2),\n\t\t\t\t\t\t\t\t\t\tpulumi.Int(3),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026suppression.RulesRuleTimeslotArgs{\n\t\t\t\t\t\t\tTimeZone:   pulumi.String(\"Asia/Calcutta\"),\n\t\t\t\t\t\t\tStartTime:  pulumi.String(\"2022-04-08T06:22:14.975Z\"),\n\t\t\t\t\t\t\tEndTime:    pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\t\t\tEndsOn:     pulumi.String(\"2022-04-28T06:22:14.975Z\"),\n\t\t\t\t\t\t\tRepetition: pulumi.String(\"custom\"),\n\t\t\t\t\t\t\tIsAllday:   pulumi.Bool(false),\n\t\t\t\t\t\t\tEndsNever:  pulumi.Bool(true),\n\t\t\t\t\t\t\tCustoms: suppression.RulesRuleTimeslotCustomArray{\n\t\t\t\t\t\t\t\t\u0026suppression.RulesRuleTimeslotCustomArgs{\n\t\t\t\t\t\t\t\t\tRepeats:      pulumi.String(\"month\"),\n\t\t\t\t\t\t\t\t\tRepeatsCount: pulumi.Int(6),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.suppression.Rules;\nimport com.pulumi.squadcast.suppression.RulesArgs;\nimport com.pulumi.squadcast.suppression.inputs.RulesRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"exammple team name\")\n            .build());\n\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"example service name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleSuppressionRules = new Rules(\"exampleSuppressionRules\", RulesArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .rules(RulesRuleArgs.builder()\n                .isBasic(false)\n                .description(\"not basic\")\n                .expression(\"payload[\\\"event_id\\\"] == 40\")\n                .build())\n            .build());\n\n        var exampleTimeBasedSuppressionRules = new Rules(\"exampleTimeBasedSuppressionRules\", RulesArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .rules(RulesRuleArgs.builder()\n                .isBasic(false)\n                .description(\"not basic\")\n                .expression(\"payload[\\\"event_id\\\"] == 40\")\n                .timeslots(RulesRuleTimeslotArgs.builder()\n                    .timeZone(\"Asia/Calcutta\")\n                    .startTime(\"2022-04-08T06:22:14.975Z\")\n                    .endTime(\"2022-04-28T06:22:14.975Z\")\n                    .endsOn(\"2022-04-28T06:22:14.975Z\")\n                    .repetition(\"none\")\n                    .isAllday(false)\n                    .endsNever(true)\n                    .build())\n                .build())\n            .build());\n\n        var exampleTimeBasedSuppressionRulesCustomRepetition = new Rules(\"exampleTimeBasedSuppressionRulesCustomRepetition\", RulesArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .rules(RulesRuleArgs.builder()\n                .isBasic(false)\n                .description(\"not basic\")\n                .expression(\"payload[\\\"event_id\\\"] == 40\")\n                .timeslots(                \n                    RulesRuleTimeslotArgs.builder()\n                        .timeZone(\"Asia/Calcutta\")\n                        .startTime(\"2022-04-08T06:22:14.975Z\")\n                        .endTime(\"2022-04-28T06:22:14.975Z\")\n                        .endsOn(\"2022-04-28T06:22:14.975Z\")\n                        .repetition(\"custom\")\n                        .isAllday(false)\n                        .endsNever(true)\n                        .customs(RulesRuleTimeslotCustomArgs.builder()\n                            .repeats(\"day\")\n                            .repeatsCount(2)\n                            .build())\n                        .build(),\n                    RulesRuleTimeslotArgs.builder()\n                        .timeZone(\"Asia/Calcutta\")\n                        .startTime(\"2022-04-08T06:22:14.975Z\")\n                        .endTime(\"2022-04-28T06:22:14.975Z\")\n                        .endsOn(\"2022-04-28T06:22:14.975Z\")\n                        .repetition(\"custom\")\n                        .isAllday(false)\n                        .endsNever(true)\n                        .customs(RulesRuleTimeslotCustomArgs.builder()\n                            .repeats(\"week\")\n                            .repeatsCount(4)\n                            .repeatsOnWeekdays(                            \n                                0,\n                                1,\n                                2,\n                                3)\n                            .build())\n                        .build(),\n                    RulesRuleTimeslotArgs.builder()\n                        .timeZone(\"Asia/Calcutta\")\n                        .startTime(\"2022-04-08T06:22:14.975Z\")\n                        .endTime(\"2022-04-28T06:22:14.975Z\")\n                        .endsOn(\"2022-04-28T06:22:14.975Z\")\n                        .repetition(\"custom\")\n                        .isAllday(false)\n                        .endsNever(true)\n                        .customs(RulesRuleTimeslotCustomArgs.builder()\n                            .repeats(\"month\")\n                            .repeatsCount(6)\n                            .build())\n                        .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleSuppressionRules:\n    type: squadcast:suppression:Rules\n    properties:\n      teamId: ${exampleTeam.id}\n      serviceId: ${exampleService.id}\n      rules:\n        - isBasic: false\n          description: not basic\n          expression: payload[\"event_id\"] == 40\n  exampleTimeBasedSuppressionRules:\n    type: squadcast:suppression:Rules\n    properties:\n      teamId: ${exampleTeam.id}\n      serviceId: ${exampleService.id}\n      rules:\n        - isBasic: false\n          description: not basic\n          expression: payload[\"event_id\"] == 40\n          timeslots:\n            - timeZone: Asia/Calcutta\n              startTime: 2022-04-08T06:22:14.975Z\n              endTime: 2022-04-28T06:22:14.975Z\n              endsOn: 2022-04-28T06:22:14.975Z\n              repetition: none\n              isAllday: false\n              endsNever: true\n  exampleTimeBasedSuppressionRulesCustomRepetition:\n    type: squadcast:suppression:Rules\n    properties:\n      teamId: ${exampleTeam.id}\n      serviceId: ${exampleService.id}\n      rules:\n        - isBasic: false\n          description: not basic\n          expression: payload[\"event_id\"] == 40\n          timeslots:\n            - timeZone: Asia/Calcutta\n              startTime: 2022-04-08T06:22:14.975Z\n              endTime: 2022-04-28T06:22:14.975Z\n              endsOn: 2022-04-28T06:22:14.975Z\n              repetition: custom\n              isAllday: false\n              endsNever: true\n              customs:\n                - repeats: day\n                  repeatsCount: 2\n            - timeZone: Asia/Calcutta\n              startTime: 2022-04-08T06:22:14.975Z\n              endTime: 2022-04-28T06:22:14.975Z\n              endsOn: 2022-04-28T06:22:14.975Z\n              repetition: custom\n              isAllday: false\n              endsNever: true\n              customs:\n                - repeats: week\n                  repeatsCount: 4\n                  repeatsOnWeekdays:\n                    - 0\n                    - 1\n                    - 2\n                    - 3\n            - timeZone: Asia/Calcutta\n              startTime: 2022-04-08T06:22:14.975Z\n              endTime: 2022-04-28T06:22:14.975Z\n              endsOn: 2022-04-28T06:22:14.975Z\n              repetition: custom\n              isAllday: false\n              endsNever: true\n              customs:\n                - repeats: month\n                  repeatsCount: 6\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: exammple team name\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: example service name\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:serviceID\n\nUse 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively \n\n```sh\n$ pulumi import squadcast:suppression/rules:Rules test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5\n```\n\n",
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:suppression/RulesRule:RulesRule"
                    },
                    "language": {
                        "csharp": {
                            "name": "SuppressionRules"
                        }
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                }
            },
            "required": [
                "rules",
                "serviceId",
                "teamId"
            ],
            "inputProperties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:suppression/RulesRule:RulesRule"
                    },
                    "language": {
                        "csharp": {
                            "name": "SuppressionRules"
                        }
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n",
                    "willReplaceOnChanges": true
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "rules",
                "serviceId",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rules resources.\n",
                "properties": {
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:suppression/RulesRule:RulesRule"
                        },
                        "language": {
                            "csharp": {
                                "name": "SuppressionRules"
                            }
                        }
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "Service id.\n",
                        "willReplaceOnChanges": true
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "squadcast:tagging/rules:Rules": {
            "description": "[Tagging](https://support.squadcast.com/docs/event-tagging) is a rule-based, auto-tagging system with which you can define customised tags based on incident payloads, that get automatically assigned to incidents when they are triggered.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@irisdanded/pulumi-squadcast\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst exampleTeam = squadcast.getTeam({\n    name: \"example test name\",\n});\nconst exampleService = exampleTeam.then(exampleTeam =\u003e squadcast.getService({\n    name: \"example service name\",\n    teamId: exampleTeam.id,\n}));\nconst exampleTaggingRules = new squadcast.tagging.Rules(\"exampleTaggingRules\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    rules: [\n        {\n            isBasic: false,\n            expression: \"payload[\\\"event_id\\\"] == 40\",\n            tags: [{\n                key: \"MyTag\",\n                value: \"foo\",\n                color: \"#ababab\",\n            }],\n        },\n        {\n            isBasic: true,\n            basicExpressions: [{\n                lhs: \"payload[\\\"foo\\\"]\",\n                op: \"is\",\n                rhs: \"bar\",\n            }],\n            tags: [\n                {\n                    key: \"MyTag\",\n                    value: \"foo\",\n                    color: \"#ababab\",\n                },\n                {\n                    key: \"MyTag2\",\n                    value: \"bar\",\n                    color: \"#f0f0f0\",\n                },\n            ],\n        },\n    ],\n});\n// addTags must be set in expression when tags are not passed\nconst exampleTaggingRulesResourceWithouttags = new squadcast.tagging.Rules(\"exampleTaggingRulesResourceWithouttags\", {\n    teamId: exampleTeam.then(exampleTeam =\u003e exampleTeam.id),\n    serviceId: exampleService.then(exampleService =\u003e exampleService.id),\n    rules: [{\n        isBasic: false,\n        expression: \"addTag(\\\"EventType\\\", payload.details.event_type_key, \\\"#037916\\\")\",\n    }],\n});\n```\n```python\nimport pulumi\nimport irisdanded_squadcast_pulumi as squadcast\nimport pulumi_squadcast as squadcast\n\nexample_team = squadcast.get_team(name=\"example test name\")\nexample_service = squadcast.get_service(name=\"example service name\",\n    team_id=example_team.id)\nexample_tagging_rules = squadcast.tagging.Rules(\"exampleTaggingRules\",\n    team_id=example_team.id,\n    service_id=example_service.id,\n    rules=[\n        squadcast.tagging.RulesRuleArgs(\n            is_basic=False,\n            expression=\"payload[\\\"event_id\\\"] == 40\",\n            tags=[squadcast.tagging.RulesRuleTagArgs(\n                key=\"MyTag\",\n                value=\"foo\",\n                color=\"#ababab\",\n            )],\n        ),\n        squadcast.tagging.RulesRuleArgs(\n            is_basic=True,\n            basic_expressions=[squadcast.tagging.RulesRuleBasicExpressionArgs(\n                lhs=\"payload[\\\"foo\\\"]\",\n                op=\"is\",\n                rhs=\"bar\",\n            )],\n            tags=[\n                squadcast.tagging.RulesRuleTagArgs(\n                    key=\"MyTag\",\n                    value=\"foo\",\n                    color=\"#ababab\",\n                ),\n                squadcast.tagging.RulesRuleTagArgs(\n                    key=\"MyTag2\",\n                    value=\"bar\",\n                    color=\"#f0f0f0\",\n                ),\n            ],\n        ),\n    ])\n# addTags must be set in expression when tags are not passed\nexample_tagging_rules_resource_withouttags = squadcast.tagging.Rules(\"exampleTaggingRulesResourceWithouttags\",\n    team_id=example_team.id,\n    service_id=example_service.id,\n    rules=[squadcast.tagging.RulesRuleArgs(\n        is_basic=False,\n        expression=\"addTag(\\\"EventType\\\", payload.details.event_type_key, \\\"#037916\\\")\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = IrisDanded.Pulumi.Squadcast;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTeam = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"example test name\",\n    });\n\n    var exampleService = Squadcast.GetService.Invoke(new()\n    {\n        Name = \"example service name\",\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n    });\n\n    var exampleTaggingRules = new Squadcast.Tagging.Rules(\"exampleTaggingRules\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        TaggingRules = new[]\n        {\n            new Squadcast.Tagging.Inputs.RulesRuleArgs\n            {\n                IsBasic = false,\n                Expression = \"payload[\\\"event_id\\\"] == 40\",\n                Tags = new[]\n                {\n                    new Squadcast.Tagging.Inputs.RulesRuleTagArgs\n                    {\n                        Key = \"MyTag\",\n                        Value = \"foo\",\n                        Color = \"#ababab\",\n                    },\n                },\n            },\n            new Squadcast.Tagging.Inputs.RulesRuleArgs\n            {\n                IsBasic = true,\n                BasicExpressions = new[]\n                {\n                    new Squadcast.Tagging.Inputs.RulesRuleBasicExpressionArgs\n                    {\n                        Lhs = \"payload[\\\"foo\\\"]\",\n                        Op = \"is\",\n                        Rhs = \"bar\",\n                    },\n                },\n                Tags = new[]\n                {\n                    new Squadcast.Tagging.Inputs.RulesRuleTagArgs\n                    {\n                        Key = \"MyTag\",\n                        Value = \"foo\",\n                        Color = \"#ababab\",\n                    },\n                    new Squadcast.Tagging.Inputs.RulesRuleTagArgs\n                    {\n                        Key = \"MyTag2\",\n                        Value = \"bar\",\n                        Color = \"#f0f0f0\",\n                    },\n                },\n            },\n        },\n    });\n\n    // addTags must be set in expression when tags are not passed\n    var exampleTaggingRulesResourceWithouttags = new Squadcast.Tagging.Rules(\"exampleTaggingRulesResourceWithouttags\", new()\n    {\n        TeamId = exampleTeam.Apply(getTeamResult =\u003e getTeamResult.Id),\n        ServiceId = exampleService.Apply(getServiceResult =\u003e getServiceResult.Id),\n        TaggingRules = new[]\n        {\n            new Squadcast.Tagging.Inputs.RulesRuleArgs\n            {\n                IsBasic = false,\n                Expression = \"addTag(\\\"EventType\\\", payload.details.event_type_key, \\\"#037916\\\")\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/tagging\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTeam, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"example test name\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleService, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   \"example service name\",\n\t\t\tTeamId: exampleTeam.Id,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = tagging.NewRules(ctx, \"exampleTaggingRules\", \u0026tagging.RulesArgs{\n\t\t\tTeamId:    pulumi.String(exampleTeam.Id),\n\t\t\tServiceId: pulumi.String(exampleService.Id),\n\t\t\tRules: tagging.RulesRuleArray{\n\t\t\t\t\u0026tagging.RulesRuleArgs{\n\t\t\t\t\tIsBasic:    pulumi.Bool(false),\n\t\t\t\t\tExpression: pulumi.String(\"payload[\\\"event_id\\\"] == 40\"),\n\t\t\t\t\tTags: tagging.RulesRuleTagArray{\n\t\t\t\t\t\t\u0026tagging.RulesRuleTagArgs{\n\t\t\t\t\t\t\tKey:   pulumi.String(\"MyTag\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"foo\"),\n\t\t\t\t\t\t\tColor: pulumi.String(\"#ababab\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026tagging.RulesRuleArgs{\n\t\t\t\t\tIsBasic: pulumi.Bool(true),\n\t\t\t\t\tBasicExpressions: tagging.RulesRuleBasicExpressionArray{\n\t\t\t\t\t\t\u0026tagging.RulesRuleBasicExpressionArgs{\n\t\t\t\t\t\t\tLhs: pulumi.String(\"payload[\\\"foo\\\"]\"),\n\t\t\t\t\t\t\tOp:  pulumi.String(\"is\"),\n\t\t\t\t\t\t\tRhs: pulumi.String(\"bar\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tTags: tagging.RulesRuleTagArray{\n\t\t\t\t\t\t\u0026tagging.RulesRuleTagArgs{\n\t\t\t\t\t\t\tKey:   pulumi.String(\"MyTag\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"foo\"),\n\t\t\t\t\t\t\tColor: pulumi.String(\"#ababab\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026tagging.RulesRuleTagArgs{\n\t\t\t\t\t\t\tKey:   pulumi.String(\"MyTag2\"),\n\t\t\t\t\t\t\tValue: pulumi.String(\"bar\"),\n\t\t\t\t\t\t\tColor: pulumi.String(\"#f0f0f0\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// addTags must be set in expression when tags are not passed\n\t\t_, err = tagging.NewRules(ctx, \"exampleTaggingRulesResourceWithouttags\", \u0026tagging.RulesArgs{\n\t\t\tTeamId:    pulumi.String(exampleTeam.Id),\n\t\t\tServiceId: pulumi.String(exampleService.Id),\n\t\t\tRules: tagging.RulesRuleArray{\n\t\t\t\t\u0026tagging.RulesRuleArgs{\n\t\t\t\t\tIsBasic:    pulumi.Bool(false),\n\t\t\t\t\tExpression: pulumi.String(\"addTag(\\\"EventType\\\", payload.details.event_type_key, \\\"#037916\\\")\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport com.pulumi.squadcast.tagging.Rules;\nimport com.pulumi.squadcast.tagging.RulesArgs;\nimport com.pulumi.squadcast.tagging.inputs.RulesRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleTeam = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"example test name\")\n            .build());\n\n        final var exampleService = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(\"example service name\")\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .build());\n\n        var exampleTaggingRules = new Rules(\"exampleTaggingRules\", RulesArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .rules(            \n                RulesRuleArgs.builder()\n                    .isBasic(false)\n                    .expression(\"payload[\\\"event_id\\\"] == 40\")\n                    .tags(RulesRuleTagArgs.builder()\n                        .key(\"MyTag\")\n                        .value(\"foo\")\n                        .color(\"#ababab\")\n                        .build())\n                    .build(),\n                RulesRuleArgs.builder()\n                    .isBasic(true)\n                    .basicExpressions(RulesRuleBasicExpressionArgs.builder()\n                        .lhs(\"payload[\\\"foo\\\"]\")\n                        .op(\"is\")\n                        .rhs(\"bar\")\n                        .build())\n                    .tags(                    \n                        RulesRuleTagArgs.builder()\n                            .key(\"MyTag\")\n                            .value(\"foo\")\n                            .color(\"#ababab\")\n                            .build(),\n                        RulesRuleTagArgs.builder()\n                            .key(\"MyTag2\")\n                            .value(\"bar\")\n                            .color(\"#f0f0f0\")\n                            .build())\n                    .build())\n            .build());\n\n        // addTags must be set in expression when tags are not passed\n        var exampleTaggingRulesResourceWithouttags = new Rules(\"exampleTaggingRulesResourceWithouttags\", RulesArgs.builder()\n            .teamId(exampleTeam.applyValue(getTeamResult -\u003e getTeamResult.id()))\n            .serviceId(exampleService.applyValue(getServiceResult -\u003e getServiceResult.id()))\n            .rules(RulesRuleArgs.builder()\n                .isBasic(false)\n                .expression(\"addTag(\\\"EventType\\\", payload.details.event_type_key, \\\"#037916\\\")\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleTaggingRules:\n    type: squadcast:tagging:Rules\n    properties:\n      teamId: ${exampleTeam.id}\n      serviceId: ${exampleService.id}\n      rules:\n        - isBasic: false\n          expression: payload[\"event_id\"] == 40\n          tags:\n            - key: MyTag\n              value: foo\n              color: '#ababab'\n        - isBasic: true\n          basicExpressions:\n            - lhs: payload[\"foo\"]\n              op: is\n              rhs: bar\n          tags:\n            - key: MyTag\n              value: foo\n              color: '#ababab'\n            - key: MyTag2\n              value: bar\n              color: '#f0f0f0'\n  # addTags must be set in expression when tags are not passed\n  exampleTaggingRulesResourceWithouttags:\n    type: squadcast:tagging:Rules\n    properties:\n      teamId: ${exampleTeam.id}\n      serviceId: ${exampleService.id}\n      rules:\n        - isBasic: false\n          expression: addTag(\"EventType\", payload.details.event_type_key, \"#037916\")\nvariables:\n  exampleTeam:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: example test name\n  exampleService:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: example service name\n        teamId: ${exampleTeam.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nteamID:serviceID\n\nUse 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively \n\n```sh\n$ pulumi import squadcast:tagging/rules:Rules test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5\n```\n\n",
            "properties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:tagging/RulesRule:RulesRule"
                    },
                    "language": {
                        "csharp": {
                            "name": "TaggingRules"
                        }
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n"
                }
            },
            "required": [
                "rules",
                "serviceId",
                "teamId"
            ],
            "inputProperties": {
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/squadcast:tagging/RulesRule:RulesRule"
                    },
                    "language": {
                        "csharp": {
                            "name": "TaggingRules"
                        }
                    }
                },
                "serviceId": {
                    "type": "string",
                    "description": "Service id.\n",
                    "willReplaceOnChanges": true
                },
                "teamId": {
                    "type": "string",
                    "description": "Team id.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "rules",
                "serviceId",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rules resources.\n",
                "properties": {
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:tagging/RulesRule:RulesRule"
                        },
                        "language": {
                            "csharp": {
                                "name": "TaggingRules"
                            }
                        }
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "Service id.\n",
                        "willReplaceOnChanges": true
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "squadcast:index/getEscalationPolicy:getEscalationPolicy": {
            "description": "[Escalation Policies](https://support.squadcast.com/docs/escalation-policies) defines rules indicating when and how alerts will escalate to various Users, Squads and (or) Schedules within your Organization.Use this data source to get information about a specific escalation policy that you can use for other Squadcast resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst test = squadcast.getEscalationPolicy({\n    name: squadcast_escalation_policy.test.name,\n    teamId: \"team id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_squadcast as squadcast\n\ntest = squadcast.get_escalation_policy(name=squadcast_escalation_policy[\"test\"][\"name\"],\n    team_id=\"team id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Squadcast.GetEscalationPolicy.Invoke(new()\n    {\n        Name = squadcast_escalation_policy.Test.Name,\n        TeamId = \"team id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := squadcast.LookupEscalationPolicy(ctx, \u0026squadcast.LookupEscalationPolicyArgs{\n\t\t\tName:   squadcast_escalation_policy.Test.Name,\n\t\t\tTeamId: \"team id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetEscalationPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = SquadcastFunctions.getEscalationPolicy(GetEscalationPolicyArgs.builder()\n            .name(squadcast_escalation_policy.test().name())\n            .teamId(\"team id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: squadcast:getEscalationPolicy\n      Arguments:\n        name: ${squadcast_escalation_policy.test.name}\n        teamId: team id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEscalationPolicy.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Escalation Policy\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "teamId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEscalationPolicy.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Detailed description about the nature \u0026 purpose Escalation policy\n"
                    },
                    "entityOwners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getEscalationPolicyEntityOwner:getEscalationPolicyEntityOwner"
                        },
                        "description": "Escalation policy owner\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Escalation Policy id.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Escalation Policy\n"
                    },
                    "repeats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getEscalationPolicyRepeat:getEscalationPolicyRepeat"
                        },
                        "description": "You can choose to repeat the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getEscalationPolicyRule:getEscalationPolicyRule"
                        },
                        "description": "Rules will have the details of who to notify and when to notify and how to notify them.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "entityOwners",
                    "id",
                    "name",
                    "repeats",
                    "rules",
                    "teamId"
                ]
            }
        },
        "squadcast:index/getRunbook:getRunbook": {
            "description": "A Runbook is a compilation of routine procedures and operations that are documented for reference while working on a critical incident. Sometimes, it can also be referred to as a Playbook.Use this data source to get information about a specific Runbook that you can use for other Squadcast resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst test = squadcast.getRunbook({\n    name: squadcast_runbook.test.name,\n    teamId: \"team id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_squadcast as squadcast\n\ntest = squadcast.get_runbook(name=squadcast_runbook[\"test\"][\"name\"],\n    team_id=\"team id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Squadcast.GetRunbook.Invoke(new()\n    {\n        Name = squadcast_runbook.Test.Name,\n        TeamId = \"team id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := squadcast.LookupRunbook(ctx, \u0026squadcast.LookupRunbookArgs{\n\t\t\tName:   squadcast_runbook.Test.Name,\n\t\t\tTeamId: \"team id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetRunbookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = SquadcastFunctions.getRunbook(GetRunbookArgs.builder()\n            .name(squadcast_runbook.test().name())\n            .teamId(\"team id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: squadcast:getRunbook\n      Arguments:\n        name: ${squadcast_runbook.test.name}\n        teamId: team id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRunbook.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Runbook\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "teamId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRunbook.\n",
                "properties": {
                    "entityOwners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getRunbookEntityOwner:getRunbookEntityOwner"
                        },
                        "description": "Runbooks owner\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Runbook id.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Runbook\n"
                    },
                    "steps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getRunbookStep:getRunbookStep"
                        },
                        "description": "Step by Step instructions, you can add as many steps as you want, supports markdown formatting.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "entityOwners",
                    "id",
                    "name",
                    "steps",
                    "teamId"
                ]
            }
        },
        "squadcast:index/getSchedule:getSchedule": {
            "description": "[Squadcast schedules](https://support.squadcast.com/docs/schedules) are used to manage on-call scheduling \u0026 determine who will be notified when an incident is triggered. Use this data source to get information about a specific schedule that you can use for other Squadcast resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst test = squadcast.getSchedule({\n    name: squadcast_schedule.test.name,\n    teamId: \"team id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_squadcast as squadcast\n\ntest = squadcast.get_schedule(name=squadcast_schedule[\"test\"][\"name\"],\n    team_id=\"team id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Squadcast.GetSchedule.Invoke(new()\n    {\n        Name = squadcast_schedule.Test.Name,\n        TeamId = \"team id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := squadcast.LookupSchedule(ctx, \u0026squadcast.LookupScheduleArgs{\n\t\t\tName:   squadcast_schedule.Test.Name,\n\t\t\tTeamId: \"team id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetScheduleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = SquadcastFunctions.getSchedule(GetScheduleArgs.builder()\n            .name(squadcast_schedule.test().name())\n            .teamId(\"team id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: squadcast:getSchedule\n      Arguments:\n        name: ${squadcast_schedule.test.name}\n        teamId: team id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSchedule.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Schedule.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "teamId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSchedule.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Calendar color scheme for this schedule, hex values.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed description about the schedule.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Schedule id.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Schedule.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "description",
                    "id",
                    "name",
                    "teamId"
                ]
            }
        },
        "squadcast:index/getScheduleV2:getScheduleV2": {
            "description": "[Squadcast schedules v2](https://support.squadcast.com/schedules/schedules-new) are used to manage on-call scheduling \u0026 determine who will be notified when an incident is triggered. Use this data source to get information about a specific schedule that you can use for other Squadcast resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst test = squadcast.getScheduleV2({\n    name: squadcast_schedule_v2.test.name,\n    teamId: \"team_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_squadcast as squadcast\n\ntest = squadcast.get_schedule_v2(name=squadcast_schedule_v2[\"test\"][\"name\"],\n    team_id=\"team_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Squadcast.GetScheduleV2.Invoke(new()\n    {\n        Name = squadcast_schedule_v2.Test.Name,\n        TeamId = \"team_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := squadcast.LookupScheduleV2(ctx, \u0026squadcast.LookupScheduleV2Args{\n\t\t\tName:   squadcast_schedule_v2.Test.Name,\n\t\t\tTeamId: \"team_id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetScheduleV2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = SquadcastFunctions.getScheduleV2(GetScheduleV2Args.builder()\n            .name(squadcast_schedule_v2.test().name())\n            .teamId(\"team_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: squadcast:getScheduleV2\n      Arguments:\n        name: ${squadcast_schedule_v2.test.name}\n        teamId: team_id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getScheduleV2.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Schedule.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "teamId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getScheduleV2.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Detailed description about the schedule.\n"
                    },
                    "entityOwners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getScheduleV2EntityOwner:getScheduleV2EntityOwner"
                        },
                        "description": "Schedule owner.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Schedule id.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Schedule.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getScheduleV2Tag:getScheduleV2Tag"
                        },
                        "description": "Schedule tags.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "Timezone for the schedule.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "entityOwners",
                    "id",
                    "name",
                    "tags",
                    "teamId",
                    "timezone"
                ]
            }
        },
        "squadcast:index/getService:getService": {
            "description": "[Squadcast Services](https://support.squadcast.com/docs/adding-a-service-1) are the core components of your infrastructure/application for which alerts are generated. Services in Squadcast represent specific systems, applications, components, products, or teams for which an incident is created. To check out some of the best practices on creating Services in Squadcast, refer to the guide [here](https://www.squadcast.com/blog/how-to-configure-services-in-squadcast-best-practices-to-reduce-mttr).Use this data source to get information about a specific service.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst test = squadcast.getService({\n    name: squadcast_service.test.name,\n    teamId: \"team id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_squadcast as squadcast\n\ntest = squadcast.get_service(name=squadcast_service[\"test\"][\"name\"],\n    team_id=\"team id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Squadcast.GetService.Invoke(new()\n    {\n        Name = squadcast_service.Test.Name,\n        TeamId = \"team id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := squadcast.LookupService(ctx, \u0026squadcast.LookupServiceArgs{\n\t\t\tName:   squadcast_service.Test.Name,\n\t\t\tTeamId: \"team id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = SquadcastFunctions.getService(GetServiceArgs.builder()\n            .name(squadcast_service.test().name())\n            .teamId(\"team id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: squadcast:getService\n      Arguments:\n        name: ${squadcast_service.test.name}\n        teamId: team id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Service.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "teamId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "activeAlertSourceEndpoints": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Active alert source endpoints.\n"
                    },
                    "alertSourceEndpoints": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "All available alert source endpoints.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "Unique API key of the service\n"
                    },
                    "dependencies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "dependencies.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed description about the service.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email.\n"
                    },
                    "emailPrefix": {
                        "type": "string",
                        "description": "Email prefix.\n"
                    },
                    "escalationPolicyId": {
                        "type": "string",
                        "description": "Escalation policy id.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Service id.\n"
                    },
                    "maintainers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getServiceMaintainer:getServiceMaintainer"
                        },
                        "description": "Service owner\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Service.\n"
                    },
                    "slackChannelId": {
                        "type": "string",
                        "description": "Slack extension for the service. If set, specifies the ID of the Slack channel associated with the service. If this ID is set, it cannot be removed, but it can be changed to a different slack*channel*id.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getServiceTag:getServiceTag"
                        },
                        "description": "Service tags\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "activeAlertSourceEndpoints",
                    "alertSourceEndpoints",
                    "apiKey",
                    "dependencies",
                    "description",
                    "email",
                    "emailPrefix",
                    "escalationPolicyId",
                    "id",
                    "maintainers",
                    "name",
                    "slackChannelId",
                    "tags",
                    "teamId"
                ]
            }
        },
        "squadcast:index/getSquad:getSquad": {
            "description": "[Squads](https://support.squadcast.com/docs/squads) are smaller groups of members within Teams. Squads could correspond to groups of people that are responsible for specific projects within a Team.Use this data source to get information about a specific Squad.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst test = squadcast.getSquad({\n    name: \"test\",\n    teamId: \"team id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_squadcast as squadcast\n\ntest = squadcast.get_squad(name=\"test\",\n    team_id=\"team id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Squadcast.GetSquad.Invoke(new()\n    {\n        Name = \"test\",\n        TeamId = \"team id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := squadcast.LookupSquad(ctx, \u0026squadcast.LookupSquadArgs{\n\t\t\tName:   \"test\",\n\t\t\tTeamId: \"team id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetSquadArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = SquadcastFunctions.getSquad(GetSquadArgs.builder()\n            .name(\"test\")\n            .teamId(\"team id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: squadcast:getSquad\n      Arguments:\n        name: test\n        teamId: team id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSquad.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Squad.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "teamId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSquad.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Squad id.\n"
                    },
                    "memberIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Squad.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "memberIds",
                    "name",
                    "teamId"
                ]
            }
        },
        "squadcast:index/getTeam:getTeam": {
            "description": "Teams is a way for customers to represent their organizational structure in Squadcast. Each Team can be considered as an isolated workspace with their own configurations and permissions.Use this data source to get information about a specific Team.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst test = squadcast.getTeam({\n    name: \"Default Team\",\n});\n```\n```python\nimport pulumi\nimport pulumi_squadcast as squadcast\n\ntest = squadcast.get_team(name=\"Default Team\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Squadcast.GetTeam.Invoke(new()\n    {\n        Name = \"Default Team\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := squadcast.LookupTeam(ctx, \u0026squadcast.LookupTeamArgs{\n\t\t\tName: \"Default Team\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = SquadcastFunctions.getTeam(GetTeamArgs.builder()\n            .name(\"Default Team\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: squadcast:getTeam\n      Arguments:\n        name: Default Team\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Team.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "Squadcast has one default team and this field let's us know if this is the default team.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Detailed description about the Team.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Team id.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getTeamMember:getTeamMember"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Team.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getTeamRole:getTeamRole"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "default",
                    "description",
                    "id",
                    "members",
                    "name",
                    "roles"
                ]
            }
        },
        "squadcast:index/getTeamRole:getTeamRole": {
            "description": "Team roles are a way to define abilities/permissions for a user in the team. Each team role can be considered as a set of permissions that can be assigned to a user. Use this data source to get information about various team roles.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst test = squadcast.getTeamRole({\n    name: \"testRole\",\n    teamId: \"team id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_squadcast as squadcast\n\ntest = squadcast.get_team_role(name=\"testRole\",\n    team_id=\"team id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Squadcast.GetTeamRole.Invoke(new()\n    {\n        Name = \"testRole\",\n        TeamId = \"team id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := squadcast.LookupTeamRole(ctx, \u0026squadcast.LookupTeamRoleArgs{\n\t\t\tName:   \"testRole\",\n\t\t\tTeamId: \"team id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetTeamRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = SquadcastFunctions.getTeamRole(GetTeamRoleArgs.builder()\n            .name(\"testRole\")\n            .teamId(\"team id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: squadcast:getTeamRole\n      Arguments:\n        name: testRole\n        teamId: team id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeamRole.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "TeamRole name.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "teamId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeamRole.\n",
                "properties": {
                    "abilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "All the abilities attached to a role.\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Role is default.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Role id.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "TeamRole name.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "abilities",
                    "default",
                    "id",
                    "name",
                    "teamId"
                ]
            }
        },
        "squadcast:index/getUser:getUser": {
            "description": "Use this data source to get information about a specific user that you can use for other Squadcast resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst test = squadcast.getUser({\n    email: squadcast_user.test.email,\n});\n```\n```python\nimport pulumi\nimport pulumi_squadcast as squadcast\n\ntest = squadcast.get_user(email=squadcast_user[\"test\"][\"email\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Squadcast.GetUser.Invoke(new()\n    {\n        Email = squadcast_user.Test.Email,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := squadcast.LookupUser(ctx, \u0026squadcast.LookupUserArgs{\n\t\t\tEmail: squadcast_user.Test.Email,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = SquadcastFunctions.getUser(GetUserArgs.builder()\n            .email(squadcast_user.test().email())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: squadcast:getUser\n      Arguments:\n        email: ${squadcast_user.test.email}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User email.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "abilities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Denotes the Permissions / abilities of the user.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "User email.\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "User first name.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "User id.\n"
                    },
                    "isEmailVerified": {
                        "type": "boolean",
                        "description": "Denotes if the user has verified their email or not.\n"
                    },
                    "isOverrideDndEnabled": {
                        "type": "boolean",
                        "description": "Deprecated, this can be ignored.\n"
                    },
                    "isPhoneVerified": {
                        "type": "boolean",
                        "description": "Denotes if the user has verified their phone number or not.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User last name.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User name, automatically computed from first name and last name.\n"
                    },
                    "notificationRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getUserNotificationRule:getUserNotificationRule"
                        },
                        "description": "User Personal Notification Rules.\n"
                    },
                    "oncallReminderRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getUserOncallReminderRule:getUserOncallReminderRule"
                        },
                        "description": "User's personal on-call reminder notification rules.\n"
                    },
                    "phone": {
                        "type": "string",
                        "description": "User phone number.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "User role.\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "User time_zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "abilities",
                    "email",
                    "firstName",
                    "id",
                    "isEmailVerified",
                    "isOverrideDndEnabled",
                    "isPhoneVerified",
                    "lastName",
                    "name",
                    "notificationRules",
                    "oncallReminderRules",
                    "phone",
                    "role",
                    "timeZone"
                ]
            }
        },
        "squadcast:index/getWebform:getWebform": {
            "description": "[Squadcast Webforms](https://support.squadcast.com/webforms/webforms) allows organizations to expand their customer support by hosting public Webforms, so their customers can quickly create an alert from outside the Squadcast ecosystem. Not only this, but internal stakeholders can also leverage Webforms for easy alert creation. Use this data source to get information about a specific webform.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as squadcast from \"@pulumi/squadcast\";\n\nconst webform = squadcast.getWebform({\n    name: \"webformName\",\n    teamId: \"team id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_squadcast as squadcast\n\nwebform = squadcast.get_webform(name=\"webformName\",\n    team_id=\"team id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Squadcast = Pulumi.Squadcast;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var webform = Squadcast.GetWebform.Invoke(new()\n    {\n        Name = \"webformName\",\n        TeamId = \"team id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := squadcast.LookupWebform(ctx, \u0026squadcast.LookupWebformArgs{\n\t\t\tName:   \"webformName\",\n\t\t\tTeamId: \"team id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.squadcast.SquadcastFunctions;\nimport com.pulumi.squadcast.inputs.GetWebformArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var webform = SquadcastFunctions.getWebform(GetWebformArgs.builder()\n            .name(\"webformName\")\n            .teamId(\"team id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  webform:\n    fn::invoke:\n      Function: squadcast:getWebform\n      Arguments:\n        name: webformName\n        teamId: team id\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWebform.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Webform.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "teamId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWebform.\n",
                "properties": {
                    "customDomainName": {
                        "type": "string",
                        "description": "Custom domain name (URL).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Webform.\n"
                    },
                    "emailOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Defines when to send email to the reporter (triggered, acknowledged, resolved).\n"
                    },
                    "footerLink": {
                        "type": "string",
                        "description": "Footer link.\n"
                    },
                    "footerText": {
                        "type": "string",
                        "description": "Footer text.\n"
                    },
                    "header": {
                        "type": "string",
                        "description": "Webform header.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Webform id.\n"
                    },
                    "inputFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getWebformInputField:getWebformInputField"
                        },
                        "description": "Input Fields added to Webforms. Added as tags to incident based on selection.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Webform.\n"
                    },
                    "owners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getWebformOwner:getWebformOwner"
                        },
                        "description": "Form owner.\n"
                    },
                    "publicUrl": {
                        "type": "string",
                        "description": "Public URL of the Webform.\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getWebformService:getWebformService"
                        },
                        "description": "Services added to Webform.\n"
                    },
                    "severities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/squadcast:index/getWebformSeverity:getWebformSeverity"
                        },
                        "description": "Severity of the Incident.\n",
                        "deprecationMessage": "Use `input_field` instead of `severity`."
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Webform Tags.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "Team id.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Webform title (public).\n"
                    }
                },
                "type": "object",
                "required": [
                    "customDomainName",
                    "description",
                    "emailOns",
                    "footerLink",
                    "footerText",
                    "header",
                    "id",
                    "inputFields",
                    "name",
                    "owners",
                    "publicUrl",
                    "services",
                    "severities",
                    "tags",
                    "teamId",
                    "title"
                ]
            }
        }
    }
}