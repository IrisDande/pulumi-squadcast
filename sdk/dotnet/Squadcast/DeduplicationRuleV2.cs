// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast
{
    /// <summary>
    /// [Deduplication rules](https://support.squadcast.com/docs/de-duplication-rules) can help you reduce alert noise by organising and grouping alerts. This also provides easy access to similar alerts when needed. When these rules evaluate to true for an incoming incident, alerts will get deduplicated.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = IrisDanded.Pulumi.Squadcast;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleTeam = Squadcast.GetTeam.Invoke(new()
    ///     {
    ///         Name = "example team name",
    ///     });
    /// 
    ///     var exampleService = Squadcast.GetService.Invoke(new()
    ///     {
    ///         Name = "example service name",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///     });
    /// 
    ///     var exampleDeduplicationRule = new Squadcast.DeduplicationRuleV2("exampleDeduplicationRule", new()
    ///     {
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         IsBasic = false,
    ///         Description = "not basic",
    ///         Expression = "payload[\"event_id\"] == 40",
    ///     });
    /// 
    ///     var exampleBasicDeduplicationRule = new Squadcast.DeduplicationRuleV2("exampleBasicDeduplicationRule", new()
    ///     {
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         IsBasic = true,
    ///         Description = "basic",
    ///         DependencyDeduplication = true,
    ///         TimeWindow = 2,
    ///         TimeUnit = "hour",
    ///         BasicExpressions = new[]
    ///         {
    ///             new Squadcast.Inputs.DeduplicationRuleV2BasicExpressionArgs
    ///             {
    ///                 Lhs = "payload[\"foo\"]",
    ///                 Op = "is",
    ///                 Rhs = "bar",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// serviceID:ruleID
    /// 
    /// ```sh
    /// $ pulumi import squadcast:index/deduplicationRuleV2:DeduplicationRuleV2 test_resource_name 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:index/deduplicationRuleV2:DeduplicationRuleV2")]
    public partial class DeduplicationRuleV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The basic expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        [Output("basicExpressions")]
        public Output<ImmutableArray<Outputs.DeduplicationRuleV2BasicExpression>> BasicExpressions { get; private set; } = null!;

        /// <summary>
        /// Denotes if dependent services should also be deduplicated
        /// </summary>
        [Output("dependencyDeduplication")]
        public Output<bool?> DependencyDeduplication { get; private set; } = null!;

        /// <summary>
        /// description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        [Output("expression")]
        public Output<string?> Expression { get; private set; } = null!;

        /// <summary>
        /// is_basic will be true when users use the drop down selectors which will have lhs, op &amp; rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        /// </summary>
        [Output("isBasic")]
        public Output<bool> IsBasic { get; private set; } = null!;

        /// <summary>
        /// Service id.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// time unit (mins or hours)
        /// </summary>
        [Output("timeUnit")]
        public Output<string?> TimeUnit { get; private set; } = null!;

        /// <summary>
        /// integer for time_unit
        /// </summary>
        [Output("timeWindow")]
        public Output<int?> TimeWindow { get; private set; } = null!;


        /// <summary>
        /// Create a DeduplicationRuleV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeduplicationRuleV2(string name, DeduplicationRuleV2Args args, CustomResourceOptions? options = null)
            : base("squadcast:index/deduplicationRuleV2:DeduplicationRuleV2", name, args ?? new DeduplicationRuleV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private DeduplicationRuleV2(string name, Input<string> id, DeduplicationRuleV2State? state = null, CustomResourceOptions? options = null)
            : base("squadcast:index/deduplicationRuleV2:DeduplicationRuleV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/IrisDande/pulumi-squadcast",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeduplicationRuleV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeduplicationRuleV2 Get(string name, Input<string> id, DeduplicationRuleV2State? state = null, CustomResourceOptions? options = null)
        {
            return new DeduplicationRuleV2(name, id, state, options);
        }
    }

    public sealed class DeduplicationRuleV2Args : global::Pulumi.ResourceArgs
    {
        [Input("basicExpressions")]
        private InputList<Inputs.DeduplicationRuleV2BasicExpressionArgs>? _basicExpressions;

        /// <summary>
        /// The basic expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        public InputList<Inputs.DeduplicationRuleV2BasicExpressionArgs> BasicExpressions
        {
            get => _basicExpressions ?? (_basicExpressions = new InputList<Inputs.DeduplicationRuleV2BasicExpressionArgs>());
            set => _basicExpressions = value;
        }

        /// <summary>
        /// Denotes if dependent services should also be deduplicated
        /// </summary>
        [Input("dependencyDeduplication")]
        public Input<bool>? DependencyDeduplication { get; set; }

        /// <summary>
        /// description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        [Input("expression")]
        public Input<string>? Expression { get; set; }

        /// <summary>
        /// is_basic will be true when users use the drop down selectors which will have lhs, op &amp; rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        /// </summary>
        [Input("isBasic", required: true)]
        public Input<bool> IsBasic { get; set; } = null!;

        /// <summary>
        /// Service id.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        /// <summary>
        /// time unit (mins or hours)
        /// </summary>
        [Input("timeUnit")]
        public Input<string>? TimeUnit { get; set; }

        /// <summary>
        /// integer for time_unit
        /// </summary>
        [Input("timeWindow")]
        public Input<int>? TimeWindow { get; set; }

        public DeduplicationRuleV2Args()
        {
        }
        public static new DeduplicationRuleV2Args Empty => new DeduplicationRuleV2Args();
    }

    public sealed class DeduplicationRuleV2State : global::Pulumi.ResourceArgs
    {
        [Input("basicExpressions")]
        private InputList<Inputs.DeduplicationRuleV2BasicExpressionGetArgs>? _basicExpressions;

        /// <summary>
        /// The basic expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        public InputList<Inputs.DeduplicationRuleV2BasicExpressionGetArgs> BasicExpressions
        {
            get => _basicExpressions ?? (_basicExpressions = new InputList<Inputs.DeduplicationRuleV2BasicExpressionGetArgs>());
            set => _basicExpressions = value;
        }

        /// <summary>
        /// Denotes if dependent services should also be deduplicated
        /// </summary>
        [Input("dependencyDeduplication")]
        public Input<bool>? DependencyDeduplication { get; set; }

        /// <summary>
        /// description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        [Input("expression")]
        public Input<string>? Expression { get; set; }

        /// <summary>
        /// is_basic will be true when users use the drop down selectors which will have lhs, op &amp; rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        /// </summary>
        [Input("isBasic")]
        public Input<bool>? IsBasic { get; set; }

        /// <summary>
        /// Service id.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// time unit (mins or hours)
        /// </summary>
        [Input("timeUnit")]
        public Input<string>? TimeUnit { get; set; }

        /// <summary>
        /// integer for time_unit
        /// </summary>
        [Input("timeWindow")]
        public Input<int>? TimeWindow { get; set; }

        public DeduplicationRuleV2State()
        {
        }
        public static new DeduplicationRuleV2State Empty => new DeduplicationRuleV2State();
    }
}
