// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast.Escalation
{
    public static class GetPolicy
    {
        /// <summary>
        /// [Escalation Policies](https://support.squadcast.com/docs/escalation-policies) defines rules indicating when and how alerts will escalate to various Users, Squads and (or) Schedules within your Organization.Use this data source to get information about a specific escalation policy that you can use for other Squadcast resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Squadcast = Pulumi.Squadcast;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Squadcast.Escalation.GetPolicy.Invoke(new()
        ///     {
        ///         Name = squadcast_escalation_policy.Test.Name,
        ///         TeamId = "team id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPolicyResult> InvokeAsync(GetPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicyResult>("squadcast:Escalation/getPolicy:getPolicy", args ?? new GetPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// [Escalation Policies](https://support.squadcast.com/docs/escalation-policies) defines rules indicating when and how alerts will escalate to various Users, Squads and (or) Schedules within your Organization.Use this data source to get information about a specific escalation policy that you can use for other Squadcast resources.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Squadcast = Pulumi.Squadcast;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Squadcast.Escalation.GetPolicy.Invoke(new()
        ///     {
        ///         Name = squadcast_escalation_policy.Test.Name,
        ///         TeamId = "team id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPolicyResult> Invoke(GetPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicyResult>("squadcast:Escalation/getPolicy:getPolicy", args ?? new GetPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Escalation Policy
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public string TeamId { get; set; } = null!;

        public GetPolicyArgs()
        {
        }
        public static new GetPolicyArgs Empty => new GetPolicyArgs();
    }

    public sealed class GetPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Escalation Policy
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public GetPolicyInvokeArgs()
        {
        }
        public static new GetPolicyInvokeArgs Empty => new GetPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicyResult
    {
        /// <summary>
        /// Detailed description about the nature &amp; purpose Escalation policy
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Escalation policy owner
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyEntityOwnerResult> EntityOwners;
        /// <summary>
        /// Escalation Policy id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the Escalation Policy
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// You can choose to repeat the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyRepeatResult> Repeats;
        /// <summary>
        /// Rules will have the details of who to notify and when to notify and how to notify them.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyRuleResult> Rules;
        /// <summary>
        /// Team id.
        /// </summary>
        public readonly string TeamId;

        [OutputConstructor]
        private GetPolicyResult(
            string description,

            ImmutableArray<Outputs.GetPolicyEntityOwnerResult> entityOwners,

            string id,

            string name,

            ImmutableArray<Outputs.GetPolicyRepeatResult> repeats,

            ImmutableArray<Outputs.GetPolicyRuleResult> rules,

            string teamId)
        {
            Description = description;
            EntityOwners = entityOwners;
            Id = id;
            Name = name;
            Repeats = repeats;
            Rules = rules;
            TeamId = teamId;
        }
    }
}
