// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast.Escalation
{
    /// <summary>
    /// [Escalation Policies](https://support.squadcast.com/docs/escalation-policies) defines rules indicating when and how alerts will escalate to various Users, Squads and (or) Schedules within your Organization. The name of the Escalation Policy must be unique within and across Teams.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = IrisDanded.Pulumi.Squadcast;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleTeam = Squadcast.GetTeam.Invoke(new()
    ///     {
    ///         Name = "example team name",
    ///     });
    /// 
    ///     var exampleUser = Squadcast.GetUser.Invoke(new()
    ///     {
    ///         Email = "test@example.com",
    ///     });
    /// 
    ///     var exampleSquad = Squadcast.GetSquad.Invoke(new()
    ///     {
    ///         Name = "example squad name",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///     });
    /// 
    ///     var exampleScheduleV2 = Squadcast.Schedule.GetV2.Invoke(new()
    ///     {
    ///         Name = "example schedule name",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///     });
    /// 
    ///     var exampleEscalaionPolicy = new Squadcast.Escalation.Policy("exampleEscalaionPolicy", new()
    ///     {
    ///         Description = "It's an amazing policy",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         Rules = new[]
    ///         {
    ///             new Squadcast.Escalation.Inputs.PolicyRuleArgs
    ///             {
    ///                 DelayMinutes = 0,
    ///                 Targets = new[]
    ///                 {
    ///                     new Squadcast.Escalation.Inputs.PolicyRuleTargetArgs
    ///                     {
    ///                         Id = exampleUser.Apply(getUserResult =&gt; getUserResult.Id),
    ///                         Type = "user",
    ///                     },
    ///                     new Squadcast.Escalation.Inputs.PolicyRuleTargetArgs
    ///                     {
    ///                         Id = exampleScheduleV2.Apply(getV2Result =&gt; getV2Result.Id),
    ///                         Type = "schedulev2",
    ///                     },
    ///                 },
    ///             },
    ///             new Squadcast.Escalation.Inputs.PolicyRuleArgs
    ///             {
    ///                 DelayMinutes = 5,
    ///                 Targets = new[]
    ///                 {
    ///                     new Squadcast.Escalation.Inputs.PolicyRuleTargetArgs
    ///                     {
    ///                         Id = exampleUser.Apply(getUserResult =&gt; getUserResult.Id),
    ///                         Type = "user",
    ///                     },
    ///                     new Squadcast.Escalation.Inputs.PolicyRuleTargetArgs
    ///                     {
    ///                         Id = exampleSquad.Apply(getSquadResult =&gt; getSquadResult.Id),
    ///                         Type = "squad",
    ///                     },
    ///                 },
    ///                 NotificationChannels = new[]
    ///                 {
    ///                     "Phone",
    ///                 },
    ///                 Repeat = new Squadcast.Escalation.Inputs.PolicyRuleRepeatArgs
    ///                 {
    ///                     Times = 1,
    ///                     DelayMinutes = 5,
    ///                 },
    ///             },
    ///             new Squadcast.Escalation.Inputs.PolicyRuleArgs
    ///             {
    ///                 DelayMinutes = 10,
    ///                 Targets = new[]
    ///                 {
    ///                     new Squadcast.Escalation.Inputs.PolicyRuleTargetArgs
    ///                     {
    ///                         Id = exampleSquad.Apply(getSquadResult =&gt; getSquadResult.Id),
    ///                         Type = "squad",
    ///                     },
    ///                     new Squadcast.Escalation.Inputs.PolicyRuleTargetArgs
    ///                     {
    ///                         Id = exampleScheduleV2.Apply(getV2Result =&gt; getV2Result.Id),
    ///                         Type = "schedulev2",
    ///                     },
    ///                 },
    ///                 RoundRobin = new Squadcast.Escalation.Inputs.PolicyRuleRoundRobinArgs
    ///                 {
    ///                     Enabled = true,
    ///                     Rotation = new Squadcast.Escalation.Inputs.PolicyRuleRoundRobinRotationArgs
    ///                     {
    ///                         Enabled = true,
    ///                         DelayMinutes = 1,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Repeat = new Squadcast.Escalation.Inputs.PolicyRepeatArgs
    ///         {
    ///             Times = 2,
    ///             DelayMinutes = 10,
    ///         },
    ///         EntityOwner = new Squadcast.Escalation.Inputs.PolicyEntityOwnerArgs
    ///         {
    ///             Id = exampleUser.Apply(getUserResult =&gt; getUserResult.Id),
    ///             Type = "user",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// teamID:escalationPolicyID
    /// 
    /// Use 'Get All Teams' and 'Get All Escalation Policies' APIs to get the id of the team and escalation policy name respectively
    /// 
    /// ```sh
    /// $ pulumi import squadcast:Escalation/policy:Policy test "62d2fe23a57381088224d726:Example Escalation Policy"
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:Escalation/policy:Policy")]
    public partial class Policy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Detailed description about the Escalation Policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Escalation policy owner.
        /// </summary>
        [Output("entityOwner")]
        public Output<Outputs.PolicyEntityOwner> EntityOwner { get; private set; } = null!;

        /// <summary>
        /// Name of the Escalation Policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
        /// </summary>
        [Output("repeat")]
        public Output<Outputs.PolicyRepeat?> Repeat { get; private set; } = null!;

        /// <summary>
        /// Rules will have the details of who to notify and when to notify and how to notify them.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.PolicyRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policy(string name, PolicyArgs args, CustomResourceOptions? options = null)
            : base("squadcast:Escalation/policy:Policy", name, args ?? new PolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Policy(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
            : base("squadcast:Escalation/policy:Policy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/IrisDande/pulumi-squadcast",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policy Get(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Policy(name, id, state, options);
        }
    }

    public sealed class PolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Detailed description about the Escalation Policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Escalation policy owner.
        /// </summary>
        [Input("entityOwner", required: true)]
        public Input<Inputs.PolicyEntityOwnerArgs> EntityOwner { get; set; } = null!;

        /// <summary>
        /// Name of the Escalation Policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
        /// </summary>
        [Input("repeat")]
        public Input<Inputs.PolicyRepeatArgs>? Repeat { get; set; }

        [Input("rules", required: true)]
        private InputList<Inputs.PolicyRuleArgs>? _rules;

        /// <summary>
        /// Rules will have the details of who to notify and when to notify and how to notify them.
        /// </summary>
        public InputList<Inputs.PolicyRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.PolicyRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public PolicyArgs()
        {
        }
        public static new PolicyArgs Empty => new PolicyArgs();
    }

    public sealed class PolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Detailed description about the Escalation Policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Escalation policy owner.
        /// </summary>
        [Input("entityOwner")]
        public Input<Inputs.PolicyEntityOwnerGetArgs>? EntityOwner { get; set; }

        /// <summary>
        /// Name of the Escalation Policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// You can choose to repeate the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
        /// </summary>
        [Input("repeat")]
        public Input<Inputs.PolicyRepeatGetArgs>? Repeat { get; set; }

        [Input("rules")]
        private InputList<Inputs.PolicyRuleGetArgs>? _rules;

        /// <summary>
        /// Rules will have the details of who to notify and when to notify and how to notify them.
        /// </summary>
        public InputList<Inputs.PolicyRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.PolicyRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public PolicyState()
        {
        }
        public static new PolicyState Empty => new PolicyState();
    }
}
