// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast
{
    /// <summary>
    /// Global Event Ruleset (GER) is a centralized set of rules that defines service routes for incoming events.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = IrisDanded.Pulumi.Squadcast;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var team = Squadcast.GetTeam.Invoke(new()
    ///     {
    ///         Name = "Example Team",
    ///     });
    /// 
    ///     var user = Squadcast.GetUser.Invoke(new()
    ///     {
    ///         Email = "john@example.com",
    ///     });
    /// 
    ///     var service = Squadcast.GetService.Invoke(new()
    ///     {
    ///         Name = "Example Service",
    ///         TeamId = team.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///     });
    /// 
    ///     var ger = new Squadcast.Ger("ger", new()
    ///     {
    ///         Description = "Example GER Description",
    ///         TeamId = team.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         EntityOwner = new Squadcast.Inputs.GerEntityOwnerArgs
    ///         {
    ///             Id = user.Apply(getUserResult =&gt; getUserResult.Id),
    ///             Type = "user",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// gerID
    /// 
    /// ```sh
    /// $ pulumi import squadcast:index/ger:Ger example_ger_import "53"
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:index/ger:Ger")]
    public partial class Ger : global::Pulumi.CustomResource
    {
        /// <summary>
        /// GER description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// GER owner.
        /// </summary>
        [Output("entityOwner")]
        public Output<Outputs.GerEntityOwner> EntityOwner { get; private set; } = null!;

        /// <summary>
        /// GER name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Routing Key is an identifier used to determine the ruleset that an incoming event belongs to. It is a common key that associates multiple alert sources with their configured rules, ensuring events are routed to the appropriate services when the defined criteria are met.
        /// </summary>
        [Output("routingKey")]
        public Output<string> RoutingKey { get; private set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;


        /// <summary>
        /// Create a Ger resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ger(string name, GerArgs args, CustomResourceOptions? options = null)
            : base("squadcast:index/ger:Ger", name, args ?? new GerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ger(string name, Input<string> id, GerState? state = null, CustomResourceOptions? options = null)
            : base("squadcast:index/ger:Ger", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/IrisDande/pulumi-squadcast",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ger resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ger Get(string name, Input<string> id, GerState? state = null, CustomResourceOptions? options = null)
        {
            return new Ger(name, id, state, options);
        }
    }

    public sealed class GerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// GER description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// GER owner.
        /// </summary>
        [Input("entityOwner", required: true)]
        public Input<Inputs.GerEntityOwnerArgs> EntityOwner { get; set; } = null!;

        /// <summary>
        /// GER name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public GerArgs()
        {
        }
        public static new GerArgs Empty => new GerArgs();
    }

    public sealed class GerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// GER description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// GER owner.
        /// </summary>
        [Input("entityOwner")]
        public Input<Inputs.GerEntityOwnerGetArgs>? EntityOwner { get; set; }

        /// <summary>
        /// GER name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Routing Key is an identifier used to determine the ruleset that an incoming event belongs to. It is a common key that associates multiple alert sources with their configured rules, ensuring events are routed to the appropriate services when the defined criteria are met.
        /// </summary>
        [Input("routingKey")]
        public Input<string>? RoutingKey { get; set; }

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        public GerState()
        {
        }
        public static new GerState Empty => new GerState();
    }
}
