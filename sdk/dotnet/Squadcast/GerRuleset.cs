// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast
{
    /// <summary>
    /// GER Ruleset is a set of rules and configurations in Squadcast. It allows users to define how alerts are routed to services without the need to set up individual webhooks for each alert source.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = IrisDanded.Pulumi.Squadcast;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleTeam = Squadcast.GetTeam.Invoke(new()
    ///     {
    ///         Name = "Example Team",
    ///     });
    /// 
    ///     var user = Squadcast.GetUser.Invoke(new()
    ///     {
    ///         Email = "john@example.com",
    ///     });
    /// 
    ///     var exampleService = Squadcast.GetService.Invoke(new()
    ///     {
    ///         Name = "Example Service",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///     });
    /// 
    ///     var exampleGer = new Squadcast.Ger("exampleGer", new()
    ///     {
    ///         Description = "Example GER Description",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         EntityOwner = new Squadcast.Inputs.GerEntityOwnerArgs
    ///         {
    ///             Id = user.Apply(getUserResult =&gt; getUserResult.Id),
    ///             Type = "user",
    ///         },
    ///     });
    /// 
    ///     var exampleGerRuleset = new Squadcast.GerRuleset("exampleGerRuleset", new()
    ///     {
    ///         GerId = exampleGer.Id,
    ///         AlertSource = "Prometheus",
    ///         CatchAllAction = 
    ///         {
    ///             { "route_to", exampleService.Apply(getServiceResult =&gt; getServiceResult.Id) },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// gerID:alertSourceName
    /// 
    /// ```sh
    /// $ pulumi import squadcast:index/gerRuleset:GerRuleset example_ger_ruleset_import "53:Grafana"
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:index/gerRuleset:GerRuleset")]
    public partial class GerRuleset : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        /// </summary>
        [Output("alertSource")]
        public Output<string> AlertSource { get; private set; } = null!;

        /// <summary>
        /// Shortname of the linked alert source.
        /// </summary>
        [Output("alertSourceShortname")]
        public Output<string> AlertSourceShortname { get; private set; } = null!;

        /// <summary>
        /// Version of the linked alert source.
        /// </summary>
        [Output("alertSourceVersion")]
        public Output<string> AlertSourceVersion { get; private set; } = null!;

        /// <summary>
        /// The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
        /// </summary>
        [Output("catchAllAction")]
        public Output<ImmutableDictionary<string, string>?> CatchAllAction { get; private set; } = null!;

        /// <summary>
        /// GER id.
        /// </summary>
        [Output("gerId")]
        public Output<string> GerId { get; private set; } = null!;


        /// <summary>
        /// Create a GerRuleset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GerRuleset(string name, GerRulesetArgs args, CustomResourceOptions? options = null)
            : base("squadcast:index/gerRuleset:GerRuleset", name, args ?? new GerRulesetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GerRuleset(string name, Input<string> id, GerRulesetState? state = null, CustomResourceOptions? options = null)
            : base("squadcast:index/gerRuleset:GerRuleset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/IrisDande/pulumi-squadcast",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GerRuleset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GerRuleset Get(string name, Input<string> id, GerRulesetState? state = null, CustomResourceOptions? options = null)
        {
            return new GerRuleset(name, id, state, options);
        }
    }

    public sealed class GerRulesetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        /// </summary>
        [Input("alertSource", required: true)]
        public Input<string> AlertSource { get; set; } = null!;

        [Input("catchAllAction")]
        private InputMap<string>? _catchAllAction;

        /// <summary>
        /// The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
        /// </summary>
        public InputMap<string> CatchAllAction
        {
            get => _catchAllAction ?? (_catchAllAction = new InputMap<string>());
            set => _catchAllAction = value;
        }

        /// <summary>
        /// GER id.
        /// </summary>
        [Input("gerId", required: true)]
        public Input<string> GerId { get; set; } = null!;

        public GerRulesetArgs()
        {
        }
        public static new GerRulesetArgs Empty => new GerRulesetArgs();
    }

    public sealed class GerRulesetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        /// </summary>
        [Input("alertSource")]
        public Input<string>? AlertSource { get; set; }

        /// <summary>
        /// Shortname of the linked alert source.
        /// </summary>
        [Input("alertSourceShortname")]
        public Input<string>? AlertSourceShortname { get; set; }

        /// <summary>
        /// Version of the linked alert source.
        /// </summary>
        [Input("alertSourceVersion")]
        public Input<string>? AlertSourceVersion { get; set; }

        [Input("catchAllAction")]
        private InputMap<string>? _catchAllAction;

        /// <summary>
        /// The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
        /// </summary>
        public InputMap<string> CatchAllAction
        {
            get => _catchAllAction ?? (_catchAllAction = new InputMap<string>());
            set => _catchAllAction = value;
        }

        /// <summary>
        /// GER id.
        /// </summary>
        [Input("gerId")]
        public Input<string>? GerId { get; set; }

        public GerRulesetState()
        {
        }
        public static new GerRulesetState Empty => new GerRulesetState();
    }
}
