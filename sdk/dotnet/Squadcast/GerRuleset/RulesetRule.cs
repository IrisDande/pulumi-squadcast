// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast.GerRuleset
{
    /// <summary>
    /// GER Ruleset Rules are a set of conditions defined within a Global Event Ruleset. These rules have expressions, whose evaluation will determine the destination service for the incoming events.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = IrisDanded.Pulumi.Squadcast;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleTeam = Squadcast.GetTeam.Invoke(new()
    ///     {
    ///         Name = "Example Team",
    ///     });
    /// 
    ///     var exampleUser = Squadcast.GetUser.Invoke(new()
    ///     {
    ///         Email = "john@example.com",
    ///     });
    /// 
    ///     var exampleService = Squadcast.GetService.Invoke(new()
    ///     {
    ///         Name = "Example Service",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///     });
    /// 
    ///     var exampleGer = new Squadcast.Ger("exampleGer", new()
    ///     {
    ///         Description = "Example GER Description",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         EntityOwner = new Squadcast.Inputs.GerEntityOwnerArgs
    ///         {
    ///             Id = exampleUser.Apply(getUserResult =&gt; getUserResult.Id),
    ///             Type = "user",
    ///         },
    ///     });
    /// 
    ///     var exampleGerRuleset = new Squadcast.Ger.Ruleset("exampleGerRuleset", new()
    ///     {
    ///         GerId = exampleGer.Id,
    ///         AlertSource = "Prometheus",
    ///         CatchAllAction = 
    ///         {
    ///             { "route_to", exampleService.Apply(getServiceResult =&gt; getServiceResult.Id) },
    ///         },
    ///     });
    /// 
    ///     var exampleGerRulesetRule = new Squadcast.GerRuleset.RulesetRule("exampleGerRulesetRule", new()
    ///     {
    ///         GerId = exampleGer.Id,
    ///         AlertSource = exampleGerRuleset.AlertSource,
    ///         Expression = "alertname == \"DeploymentReplicasNotUpdated\"",
    ///         Description = "Example GER Ruleset Rule",
    ///         Action = 
    ///         {
    ///             { "route_to", exampleService.Apply(getServiceResult =&gt; getServiceResult.Id) },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// gerID:alertSourceName:ruleID
    /// 
    /// ```sh
    /// $ pulumi import squadcast:GerRuleset/rulesetRule:RulesetRule ger_ruleset_rule_import "50:Grafana:100"
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:GerRuleset/rulesetRule:RulesetRule")]
    public partial class RulesetRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Rule Action refers to the designated destination service to which an event should be directed towards, whenever a rule expression is true.
        /// </summary>
        [Output("action")]
        public Output<ImmutableDictionary<string, string>> Action { get; private set; } = null!;

        /// <summary>
        /// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        /// </summary>
        [Output("alertSource")]
        public Output<string> AlertSource { get; private set; } = null!;

        /// <summary>
        /// Shortname of the linked alert source.
        /// </summary>
        [Output("alertSourceShortname")]
        public Output<string> AlertSourceShortname { get; private set; } = null!;

        /// <summary>
        /// Version of the linked alert source.
        /// </summary>
        [Output("alertSourceVersion")]
        public Output<string> AlertSourceVersion { get; private set; } = null!;

        /// <summary>
        /// GER Ruleset Rule description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// An expression is a single condition or a set of conditions that must be met for the rule to take action, such as routing the incoming event to a specific service.
        /// </summary>
        [Output("expression")]
        public Output<string> Expression { get; private set; } = null!;

        /// <summary>
        /// GER id.
        /// </summary>
        [Output("gerId")]
        public Output<string> GerId { get; private set; } = null!;


        /// <summary>
        /// Create a RulesetRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RulesetRule(string name, RulesetRuleArgs args, CustomResourceOptions? options = null)
            : base("squadcast:GerRuleset/rulesetRule:RulesetRule", name, args ?? new RulesetRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RulesetRule(string name, Input<string> id, RulesetRuleState? state = null, CustomResourceOptions? options = null)
            : base("squadcast:GerRuleset/rulesetRule:RulesetRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/IrisDande/pulumi-squadcast",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RulesetRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RulesetRule Get(string name, Input<string> id, RulesetRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new RulesetRule(name, id, state, options);
        }
    }

    public sealed class RulesetRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("action", required: true)]
        private InputMap<string>? _action;

        /// <summary>
        /// Rule Action refers to the designated destination service to which an event should be directed towards, whenever a rule expression is true.
        /// </summary>
        public InputMap<string> Action
        {
            get => _action ?? (_action = new InputMap<string>());
            set => _action = value;
        }

        /// <summary>
        /// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        /// </summary>
        [Input("alertSource", required: true)]
        public Input<string> AlertSource { get; set; } = null!;

        /// <summary>
        /// GER Ruleset Rule description.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// An expression is a single condition or a set of conditions that must be met for the rule to take action, such as routing the incoming event to a specific service.
        /// </summary>
        [Input("expression", required: true)]
        public Input<string> Expression { get; set; } = null!;

        /// <summary>
        /// GER id.
        /// </summary>
        [Input("gerId", required: true)]
        public Input<string> GerId { get; set; } = null!;

        public RulesetRuleArgs()
        {
        }
        public static new RulesetRuleArgs Empty => new RulesetRuleArgs();
    }

    public sealed class RulesetRuleState : global::Pulumi.ResourceArgs
    {
        [Input("action")]
        private InputMap<string>? _action;

        /// <summary>
        /// Rule Action refers to the designated destination service to which an event should be directed towards, whenever a rule expression is true.
        /// </summary>
        public InputMap<string> Action
        {
            get => _action ?? (_action = new InputMap<string>());
            set => _action = value;
        }

        /// <summary>
        /// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        /// </summary>
        [Input("alertSource")]
        public Input<string>? AlertSource { get; set; }

        /// <summary>
        /// Shortname of the linked alert source.
        /// </summary>
        [Input("alertSourceShortname")]
        public Input<string>? AlertSourceShortname { get; set; }

        /// <summary>
        /// Version of the linked alert source.
        /// </summary>
        [Input("alertSourceVersion")]
        public Input<string>? AlertSourceVersion { get; set; }

        /// <summary>
        /// GER Ruleset Rule description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// An expression is a single condition or a set of conditions that must be met for the rule to take action, such as routing the incoming event to a specific service.
        /// </summary>
        [Input("expression")]
        public Input<string>? Expression { get; set; }

        /// <summary>
        /// GER id.
        /// </summary>
        [Input("gerId")]
        public Input<string>? GerId { get; set; }

        public RulesetRuleState()
        {
        }
        public static new RulesetRuleState Empty => new RulesetRuleState();
    }
}
