// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast.Schedule
{
    /// <summary>
    /// [Squadcast schedules v2](https://support.squadcast.com/schedules/schedules-new) are used to manage on-call scheduling &amp; determine who will be notified when an incident is triggered. The name of the Schedule must be unique within a Team.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = IrisDanded.Pulumi.Squadcast;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleTeam = Squadcast.GetTeam.Invoke(new()
    ///     {
    ///         Name = "example team name",
    ///     });
    /// 
    ///     var exampleUser = Squadcast.GetUser.Invoke(new()
    ///     {
    ///         Email = "test@example.com",
    ///     });
    /// 
    ///     var scheduleTest = new Squadcast.Schedule.V2("scheduleTest", new()
    ///     {
    ///         Description = "test schedule",
    ///         Timezone = "Asia/Kolkata",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         EntityOwner = new Squadcast.Schedule.Inputs.V2EntityOwnerArgs
    ///         {
    ///             Id = exampleUser.Apply(getUserResult =&gt; getUserResult.Id),
    ///             Type = "user",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new Squadcast.Schedule.Inputs.V2TagArgs
    ///             {
    ///                 Key = "testkey",
    ///                 Value = "testval",
    ///             },
    ///             new Squadcast.Schedule.Inputs.V2TagArgs
    ///             {
    ///                 Key = "testkey2",
    ///                 Value = "testval2",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// teamID:scheduleName
    /// 
    /// Use 'Get All Teams' API to get the id of the team
    /// 
    /// ```sh
    /// $ pulumi import squadcast:schedule/v2:V2 schedule_test "62d2fe23a57381088224d726:Example Schedule"
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:schedule/v2:V2")]
    public partial class V2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Detailed description about the schedule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Schedule owner.
        /// </summary>
        [Output("entityOwner")]
        public Output<Outputs.V2EntityOwner> EntityOwner { get; private set; } = null!;

        /// <summary>
        /// Name of the schedule.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Schedule tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.V2Tag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;

        /// <summary>
        /// Timezone for the schedule.
        /// </summary>
        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;


        /// <summary>
        /// Create a V2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public V2(string name, V2Args args, CustomResourceOptions? options = null)
            : base("squadcast:schedule/v2:V2", name, args ?? new V2Args(), MakeResourceOptions(options, ""))
        {
        }

        private V2(string name, Input<string> id, V2State? state = null, CustomResourceOptions? options = null)
            : base("squadcast:schedule/v2:V2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/IrisDande/pulumi-squadcast",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing V2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static V2 Get(string name, Input<string> id, V2State? state = null, CustomResourceOptions? options = null)
        {
            return new V2(name, id, state, options);
        }
    }

    public sealed class V2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Detailed description about the schedule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Schedule owner.
        /// </summary>
        [Input("entityOwner", required: true)]
        public Input<Inputs.V2EntityOwnerArgs> EntityOwner { get; set; } = null!;

        /// <summary>
        /// Name of the schedule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputList<Inputs.V2TagArgs>? _tags;

        /// <summary>
        /// Schedule tags.
        /// </summary>
        public InputList<Inputs.V2TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.V2TagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        /// <summary>
        /// Timezone for the schedule.
        /// </summary>
        [Input("timezone", required: true)]
        public Input<string> Timezone { get; set; } = null!;

        public V2Args()
        {
        }
        public static new V2Args Empty => new V2Args();
    }

    public sealed class V2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Detailed description about the schedule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Schedule owner.
        /// </summary>
        [Input("entityOwner")]
        public Input<Inputs.V2EntityOwnerGetArgs>? EntityOwner { get; set; }

        /// <summary>
        /// Name of the schedule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputList<Inputs.V2TagGetArgs>? _tags;

        /// <summary>
        /// Schedule tags.
        /// </summary>
        public InputList<Inputs.V2TagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.V2TagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        /// <summary>
        /// Timezone for the schedule.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public V2State()
        {
        }
        public static new V2State Empty => new V2State();
    }
}
