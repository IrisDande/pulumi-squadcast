// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast
{
    /// <summary>
    /// `squadcast.Slo` manages an SLO. The name of the SLO must be unique within a Team.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = IrisDanded.Pulumi.Squadcast;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleTeam = Squadcast.GetTeam.Invoke(new()
    ///     {
    ///         Name = "example team name",
    ///     });
    /// 
    ///     var exampleUser = Squadcast.GetUser.Invoke(new()
    ///     {
    ///         Email = "test@example.com",
    ///     });
    /// 
    ///     var exampleService = Squadcast.GetService.Invoke(new()
    ///     {
    ///         Name = "example service name",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///     });
    /// 
    ///     var exampleSlo = new Squadcast.Slo("exampleSlo", new()
    ///     {
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         Description = "Slo for checkout flow",
    ///         TargetSlo = 99.99,
    ///         ServiceIds = new[]
    ///         {
    ///             exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         },
    ///         Slis = new[]
    ///         {
    ///             "latency",
    ///             "high-err-rate",
    ///         },
    ///         TimeIntervalType = "rolling",
    ///         DurationInDays = 7,
    ///         Rules = new[]
    ///         {
    ///             new Squadcast.Inputs.SloRuleArgs
    ///             {
    ///                 Name = "breached_error_budget",
    ///             },
    ///             new Squadcast.Inputs.SloRuleArgs
    ///             {
    ///                 Name = "remaining_error_budget",
    ///                 Threshold = 11,
    ///             },
    ///             new Squadcast.Inputs.SloRuleArgs
    ///             {
    ///                 Name = "unhealthy_slo",
    ///                 Threshold = 1,
    ///             },
    ///         },
    ///         Notify = new Squadcast.Inputs.SloNotifyArgs
    ///         {
    ///             UserIds = new[]
    ///             {
    ///                 exampleUser.Apply(getUserResult =&gt; getUserResult.Id),
    ///             },
    ///         },
    ///         EntityOwner = new Squadcast.Inputs.SloEntityOwnerArgs
    ///         {
    ///             Id = exampleUser.Apply(getUserResult =&gt; getUserResult.Id),
    ///             Type = "user",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "tagKey", "tagValue" },
    ///             { "tagKey2", "tagValue2" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// teamID:sloID
    /// 
    /// Use 'Get All Teams' and 'Get All Slos' APIs to get the id of the team and slo respectively
    /// 
    /// ```sh
    /// $ pulumi import squadcast:index/slo:Slo test 61443b953ffd52818bf1617a:1023
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:index/slo:Slo")]
    public partial class Slo : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the SLO.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Tracks SLO for the last x days. Required only when SLO time interval type set to "rolling"
        /// </summary>
        [Output("durationInDays")]
        public Output<int> DurationInDays { get; private set; } = null!;

        /// <summary>
        /// SLO end time. Required only when SLO time interval type set to "fixed"
        /// </summary>
        [Output("endTime")]
        public Output<string> EndTime { get; private set; } = null!;

        /// <summary>
        /// SLO owner.
        /// </summary>
        [Output("entityOwner")]
        public Output<Outputs.SloEntityOwner> EntityOwner { get; private set; } = null!;

        /// <summary>
        /// The name of the SLO.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Notification rules for SLO violationUser can either choose to create an incident or get alerted via email
        /// </summary>
        [Output("notify")]
        public Output<Outputs.SloNotify?> Notify { get; private set; } = null!;

        /// <summary>
        /// SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.SloRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident
        /// </summary>
        [Output("serviceIds")]
        public Output<ImmutableArray<string>> ServiceIds { get; private set; } = null!;

        /// <summary>
        /// List of indentified SLIs for the SLO
        /// </summary>
        [Output("slis")]
        public Output<ImmutableArray<string>> Slis { get; private set; } = null!;

        /// <summary>
        /// SLO start time. Required only when SLO time interval type set to "fixed"
        /// </summary>
        [Output("startTime")]
        public Output<string> StartTime { get; private set; } = null!;

        /// <summary>
        /// SLO Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The target SLO for the time period.
        /// </summary>
        [Output("targetSlo")]
        public Output<double> TargetSlo { get; private set; } = null!;

        /// <summary>
        /// The team which SLO resource belongs to
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;

        /// <summary>
        /// Type of the SLO. Values can either be "rolling" or "fixed"
        /// </summary>
        [Output("timeIntervalType")]
        public Output<string> TimeIntervalType { get; private set; } = null!;


        /// <summary>
        /// Create a Slo resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Slo(string name, SloArgs args, CustomResourceOptions? options = null)
            : base("squadcast:index/slo:Slo", name, args ?? new SloArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Slo(string name, Input<string> id, SloState? state = null, CustomResourceOptions? options = null)
            : base("squadcast:index/slo:Slo", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/IrisDande/pulumi-squadcast",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Slo resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Slo Get(string name, Input<string> id, SloState? state = null, CustomResourceOptions? options = null)
        {
            return new Slo(name, id, state, options);
        }
    }

    public sealed class SloArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the SLO.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Tracks SLO for the last x days. Required only when SLO time interval type set to "rolling"
        /// </summary>
        [Input("durationInDays")]
        public Input<int>? DurationInDays { get; set; }

        /// <summary>
        /// SLO end time. Required only when SLO time interval type set to "fixed"
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        /// <summary>
        /// SLO owner.
        /// </summary>
        [Input("entityOwner", required: true)]
        public Input<Inputs.SloEntityOwnerArgs> EntityOwner { get; set; } = null!;

        /// <summary>
        /// The name of the SLO.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Notification rules for SLO violationUser can either choose to create an incident or get alerted via email
        /// </summary>
        [Input("notify")]
        public Input<Inputs.SloNotifyArgs>? Notify { get; set; }

        [Input("rules")]
        private InputList<Inputs.SloRuleArgs>? _rules;

        /// <summary>
        /// SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)
        /// </summary>
        public InputList<Inputs.SloRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.SloRuleArgs>());
            set => _rules = value;
        }

        [Input("serviceIds", required: true)]
        private InputList<string>? _serviceIds;

        /// <summary>
        /// Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident
        /// </summary>
        public InputList<string> ServiceIds
        {
            get => _serviceIds ?? (_serviceIds = new InputList<string>());
            set => _serviceIds = value;
        }

        [Input("slis", required: true)]
        private InputList<string>? _slis;

        /// <summary>
        /// List of indentified SLIs for the SLO
        /// </summary>
        public InputList<string> Slis
        {
            get => _slis ?? (_slis = new InputList<string>());
            set => _slis = value;
        }

        /// <summary>
        /// SLO start time. Required only when SLO time interval type set to "fixed"
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// SLO Tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The target SLO for the time period.
        /// </summary>
        [Input("targetSlo", required: true)]
        public Input<double> TargetSlo { get; set; } = null!;

        /// <summary>
        /// The team which SLO resource belongs to
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        /// <summary>
        /// Type of the SLO. Values can either be "rolling" or "fixed"
        /// </summary>
        [Input("timeIntervalType", required: true)]
        public Input<string> TimeIntervalType { get; set; } = null!;

        public SloArgs()
        {
        }
        public static new SloArgs Empty => new SloArgs();
    }

    public sealed class SloState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the SLO.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Tracks SLO for the last x days. Required only when SLO time interval type set to "rolling"
        /// </summary>
        [Input("durationInDays")]
        public Input<int>? DurationInDays { get; set; }

        /// <summary>
        /// SLO end time. Required only when SLO time interval type set to "fixed"
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        /// <summary>
        /// SLO owner.
        /// </summary>
        [Input("entityOwner")]
        public Input<Inputs.SloEntityOwnerGetArgs>? EntityOwner { get; set; }

        /// <summary>
        /// The name of the SLO.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Notification rules for SLO violationUser can either choose to create an incident or get alerted via email
        /// </summary>
        [Input("notify")]
        public Input<Inputs.SloNotifyGetArgs>? Notify { get; set; }

        [Input("rules")]
        private InputList<Inputs.SloRuleGetArgs>? _rules;

        /// <summary>
        /// SLO monitoring checks has rules for monitoring any SLO violation(Or warning signs)
        /// </summary>
        public InputList<Inputs.SloRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.SloRuleGetArgs>());
            set => _rules = value;
        }

        [Input("serviceIds")]
        private InputList<string>? _serviceIds;

        /// <summary>
        /// Service IDs associated with the SLO.Only incidents from the associated services can be promoted as SLO violating incident
        /// </summary>
        public InputList<string> ServiceIds
        {
            get => _serviceIds ?? (_serviceIds = new InputList<string>());
            set => _serviceIds = value;
        }

        [Input("slis")]
        private InputList<string>? _slis;

        /// <summary>
        /// List of indentified SLIs for the SLO
        /// </summary>
        public InputList<string> Slis
        {
            get => _slis ?? (_slis = new InputList<string>());
            set => _slis = value;
        }

        /// <summary>
        /// SLO start time. Required only when SLO time interval type set to "fixed"
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// SLO Tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The target SLO for the time period.
        /// </summary>
        [Input("targetSlo")]
        public Input<double>? TargetSlo { get; set; }

        /// <summary>
        /// The team which SLO resource belongs to
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        /// <summary>
        /// Type of the SLO. Values can either be "rolling" or "fixed"
        /// </summary>
        [Input("timeIntervalType")]
        public Input<string>? TimeIntervalType { get; set; }

        public SloState()
        {
        }
        public static new SloState Empty => new SloState();
    }
}
