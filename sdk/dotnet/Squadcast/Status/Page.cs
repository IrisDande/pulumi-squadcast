// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast.Status
{
    /// <summary>
    /// [Status Pages](https://www.squadcast.com/blog/status-pages-101-everything-you-need-to-know-about-status-pages) serves as a communication instrument enabling you to notify your customers regarding service interruptions and scheduled maintenance. You can create a status page for each of your services and customize it to your liking. You can also add components &amp; groups to your status page to show the status of your services.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = IrisDanded.Pulumi.Squadcast;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var team = Squadcast.GetTeam.Invoke(new()
    ///     {
    ///         Name = "Default Team",
    ///     });
    /// 
    ///     var user = Squadcast.GetUser.Invoke(new()
    ///     {
    ///         Email = "john@example.com",
    ///     });
    /// 
    ///     var testStatusPage = new Squadcast.Status.Page("testStatusPage", new()
    ///     {
    ///         TeamId = team.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///         Description = "Status Page description",
    ///         IsPublic = true,
    ///         DomainName = "test-statuspage",
    ///         Timezone = "Asia/Kolkata",
    ///         ContactEmail = "example@test.com",
    ///         ThemeColor = new Squadcast.Status.Inputs.PageThemeColorArgs
    ///         {
    ///             Primary = "#000000",
    ///             Secondary = "#dddddd",
    ///         },
    ///         Owner = new Squadcast.Status.Inputs.PageOwnerArgs
    ///         {
    ///             Type = "user",
    ///             Id = user.Apply(getUserResult =&gt; getUserResult.Id),
    ///         },
    ///         AllowWebhookSubscription = true,
    ///         AllowComponentsSubscription = true,
    ///         AllowMaintenanceSubscription = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// statusPageID
    /// 
    /// ```sh
    /// $ pulumi import squadcast:status/page:Page test_status_page 285
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:status/page:Page")]
    public partial class Page : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determines if components subscription is allowed to the status page.
        /// </summary>
        [Output("allowComponentsSubscription")]
        public Output<bool?> AllowComponentsSubscription { get; private set; } = null!;

        /// <summary>
        /// Determines if maintenance subscription is allowed to the status page.
        /// </summary>
        [Output("allowMaintenanceSubscription")]
        public Output<bool?> AllowMaintenanceSubscription { get; private set; } = null!;

        /// <summary>
        /// Determines if webhook subscription is allowed to the status page.
        /// </summary>
        [Output("allowWebhookSubscription")]
        public Output<bool?> AllowWebhookSubscription { get; private set; } = null!;

        /// <summary>
        /// Contact email.
        /// </summary>
        [Output("contactEmail")]
        public Output<string> ContactEmail { get; private set; } = null!;

        /// <summary>
        /// Custom domain name of the status page.
        /// </summary>
        [Output("customDomainName")]
        public Output<string?> CustomDomainName { get; private set; } = null!;

        /// <summary>
        /// Status page description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\n\n/ to form the URL of the status page (can only be set during creation)
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// Determines if the status page is hidden from search engines. Applicable on public status pages only.
        /// </summary>
        [Output("hideFromSearchEngines")]
        public Output<bool?> HideFromSearchEngines { get; private set; } = null!;

        /// <summary>
        /// Determines if the status page is public or not.
        /// </summary>
        [Output("isPublic")]
        public Output<bool> IsPublic { get; private set; } = null!;

        /// <summary>
        /// Status page name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Status page owner.
        /// </summary>
        [Output("owner")]
        public Output<Outputs.PageOwner> Owner { get; private set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Output("teamId")]
        public Output<string> TeamId { get; private set; } = null!;

        /// <summary>
        /// Theme color for the status page.
        /// </summary>
        [Output("themeColor")]
        public Output<Outputs.PageThemeColor> ThemeColor { get; private set; } = null!;

        /// <summary>
        /// Timezone for the status page.
        /// </summary>
        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;


        /// <summary>
        /// Create a Page resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Page(string name, PageArgs args, CustomResourceOptions? options = null)
            : base("squadcast:status/page:Page", name, args ?? new PageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Page(string name, Input<string> id, PageState? state = null, CustomResourceOptions? options = null)
            : base("squadcast:status/page:Page", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/IrisDande/pulumi-squadcast",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Page resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Page Get(string name, Input<string> id, PageState? state = null, CustomResourceOptions? options = null)
        {
            return new Page(name, id, state, options);
        }
    }

    public sealed class PageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines if components subscription is allowed to the status page.
        /// </summary>
        [Input("allowComponentsSubscription")]
        public Input<bool>? AllowComponentsSubscription { get; set; }

        /// <summary>
        /// Determines if maintenance subscription is allowed to the status page.
        /// </summary>
        [Input("allowMaintenanceSubscription")]
        public Input<bool>? AllowMaintenanceSubscription { get; set; }

        /// <summary>
        /// Determines if webhook subscription is allowed to the status page.
        /// </summary>
        [Input("allowWebhookSubscription")]
        public Input<bool>? AllowWebhookSubscription { get; set; }

        /// <summary>
        /// Contact email.
        /// </summary>
        [Input("contactEmail", required: true)]
        public Input<string> ContactEmail { get; set; } = null!;

        /// <summary>
        /// Custom domain name of the status page.
        /// </summary>
        [Input("customDomainName")]
        public Input<string>? CustomDomainName { get; set; }

        /// <summary>
        /// Status page description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\n\n/ to form the URL of the status page (can only be set during creation)
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// Determines if the status page is hidden from search engines. Applicable on public status pages only.
        /// </summary>
        [Input("hideFromSearchEngines")]
        public Input<bool>? HideFromSearchEngines { get; set; }

        /// <summary>
        /// Determines if the status page is public or not.
        /// </summary>
        [Input("isPublic", required: true)]
        public Input<bool> IsPublic { get; set; } = null!;

        /// <summary>
        /// Status page name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Status page owner.
        /// </summary>
        [Input("owner", required: true)]
        public Input<Inputs.PageOwnerArgs> Owner { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        /// <summary>
        /// Theme color for the status page.
        /// </summary>
        [Input("themeColor", required: true)]
        public Input<Inputs.PageThemeColorArgs> ThemeColor { get; set; } = null!;

        /// <summary>
        /// Timezone for the status page.
        /// </summary>
        [Input("timezone", required: true)]
        public Input<string> Timezone { get; set; } = null!;

        public PageArgs()
        {
        }
        public static new PageArgs Empty => new PageArgs();
    }

    public sealed class PageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines if components subscription is allowed to the status page.
        /// </summary>
        [Input("allowComponentsSubscription")]
        public Input<bool>? AllowComponentsSubscription { get; set; }

        /// <summary>
        /// Determines if maintenance subscription is allowed to the status page.
        /// </summary>
        [Input("allowMaintenanceSubscription")]
        public Input<bool>? AllowMaintenanceSubscription { get; set; }

        /// <summary>
        /// Determines if webhook subscription is allowed to the status page.
        /// </summary>
        [Input("allowWebhookSubscription")]
        public Input<bool>? AllowWebhookSubscription { get; set; }

        /// <summary>
        /// Contact email.
        /// </summary>
        [Input("contactEmail")]
        public Input<string>? ContactEmail { get; set; }

        /// <summary>
        /// Custom domain name of the status page.
        /// </summary>
        [Input("customDomainName")]
        public Input<string>? CustomDomainName { get; set; }

        /// <summary>
        /// Status page description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\n\n/ to form the URL of the status page (can only be set during creation)
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Determines if the status page is hidden from search engines. Applicable on public status pages only.
        /// </summary>
        [Input("hideFromSearchEngines")]
        public Input<bool>? HideFromSearchEngines { get; set; }

        /// <summary>
        /// Determines if the status page is public or not.
        /// </summary>
        [Input("isPublic")]
        public Input<bool>? IsPublic { get; set; }

        /// <summary>
        /// Status page name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Status page owner.
        /// </summary>
        [Input("owner")]
        public Input<Inputs.PageOwnerGetArgs>? Owner { get; set; }

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        /// <summary>
        /// Theme color for the status page.
        /// </summary>
        [Input("themeColor")]
        public Input<Inputs.PageThemeColorGetArgs>? ThemeColor { get; set; }

        /// <summary>
        /// Timezone for the status page.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        public PageState()
        {
        }
        public static new PageState Empty => new PageState();
    }
}
