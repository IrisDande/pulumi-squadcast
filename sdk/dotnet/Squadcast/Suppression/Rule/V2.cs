// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast.Suppression.Rule
{
    /// <summary>
    /// [Suppression rules](https://support.squadcast.com/docs/alert-suppression) can help you avoid alert fatigue by suppressing notifications for non-actionable alerts.Squadcast will suppress the incidents that match any of the Suppression Rules you create for your Services. These incidents will go into the Suppressed state and you will not get any notifications for them
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = IrisDanded.Pulumi.Squadcast;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleTeam = Squadcast.GetTeam.Invoke(new()
    ///     {
    ///         Name = "exammple team name",
    ///     });
    /// 
    ///     var exampleService = Squadcast.GetService.Invoke(new()
    ///     {
    ///         Name = "example service name",
    ///         TeamId = exampleTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///     });
    /// 
    ///     var exampleBasicSuppressionRules = new Squadcast.Suppression.Rule.V2("exampleBasicSuppressionRules", new()
    ///     {
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         IsBasic = true,
    ///         Description = "sample basic expression",
    ///         BasicExpressions = new[]
    ///         {
    ///             new Squadcast.Suppression.Rule.Inputs.V2BasicExpressionArgs
    ///             {
    ///                 Lhs = "abc",
    ///                 Op = "is",
    ///                 Rhs = "xyz",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleSuppressionRules = new Squadcast.Suppression.Rule.V2("exampleSuppressionRules", new()
    ///     {
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         IsBasic = false,
    ///         Description = "not basic",
    ///         Expression = "payload[\"event_id\"] == 40",
    ///     });
    /// 
    ///     var exampleTimeBasedSuppressionRules = new Squadcast.Suppression.Rule.V2("exampleTimeBasedSuppressionRules", new()
    ///     {
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         IsBasic = false,
    ///         Description = "not basic",
    ///         Expression = "payload[\"event_id\"] == 40",
    ///         Timeslots = new[]
    ///         {
    ///             new Squadcast.Suppression.Rule.Inputs.V2TimeslotArgs
    ///             {
    ///                 TimeZone = "Asia/Calcutta",
    ///                 StartTime = "2022-04-08T06:22:14.975Z",
    ///                 EndTime = "2022-04-28T06:22:14.975Z",
    ///                 EndsOn = "2022-04-28T06:22:14.975Z",
    ///                 Repetition = "none",
    ///                 IsAllday = false,
    ///                 EndsNever = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleTimeBasedSuppressionRulesCustomRepetition = new Squadcast.Suppression.Rule.V2("exampleTimeBasedSuppressionRulesCustomRepetition", new()
    ///     {
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         IsBasic = false,
    ///         Description = "not basic",
    ///         Expression = "payload[\"event_id\"] == 40",
    ///         Timeslots = new[]
    ///         {
    ///             new Squadcast.Suppression.Rule.Inputs.V2TimeslotArgs
    ///             {
    ///                 TimeZone = "Asia/Calcutta",
    ///                 StartTime = "2022-04-08T06:22:14.975Z",
    ///                 EndTime = "2022-04-28T06:22:14.975Z",
    ///                 EndsOn = "2022-04-28T06:22:14.975Z",
    ///                 Repetition = "custom",
    ///                 IsAllday = false,
    ///                 EndsNever = true,
    ///                 Customs = new[]
    ///                 {
    ///                     new Squadcast.Suppression.Rule.Inputs.V2TimeslotCustomArgs
    ///                     {
    ///                         Repeats = "day",
    ///                         RepeatsCount = 2,
    ///                     },
    ///                 },
    ///             },
    ///             new Squadcast.Suppression.Rule.Inputs.V2TimeslotArgs
    ///             {
    ///                 TimeZone = "Asia/Calcutta",
    ///                 StartTime = "2022-04-08T06:22:14.975Z",
    ///                 EndTime = "2022-04-28T06:22:14.975Z",
    ///                 EndsOn = "2022-04-28T06:22:14.975Z",
    ///                 Repetition = "custom",
    ///                 IsAllday = false,
    ///                 EndsNever = true,
    ///                 Customs = new[]
    ///                 {
    ///                     new Squadcast.Suppression.Rule.Inputs.V2TimeslotCustomArgs
    ///                     {
    ///                         Repeats = "week",
    ///                         RepeatsCount = 4,
    ///                         RepeatsOnWeekdays = new[]
    ///                         {
    ///                             0,
    ///                             1,
    ///                             2,
    ///                             3,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Squadcast.Suppression.Rule.Inputs.V2TimeslotArgs
    ///             {
    ///                 TimeZone = "Asia/Calcutta",
    ///                 StartTime = "2022-04-08T06:22:14.975Z",
    ///                 EndTime = "2022-04-28T06:22:14.975Z",
    ///                 EndsOn = "2022-04-28T06:22:14.975Z",
    ///                 Repetition = "custom",
    ///                 IsAllday = false,
    ///                 EndsNever = true,
    ///                 Customs = new[]
    ///                 {
    ///                     new Squadcast.Suppression.Rule.Inputs.V2TimeslotCustomArgs
    ///                     {
    ///                         Repeats = "month",
    ///                         RepeatsCount = 6,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// serviceID:ruleID
    /// 
    /// ```sh
    /// $ pulumi import squadcast:suppression/rule/v2:V2 test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:suppression/rule/v2:V2")]
    public partial class V2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The basic expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        [Output("basicExpressions")]
        public Output<ImmutableArray<Outputs.V2BasicExpression>> BasicExpressions { get; private set; } = null!;

        /// <summary>
        /// description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        [Output("expression")]
        public Output<string?> Expression { get; private set; } = null!;

        /// <summary>
        /// is_basic will be true when users use the drop down selectors which will have lhs, op &amp; rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        /// </summary>
        [Output("isBasic")]
        public Output<bool> IsBasic { get; private set; } = null!;

        /// <summary>
        /// is_timebased will be true when users use the time based suppression rule
        /// </summary>
        [Output("isTimebased")]
        public Output<bool> IsTimebased { get; private set; } = null!;

        /// <summary>
        /// Service id.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// The timeslots for which this rule should be applied.
        /// </summary>
        [Output("timeslots")]
        public Output<ImmutableArray<Outputs.V2Timeslot>> Timeslots { get; private set; } = null!;


        /// <summary>
        /// Create a V2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public V2(string name, V2Args args, CustomResourceOptions? options = null)
            : base("squadcast:suppression/rule/v2:V2", name, args ?? new V2Args(), MakeResourceOptions(options, ""))
        {
        }

        private V2(string name, Input<string> id, V2State? state = null, CustomResourceOptions? options = null)
            : base("squadcast:suppression/rule/v2:V2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/IrisDande/pulumi-squadcast",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing V2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static V2 Get(string name, Input<string> id, V2State? state = null, CustomResourceOptions? options = null)
        {
            return new V2(name, id, state, options);
        }
    }

    public sealed class V2Args : global::Pulumi.ResourceArgs
    {
        [Input("basicExpressions")]
        private InputList<Inputs.V2BasicExpressionArgs>? _basicExpressions;

        /// <summary>
        /// The basic expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        public InputList<Inputs.V2BasicExpressionArgs> BasicExpressions
        {
            get => _basicExpressions ?? (_basicExpressions = new InputList<Inputs.V2BasicExpressionArgs>());
            set => _basicExpressions = value;
        }

        /// <summary>
        /// description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        [Input("expression")]
        public Input<string>? Expression { get; set; }

        /// <summary>
        /// is_basic will be true when users use the drop down selectors which will have lhs, op &amp; rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        /// </summary>
        [Input("isBasic", required: true)]
        public Input<bool> IsBasic { get; set; } = null!;

        /// <summary>
        /// Service id.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        [Input("timeslots")]
        private InputList<Inputs.V2TimeslotArgs>? _timeslots;

        /// <summary>
        /// The timeslots for which this rule should be applied.
        /// </summary>
        public InputList<Inputs.V2TimeslotArgs> Timeslots
        {
            get => _timeslots ?? (_timeslots = new InputList<Inputs.V2TimeslotArgs>());
            set => _timeslots = value;
        }

        public V2Args()
        {
        }
        public static new V2Args Empty => new V2Args();
    }

    public sealed class V2State : global::Pulumi.ResourceArgs
    {
        [Input("basicExpressions")]
        private InputList<Inputs.V2BasicExpressionGetArgs>? _basicExpressions;

        /// <summary>
        /// The basic expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        public InputList<Inputs.V2BasicExpressionGetArgs> BasicExpressions
        {
            get => _basicExpressions ?? (_basicExpressions = new InputList<Inputs.V2BasicExpressionGetArgs>());
            set => _basicExpressions = value;
        }

        /// <summary>
        /// description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        [Input("expression")]
        public Input<string>? Expression { get; set; }

        /// <summary>
        /// is_basic will be true when users use the drop down selectors which will have lhs, op &amp; rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        /// </summary>
        [Input("isBasic")]
        public Input<bool>? IsBasic { get; set; }

        /// <summary>
        /// is_timebased will be true when users use the time based suppression rule
        /// </summary>
        [Input("isTimebased")]
        public Input<bool>? IsTimebased { get; set; }

        /// <summary>
        /// Service id.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        [Input("timeslots")]
        private InputList<Inputs.V2TimeslotGetArgs>? _timeslots;

        /// <summary>
        /// The timeslots for which this rule should be applied.
        /// </summary>
        public InputList<Inputs.V2TimeslotGetArgs> Timeslots
        {
            get => _timeslots ?? (_timeslots = new InputList<Inputs.V2TimeslotGetArgs>());
            set => _timeslots = value;
        }

        public V2State()
        {
        }
        public static new V2State Empty => new V2State();
    }
}
