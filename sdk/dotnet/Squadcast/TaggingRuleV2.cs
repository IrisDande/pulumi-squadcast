// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast
{
    /// <summary>
    /// [Tagging](https://support.squadcast.com/docs/event-tagging) is a rule-based, auto-tagging system with which you can define customised tags based on incident payloads, that get automatically assigned to incidents when they are triggered.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Squadcast = IrisDanded.Pulumi.Squadcast;
    /// using Squadcast = Pulumi.Squadcast;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleService = Squadcast.GetService.Invoke(new()
    ///     {
    ///         Name = "example service name",
    ///         TeamId = data.Squadcast_team.Example_team.Id,
    ///     });
    /// 
    ///     var exampleTaggingRule = new Squadcast.TaggingRuleV2("exampleTaggingRule", new()
    ///     {
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         IsBasic = false,
    ///         Expression = "payload[\"event_id\"] == 40",
    ///         Tags = new[]
    ///         {
    ///             new Squadcast.Inputs.TaggingRuleV2TagArgs
    ///             {
    ///                 Key = "MyTag",
    ///                 Value = "foo",
    ///                 Color = "#ababab",
    ///             },
    ///             new Squadcast.Inputs.TaggingRuleV2TagArgs
    ///             {
    ///                 Key = "MyTag2",
    ///                 Value = "bar",
    ///                 Color = "#f0f0f0",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleBasicTaggingRule = new Squadcast.TaggingRuleV2("exampleBasicTaggingRule", new()
    ///     {
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         IsBasic = true,
    ///         BasicExpressions = new[]
    ///         {
    ///             new Squadcast.Inputs.TaggingRuleV2BasicExpressionArgs
    ///             {
    ///                 Lhs = "payload[\"foo\"]",
    ///                 Op = "is",
    ///                 Rhs = "bar",
    ///             },
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new Squadcast.Inputs.TaggingRuleV2TagArgs
    ///             {
    ///                 Key = "MyTag",
    ///                 Value = "foo",
    ///                 Color = "#ababab",
    ///             },
    ///         },
    ///     });
    /// 
    ///     // addTags must be set in expression when tags are not passed
    ///     var exampleTaggingRulesResourceWithouttags = new Squadcast.TaggingRuleV2("exampleTaggingRulesResourceWithouttags", new()
    ///     {
    ///         ServiceId = exampleService.Apply(getServiceResult =&gt; getServiceResult.Id),
    ///         IsBasic = false,
    ///         Expression = "addTag(\"EventType\", payload.details.event_type_key, \"#037916\")",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// serviceID:ruleID
    /// 
    /// ```sh
    /// $ pulumi import squadcast:index/taggingRuleV2:TaggingRuleV2 test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
    /// ```
    /// </summary>
    [SquadcastResourceType("squadcast:index/taggingRuleV2:TaggingRuleV2")]
    public partial class TaggingRuleV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The basic expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        [Output("basicExpressions")]
        public Output<ImmutableArray<Outputs.TaggingRuleV2BasicExpression>> BasicExpressions { get; private set; } = null!;

        /// <summary>
        /// The expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        [Output("expression")]
        public Output<string?> Expression { get; private set; } = null!;

        /// <summary>
        /// is_basic will be true when users use the drop down selectors which will have lhs, op &amp; rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        /// </summary>
        [Output("isBasic")]
        public Output<bool> IsBasic { get; private set; } = null!;

        /// <summary>
        /// Service id.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.TaggingRuleV2Tag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a TaggingRuleV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TaggingRuleV2(string name, TaggingRuleV2Args args, CustomResourceOptions? options = null)
            : base("squadcast:index/taggingRuleV2:TaggingRuleV2", name, args ?? new TaggingRuleV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private TaggingRuleV2(string name, Input<string> id, TaggingRuleV2State? state = null, CustomResourceOptions? options = null)
            : base("squadcast:index/taggingRuleV2:TaggingRuleV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/IrisDande/pulumi-squadcast",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TaggingRuleV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TaggingRuleV2 Get(string name, Input<string> id, TaggingRuleV2State? state = null, CustomResourceOptions? options = null)
        {
            return new TaggingRuleV2(name, id, state, options);
        }
    }

    public sealed class TaggingRuleV2Args : global::Pulumi.ResourceArgs
    {
        [Input("basicExpressions")]
        private InputList<Inputs.TaggingRuleV2BasicExpressionArgs>? _basicExpressions;

        /// <summary>
        /// The basic expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        public InputList<Inputs.TaggingRuleV2BasicExpressionArgs> BasicExpressions
        {
            get => _basicExpressions ?? (_basicExpressions = new InputList<Inputs.TaggingRuleV2BasicExpressionArgs>());
            set => _basicExpressions = value;
        }

        /// <summary>
        /// The expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        [Input("expression")]
        public Input<string>? Expression { get; set; }

        /// <summary>
        /// is_basic will be true when users use the drop down selectors which will have lhs, op &amp; rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        /// </summary>
        [Input("isBasic", required: true)]
        public Input<bool> IsBasic { get; set; } = null!;

        /// <summary>
        /// Service id.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.TaggingRuleV2TagArgs>? _tags;

        /// <summary>
        /// The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
        /// </summary>
        public InputList<Inputs.TaggingRuleV2TagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.TaggingRuleV2TagArgs>());
            set => _tags = value;
        }

        public TaggingRuleV2Args()
        {
        }
        public static new TaggingRuleV2Args Empty => new TaggingRuleV2Args();
    }

    public sealed class TaggingRuleV2State : global::Pulumi.ResourceArgs
    {
        [Input("basicExpressions")]
        private InputList<Inputs.TaggingRuleV2BasicExpressionGetArgs>? _basicExpressions;

        /// <summary>
        /// The basic expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        public InputList<Inputs.TaggingRuleV2BasicExpressionGetArgs> BasicExpressions
        {
            get => _basicExpressions ?? (_basicExpressions = new InputList<Inputs.TaggingRuleV2BasicExpressionGetArgs>());
            set => _basicExpressions = value;
        }

        /// <summary>
        /// The expression which needs to be evaluated to be true for this rule to apply.
        /// </summary>
        [Input("expression")]
        public Input<string>? Expression { get; set; }

        /// <summary>
        /// is_basic will be true when users use the drop down selectors which will have lhs, op &amp; rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        /// </summary>
        [Input("isBasic")]
        public Input<bool>? IsBasic { get; set; }

        /// <summary>
        /// Service id.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        [Input("tags")]
        private InputList<Inputs.TaggingRuleV2TagGetArgs>? _tags;

        /// <summary>
        /// The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
        /// </summary>
        public InputList<Inputs.TaggingRuleV2TagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.TaggingRuleV2TagGetArgs>());
            set => _tags = value;
        }

        public TaggingRuleV2State()
        {
        }
        public static new TaggingRuleV2State Empty => new TaggingRuleV2State();
    }
}
