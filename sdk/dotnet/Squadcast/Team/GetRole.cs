// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast.Team
{
    public static class GetRole
    {
        /// <summary>
        /// Team roles are a way to define abilities/permissions for a user in the team. Each team role can be considered as a set of permissions that can be assigned to a user. Use this data source to get information about various team roles.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Squadcast = Pulumi.Squadcast;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Squadcast.Team.GetRole.Invoke(new()
        ///     {
        ///         Name = "testRole",
        ///         TeamId = "team id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRoleResult> InvokeAsync(GetRoleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleResult>("squadcast:team/getRole:getRole", args ?? new GetRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Team roles are a way to define abilities/permissions for a user in the team. Each team role can be considered as a set of permissions that can be assigned to a user. Use this data source to get information about various team roles.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Squadcast = Pulumi.Squadcast;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Squadcast.Team.GetRole.Invoke(new()
        ///     {
        ///         Name = "testRole",
        ///         TeamId = "team id",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRoleResult> Invoke(GetRoleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleResult>("squadcast:team/getRole:getRole", args ?? new GetRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// TeamRole name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public string TeamId { get; set; } = null!;

        public GetRoleArgs()
        {
        }
        public static new GetRoleArgs Empty => new GetRoleArgs();
    }

    public sealed class GetRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// TeamRole name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Team id.
        /// </summary>
        [Input("teamId", required: true)]
        public Input<string> TeamId { get; set; } = null!;

        public GetRoleInvokeArgs()
        {
        }
        public static new GetRoleInvokeArgs Empty => new GetRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleResult
    {
        /// <summary>
        /// All the abilities attached to a role.
        /// </summary>
        public readonly ImmutableArray<string> Abilities;
        /// <summary>
        /// Role is default.
        /// </summary>
        public readonly bool Default;
        /// <summary>
        /// Role id.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// TeamRole name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Team id.
        /// </summary>
        public readonly string TeamId;

        [OutputConstructor]
        private GetRoleResult(
            ImmutableArray<string> abilities,

            bool @default,

            string id,

            string name,

            string teamId)
        {
            Abilities = abilities;
            Default = @default;
            Id = id;
            Name = name;
            TeamId = teamId;
        }
    }
}
