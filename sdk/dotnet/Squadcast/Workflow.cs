// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [SquadcastResourceType("squadcast:index/workflow:Workflow")]
    public partial class Workflow : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the workflow
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the workflow is enabled or not
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The entity owner of the workflow
        /// </summary>
        [Output("entityOwners")]
        public Output<ImmutableArray<Outputs.WorkflowEntityOwner>> EntityOwners { get; private set; } = null!;

        /// <summary>
        /// The filters to be applied on the workflow
        /// </summary>
        [Output("filters")]
        public Output<Outputs.WorkflowFilters?> Filters { get; private set; } = null!;

        /// <summary>
        /// The ID of the user who owns the workflow
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// The tags to be applied on the workflow
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.WorkflowTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The title of the workflow
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// The trigger for the workflow
        /// </summary>
        [Output("trigger")]
        public Output<string> Trigger { get; private set; } = null!;


        /// <summary>
        /// Create a Workflow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workflow(string name, WorkflowArgs args, CustomResourceOptions? options = null)
            : base("squadcast:index/workflow:Workflow", name, args ?? new WorkflowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Workflow(string name, Input<string> id, WorkflowState? state = null, CustomResourceOptions? options = null)
            : base("squadcast:index/workflow:Workflow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/IrisDande/pulumi-squadcast",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workflow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workflow Get(string name, Input<string> id, WorkflowState? state = null, CustomResourceOptions? options = null)
        {
            return new Workflow(name, id, state, options);
        }
    }

    public sealed class WorkflowArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the workflow
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the workflow is enabled or not
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("entityOwners", required: true)]
        private InputList<Inputs.WorkflowEntityOwnerArgs>? _entityOwners;

        /// <summary>
        /// The entity owner of the workflow
        /// </summary>
        public InputList<Inputs.WorkflowEntityOwnerArgs> EntityOwners
        {
            get => _entityOwners ?? (_entityOwners = new InputList<Inputs.WorkflowEntityOwnerArgs>());
            set => _entityOwners = value;
        }

        /// <summary>
        /// The filters to be applied on the workflow
        /// </summary>
        [Input("filters")]
        public Input<Inputs.WorkflowFiltersArgs>? Filters { get; set; }

        /// <summary>
        /// The ID of the user who owns the workflow
        /// </summary>
        [Input("ownerId", required: true)]
        public Input<string> OwnerId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.WorkflowTagArgs>? _tags;

        /// <summary>
        /// The tags to be applied on the workflow
        /// </summary>
        public InputList<Inputs.WorkflowTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.WorkflowTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The title of the workflow
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        /// <summary>
        /// The trigger for the workflow
        /// </summary>
        [Input("trigger", required: true)]
        public Input<string> Trigger { get; set; } = null!;

        public WorkflowArgs()
        {
        }
        public static new WorkflowArgs Empty => new WorkflowArgs();
    }

    public sealed class WorkflowState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the workflow
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the workflow is enabled or not
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("entityOwners")]
        private InputList<Inputs.WorkflowEntityOwnerGetArgs>? _entityOwners;

        /// <summary>
        /// The entity owner of the workflow
        /// </summary>
        public InputList<Inputs.WorkflowEntityOwnerGetArgs> EntityOwners
        {
            get => _entityOwners ?? (_entityOwners = new InputList<Inputs.WorkflowEntityOwnerGetArgs>());
            set => _entityOwners = value;
        }

        /// <summary>
        /// The filters to be applied on the workflow
        /// </summary>
        [Input("filters")]
        public Input<Inputs.WorkflowFiltersGetArgs>? Filters { get; set; }

        /// <summary>
        /// The ID of the user who owns the workflow
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        [Input("tags")]
        private InputList<Inputs.WorkflowTagGetArgs>? _tags;

        /// <summary>
        /// The tags to be applied on the workflow
        /// </summary>
        public InputList<Inputs.WorkflowTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.WorkflowTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The title of the workflow
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// The trigger for the workflow
        /// </summary>
        [Input("trigger")]
        public Input<string>? Trigger { get; set; }

        public WorkflowState()
        {
        }
        public static new WorkflowState Empty => new WorkflowState();
    }
}
