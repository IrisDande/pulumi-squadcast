// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace IrisDanded.Pulumi.Squadcast.Workflow
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [SquadcastResourceType("squadcast:Workflow/action:Action")]
    public partial class Action : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Output("account")]
        public Output<string?> Account { get; private set; } = null!;

        /// <summary>
        /// Whether to automatically name the action
        /// </summary>
        [Output("autoName")]
        public Output<bool?> AutoName { get; private set; } = null!;

        /// <summary>
        /// The body of the request
        /// </summary>
        [Output("body")]
        public Output<string?> Body { get; private set; } = null!;

        /// <summary>
        /// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
        /// </summary>
        [Output("channelId")]
        public Output<string?> ChannelId { get; private set; } = null!;

        /// <summary>
        /// The name of the channel to be archived. (Only for Slack Archive Channel action)
        /// </summary>
        [Output("channelName")]
        public Output<string?> ChannelName { get; private set; } = null!;

        /// <summary>
        /// The communication channels to be added to the incident
        /// </summary>
        [Output("channels")]
        public Output<ImmutableArray<Outputs.ActionChannel>> Channels { get; private set; } = null!;

        /// <summary>
        /// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
        /// </summary>
        [Output("componentAndImpacts")]
        public Output<ImmutableArray<Outputs.ActionComponentAndImpact>> ComponentAndImpacts { get; private set; } = null!;

        /// <summary>
        /// The description of the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The headers to be sent with the request
        /// </summary>
        [Output("headers")]
        public Output<ImmutableArray<Outputs.ActionHeader>> Headers { get; private set; } = null!;

        /// <summary>
        /// The title of the issue to be added. (Only for Add Status Page Issue action)
        /// </summary>
        [Output("issueTitle")]
        public Output<string?> IssueTitle { get; private set; } = null!;

        /// <summary>
        /// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Output("issueType")]
        public Output<string?> IssueType { get; private set; } = null!;

        /// <summary>
        /// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
        /// </summary>
        [Output("memberId")]
        public Output<string?> MemberId { get; private set; } = null!;

        /// <summary>
        /// The message to be sent. (Only for Slack/MS-Team Message Channel action)
        /// </summary>
        [Output("message")]
        public Output<string?> Message { get; private set; } = null!;

        /// <summary>
        /// The HTTP method to be used for the call
        /// </summary>
        [Output("method")]
        public Output<string?> Method { get; private set; } = null!;

        /// <summary>
        /// The name of the action
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The note to be added to the incident
        /// </summary>
        [Output("note")]
        public Output<string?> Note { get; private set; } = null!;

        /// <summary>
        /// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
        /// </summary>
        [Output("pageStatusId")]
        public Output<int?> PageStatusId { get; private set; } = null!;

        /// <summary>
        /// The priority of the incident
        /// </summary>
        [Output("priority")]
        public Output<string?> Priority { get; private set; } = null!;

        /// <summary>
        /// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Output("project")]
        public Output<string?> Project { get; private set; } = null!;

        /// <summary>
        /// The runbooks to be added to the incident
        /// </summary>
        [Output("runbooks")]
        public Output<ImmutableArray<string>> Runbooks { get; private set; } = null!;

        /// <summary>
        /// The SLIs to be added to the incident
        /// </summary>
        [Output("slis")]
        public Output<ImmutableArray<string>> Slis { get; private set; } = null!;

        /// <summary>
        /// ID of the SLO to be added to the incident
        /// </summary>
        [Output("slo")]
        public Output<int?> Slo { get; private set; } = null!;

        /// <summary>
        /// The status and message to be set for the issue. (Only for Add Status Page Issue action)
        /// </summary>
        [Output("statusAndMessages")]
        public Output<ImmutableArray<Outputs.ActionStatusAndMessage>> StatusAndMessages { get; private set; } = null!;

        /// <summary>
        /// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
        /// </summary>
        [Output("statusPageId")]
        public Output<int?> StatusPageId { get; private set; } = null!;

        /// <summary>
        /// The subject of the email
        /// </summary>
        [Output("subject")]
        public Output<string?> Subject { get; private set; } = null!;

        /// <summary>
        /// The title of the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Output("title")]
        public Output<string?> Title { get; private set; } = null!;

        /// <summary>
        /// The email addresses to which the email is to be sent
        /// </summary>
        [Output("tos")]
        public Output<ImmutableArray<string>> Tos { get; private set; } = null!;

        /// <summary>
        /// The URL to be called
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;

        /// <summary>
        /// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
        /// </summary>
        [Output("webhookId")]
        public Output<string?> WebhookId { get; private set; } = null!;

        /// <summary>
        /// The ID of the workflow to which this action belongs
        /// </summary>
        [Output("workflowId")]
        public Output<string> WorkflowId { get; private set; } = null!;


        /// <summary>
        /// Create a Action resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Action(string name, ActionArgs args, CustomResourceOptions? options = null)
            : base("squadcast:Workflow/action:Action", name, args ?? new ActionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Action(string name, Input<string> id, ActionState? state = null, CustomResourceOptions? options = null)
            : base("squadcast:Workflow/action:Action", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/IrisDande/pulumi-squadcast",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Action resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Action Get(string name, Input<string> id, ActionState? state = null, CustomResourceOptions? options = null)
        {
            return new Action(name, id, state, options);
        }
    }

    public sealed class ActionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Input("account")]
        public Input<string>? Account { get; set; }

        /// <summary>
        /// Whether to automatically name the action
        /// </summary>
        [Input("autoName")]
        public Input<bool>? AutoName { get; set; }

        /// <summary>
        /// The body of the request
        /// </summary>
        [Input("body")]
        public Input<string>? Body { get; set; }

        /// <summary>
        /// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
        /// </summary>
        [Input("channelId")]
        public Input<string>? ChannelId { get; set; }

        /// <summary>
        /// The name of the channel to be archived. (Only for Slack Archive Channel action)
        /// </summary>
        [Input("channelName")]
        public Input<string>? ChannelName { get; set; }

        [Input("channels")]
        private InputList<Inputs.ActionChannelArgs>? _channels;

        /// <summary>
        /// The communication channels to be added to the incident
        /// </summary>
        public InputList<Inputs.ActionChannelArgs> Channels
        {
            get => _channels ?? (_channels = new InputList<Inputs.ActionChannelArgs>());
            set => _channels = value;
        }

        [Input("componentAndImpacts")]
        private InputList<Inputs.ActionComponentAndImpactArgs>? _componentAndImpacts;

        /// <summary>
        /// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
        /// </summary>
        public InputList<Inputs.ActionComponentAndImpactArgs> ComponentAndImpacts
        {
            get => _componentAndImpacts ?? (_componentAndImpacts = new InputList<Inputs.ActionComponentAndImpactArgs>());
            set => _componentAndImpacts = value;
        }

        /// <summary>
        /// The description of the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("headers")]
        private InputList<Inputs.ActionHeaderArgs>? _headers;

        /// <summary>
        /// The headers to be sent with the request
        /// </summary>
        public InputList<Inputs.ActionHeaderArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.ActionHeaderArgs>());
            set => _headers = value;
        }

        /// <summary>
        /// The title of the issue to be added. (Only for Add Status Page Issue action)
        /// </summary>
        [Input("issueTitle")]
        public Input<string>? IssueTitle { get; set; }

        /// <summary>
        /// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Input("issueType")]
        public Input<string>? IssueType { get; set; }

        /// <summary>
        /// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
        /// </summary>
        [Input("memberId")]
        public Input<string>? MemberId { get; set; }

        /// <summary>
        /// The message to be sent. (Only for Slack/MS-Team Message Channel action)
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// The HTTP method to be used for the call
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The name of the action
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The note to be added to the incident
        /// </summary>
        [Input("note")]
        public Input<string>? Note { get; set; }

        /// <summary>
        /// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
        /// </summary>
        [Input("pageStatusId")]
        public Input<int>? PageStatusId { get; set; }

        /// <summary>
        /// The priority of the incident
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        /// <summary>
        /// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("runbooks")]
        private InputList<string>? _runbooks;

        /// <summary>
        /// The runbooks to be added to the incident
        /// </summary>
        public InputList<string> Runbooks
        {
            get => _runbooks ?? (_runbooks = new InputList<string>());
            set => _runbooks = value;
        }

        [Input("slis")]
        private InputList<string>? _slis;

        /// <summary>
        /// The SLIs to be added to the incident
        /// </summary>
        public InputList<string> Slis
        {
            get => _slis ?? (_slis = new InputList<string>());
            set => _slis = value;
        }

        /// <summary>
        /// ID of the SLO to be added to the incident
        /// </summary>
        [Input("slo")]
        public Input<int>? Slo { get; set; }

        [Input("statusAndMessages")]
        private InputList<Inputs.ActionStatusAndMessageArgs>? _statusAndMessages;

        /// <summary>
        /// The status and message to be set for the issue. (Only for Add Status Page Issue action)
        /// </summary>
        public InputList<Inputs.ActionStatusAndMessageArgs> StatusAndMessages
        {
            get => _statusAndMessages ?? (_statusAndMessages = new InputList<Inputs.ActionStatusAndMessageArgs>());
            set => _statusAndMessages = value;
        }

        /// <summary>
        /// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
        /// </summary>
        [Input("statusPageId")]
        public Input<int>? StatusPageId { get; set; }

        /// <summary>
        /// The subject of the email
        /// </summary>
        [Input("subject")]
        public Input<string>? Subject { get; set; }

        /// <summary>
        /// The title of the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("tos")]
        private InputList<string>? _tos;

        /// <summary>
        /// The email addresses to which the email is to be sent
        /// </summary>
        public InputList<string> Tos
        {
            get => _tos ?? (_tos = new InputList<string>());
            set => _tos = value;
        }

        /// <summary>
        /// The URL to be called
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
        /// </summary>
        [Input("webhookId")]
        public Input<string>? WebhookId { get; set; }

        /// <summary>
        /// The ID of the workflow to which this action belongs
        /// </summary>
        [Input("workflowId", required: true)]
        public Input<string> WorkflowId { get; set; } = null!;

        public ActionArgs()
        {
        }
        public static new ActionArgs Empty => new ActionArgs();
    }

    public sealed class ActionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Input("account")]
        public Input<string>? Account { get; set; }

        /// <summary>
        /// Whether to automatically name the action
        /// </summary>
        [Input("autoName")]
        public Input<bool>? AutoName { get; set; }

        /// <summary>
        /// The body of the request
        /// </summary>
        [Input("body")]
        public Input<string>? Body { get; set; }

        /// <summary>
        /// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
        /// </summary>
        [Input("channelId")]
        public Input<string>? ChannelId { get; set; }

        /// <summary>
        /// The name of the channel to be archived. (Only for Slack Archive Channel action)
        /// </summary>
        [Input("channelName")]
        public Input<string>? ChannelName { get; set; }

        [Input("channels")]
        private InputList<Inputs.ActionChannelGetArgs>? _channels;

        /// <summary>
        /// The communication channels to be added to the incident
        /// </summary>
        public InputList<Inputs.ActionChannelGetArgs> Channels
        {
            get => _channels ?? (_channels = new InputList<Inputs.ActionChannelGetArgs>());
            set => _channels = value;
        }

        [Input("componentAndImpacts")]
        private InputList<Inputs.ActionComponentAndImpactGetArgs>? _componentAndImpacts;

        /// <summary>
        /// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
        /// </summary>
        public InputList<Inputs.ActionComponentAndImpactGetArgs> ComponentAndImpacts
        {
            get => _componentAndImpacts ?? (_componentAndImpacts = new InputList<Inputs.ActionComponentAndImpactGetArgs>());
            set => _componentAndImpacts = value;
        }

        /// <summary>
        /// The description of the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("headers")]
        private InputList<Inputs.ActionHeaderGetArgs>? _headers;

        /// <summary>
        /// The headers to be sent with the request
        /// </summary>
        public InputList<Inputs.ActionHeaderGetArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.ActionHeaderGetArgs>());
            set => _headers = value;
        }

        /// <summary>
        /// The title of the issue to be added. (Only for Add Status Page Issue action)
        /// </summary>
        [Input("issueTitle")]
        public Input<string>? IssueTitle { get; set; }

        /// <summary>
        /// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Input("issueType")]
        public Input<string>? IssueType { get; set; }

        /// <summary>
        /// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
        /// </summary>
        [Input("memberId")]
        public Input<string>? MemberId { get; set; }

        /// <summary>
        /// The message to be sent. (Only for Slack/MS-Team Message Channel action)
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// The HTTP method to be used for the call
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The name of the action
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The note to be added to the incident
        /// </summary>
        [Input("note")]
        public Input<string>? Note { get; set; }

        /// <summary>
        /// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
        /// </summary>
        [Input("pageStatusId")]
        public Input<int>? PageStatusId { get; set; }

        /// <summary>
        /// The priority of the incident
        /// </summary>
        [Input("priority")]
        public Input<string>? Priority { get; set; }

        /// <summary>
        /// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        [Input("runbooks")]
        private InputList<string>? _runbooks;

        /// <summary>
        /// The runbooks to be added to the incident
        /// </summary>
        public InputList<string> Runbooks
        {
            get => _runbooks ?? (_runbooks = new InputList<string>());
            set => _runbooks = value;
        }

        [Input("slis")]
        private InputList<string>? _slis;

        /// <summary>
        /// The SLIs to be added to the incident
        /// </summary>
        public InputList<string> Slis
        {
            get => _slis ?? (_slis = new InputList<string>());
            set => _slis = value;
        }

        /// <summary>
        /// ID of the SLO to be added to the incident
        /// </summary>
        [Input("slo")]
        public Input<int>? Slo { get; set; }

        [Input("statusAndMessages")]
        private InputList<Inputs.ActionStatusAndMessageGetArgs>? _statusAndMessages;

        /// <summary>
        /// The status and message to be set for the issue. (Only for Add Status Page Issue action)
        /// </summary>
        public InputList<Inputs.ActionStatusAndMessageGetArgs> StatusAndMessages
        {
            get => _statusAndMessages ?? (_statusAndMessages = new InputList<Inputs.ActionStatusAndMessageGetArgs>());
            set => _statusAndMessages = value;
        }

        /// <summary>
        /// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
        /// </summary>
        [Input("statusPageId")]
        public Input<int>? StatusPageId { get; set; }

        /// <summary>
        /// The subject of the email
        /// </summary>
        [Input("subject")]
        public Input<string>? Subject { get; set; }

        /// <summary>
        /// The title of the ticket. (Only for Jira Create Ticket action)
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("tos")]
        private InputList<string>? _tos;

        /// <summary>
        /// The email addresses to which the email is to be sent
        /// </summary>
        public InputList<string> Tos
        {
            get => _tos ?? (_tos = new InputList<string>());
            set => _tos = value;
        }

        /// <summary>
        /// The URL to be called
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
        /// </summary>
        [Input("webhookId")]
        public Input<string>? WebhookId { get; set; }

        /// <summary>
        /// The ID of the workflow to which this action belongs
        /// </summary>
        [Input("workflowId")]
        public Input<string>? WorkflowId { get; set; }

        public ActionState()
        {
        }
        public static new ActionState Empty => new ActionState();
    }
}
