// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deduplication

import (
	"context"
	"reflect"

	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type RulesRule struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions []RulesRuleBasicExpression `pulumi:"basicExpressions"`
	// Denotes if dependent services should also be deduplicated
	DependencyDeduplication *bool `pulumi:"dependencyDeduplication"`
	// description.
	Description *string `pulumi:"description"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression *string `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic bool `pulumi:"isBasic"`
	// time unit (mins or hours)
	TimeUnit *string `pulumi:"timeUnit"`
	// integer for time_unit
	TimeWindow *int `pulumi:"timeWindow"`
}

// RulesRuleInput is an input type that accepts RulesRuleArgs and RulesRuleOutput values.
// You can construct a concrete instance of `RulesRuleInput` via:
//
//	RulesRuleArgs{...}
type RulesRuleInput interface {
	pulumi.Input

	ToRulesRuleOutput() RulesRuleOutput
	ToRulesRuleOutputWithContext(context.Context) RulesRuleOutput
}

type RulesRuleArgs struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions RulesRuleBasicExpressionArrayInput `pulumi:"basicExpressions"`
	// Denotes if dependent services should also be deduplicated
	DependencyDeduplication pulumi.BoolPtrInput `pulumi:"dependencyDeduplication"`
	// description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic pulumi.BoolInput `pulumi:"isBasic"`
	// time unit (mins or hours)
	TimeUnit pulumi.StringPtrInput `pulumi:"timeUnit"`
	// integer for time_unit
	TimeWindow pulumi.IntPtrInput `pulumi:"timeWindow"`
}

func (RulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRule)(nil)).Elem()
}

func (i RulesRuleArgs) ToRulesRuleOutput() RulesRuleOutput {
	return i.ToRulesRuleOutputWithContext(context.Background())
}

func (i RulesRuleArgs) ToRulesRuleOutputWithContext(ctx context.Context) RulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleOutput)
}

// RulesRuleArrayInput is an input type that accepts RulesRuleArray and RulesRuleArrayOutput values.
// You can construct a concrete instance of `RulesRuleArrayInput` via:
//
//	RulesRuleArray{ RulesRuleArgs{...} }
type RulesRuleArrayInput interface {
	pulumi.Input

	ToRulesRuleArrayOutput() RulesRuleArrayOutput
	ToRulesRuleArrayOutputWithContext(context.Context) RulesRuleArrayOutput
}

type RulesRuleArray []RulesRuleInput

func (RulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRule)(nil)).Elem()
}

func (i RulesRuleArray) ToRulesRuleArrayOutput() RulesRuleArrayOutput {
	return i.ToRulesRuleArrayOutputWithContext(context.Background())
}

func (i RulesRuleArray) ToRulesRuleArrayOutputWithContext(ctx context.Context) RulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleArrayOutput)
}

type RulesRuleOutput struct{ *pulumi.OutputState }

func (RulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRule)(nil)).Elem()
}

func (o RulesRuleOutput) ToRulesRuleOutput() RulesRuleOutput {
	return o
}

func (o RulesRuleOutput) ToRulesRuleOutputWithContext(ctx context.Context) RulesRuleOutput {
	return o
}

// The basic expression which needs to be evaluated to be true for this rule to apply.
func (o RulesRuleOutput) BasicExpressions() RulesRuleBasicExpressionArrayOutput {
	return o.ApplyT(func(v RulesRule) []RulesRuleBasicExpression { return v.BasicExpressions }).(RulesRuleBasicExpressionArrayOutput)
}

// Denotes if dependent services should also be deduplicated
func (o RulesRuleOutput) DependencyDeduplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RulesRule) *bool { return v.DependencyDeduplication }).(pulumi.BoolPtrOutput)
}

// description.
func (o RulesRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The expression which needs to be evaluated to be true for this rule to apply.
func (o RulesRuleOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesRule) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
func (o RulesRuleOutput) IsBasic() pulumi.BoolOutput {
	return o.ApplyT(func(v RulesRule) bool { return v.IsBasic }).(pulumi.BoolOutput)
}

// time unit (mins or hours)
func (o RulesRuleOutput) TimeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesRule) *string { return v.TimeUnit }).(pulumi.StringPtrOutput)
}

// integer for time_unit
func (o RulesRuleOutput) TimeWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RulesRule) *int { return v.TimeWindow }).(pulumi.IntPtrOutput)
}

type RulesRuleArrayOutput struct{ *pulumi.OutputState }

func (RulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRule)(nil)).Elem()
}

func (o RulesRuleArrayOutput) ToRulesRuleArrayOutput() RulesRuleArrayOutput {
	return o
}

func (o RulesRuleArrayOutput) ToRulesRuleArrayOutputWithContext(ctx context.Context) RulesRuleArrayOutput {
	return o
}

func (o RulesRuleArrayOutput) Index(i pulumi.IntInput) RulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesRule {
		return vs[0].([]RulesRule)[vs[1].(int)]
	}).(RulesRuleOutput)
}

type RulesRuleBasicExpression struct {
	// left hand side dropdown value
	Lhs string `pulumi:"lhs"`
	// operator
	Op string `pulumi:"op"`
	// right hand side value
	Rhs string `pulumi:"rhs"`
}

// RulesRuleBasicExpressionInput is an input type that accepts RulesRuleBasicExpressionArgs and RulesRuleBasicExpressionOutput values.
// You can construct a concrete instance of `RulesRuleBasicExpressionInput` via:
//
//	RulesRuleBasicExpressionArgs{...}
type RulesRuleBasicExpressionInput interface {
	pulumi.Input

	ToRulesRuleBasicExpressionOutput() RulesRuleBasicExpressionOutput
	ToRulesRuleBasicExpressionOutputWithContext(context.Context) RulesRuleBasicExpressionOutput
}

type RulesRuleBasicExpressionArgs struct {
	// left hand side dropdown value
	Lhs pulumi.StringInput `pulumi:"lhs"`
	// operator
	Op pulumi.StringInput `pulumi:"op"`
	// right hand side value
	Rhs pulumi.StringInput `pulumi:"rhs"`
}

func (RulesRuleBasicExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRuleBasicExpression)(nil)).Elem()
}

func (i RulesRuleBasicExpressionArgs) ToRulesRuleBasicExpressionOutput() RulesRuleBasicExpressionOutput {
	return i.ToRulesRuleBasicExpressionOutputWithContext(context.Background())
}

func (i RulesRuleBasicExpressionArgs) ToRulesRuleBasicExpressionOutputWithContext(ctx context.Context) RulesRuleBasicExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleBasicExpressionOutput)
}

// RulesRuleBasicExpressionArrayInput is an input type that accepts RulesRuleBasicExpressionArray and RulesRuleBasicExpressionArrayOutput values.
// You can construct a concrete instance of `RulesRuleBasicExpressionArrayInput` via:
//
//	RulesRuleBasicExpressionArray{ RulesRuleBasicExpressionArgs{...} }
type RulesRuleBasicExpressionArrayInput interface {
	pulumi.Input

	ToRulesRuleBasicExpressionArrayOutput() RulesRuleBasicExpressionArrayOutput
	ToRulesRuleBasicExpressionArrayOutputWithContext(context.Context) RulesRuleBasicExpressionArrayOutput
}

type RulesRuleBasicExpressionArray []RulesRuleBasicExpressionInput

func (RulesRuleBasicExpressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRuleBasicExpression)(nil)).Elem()
}

func (i RulesRuleBasicExpressionArray) ToRulesRuleBasicExpressionArrayOutput() RulesRuleBasicExpressionArrayOutput {
	return i.ToRulesRuleBasicExpressionArrayOutputWithContext(context.Background())
}

func (i RulesRuleBasicExpressionArray) ToRulesRuleBasicExpressionArrayOutputWithContext(ctx context.Context) RulesRuleBasicExpressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleBasicExpressionArrayOutput)
}

type RulesRuleBasicExpressionOutput struct{ *pulumi.OutputState }

func (RulesRuleBasicExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRuleBasicExpression)(nil)).Elem()
}

func (o RulesRuleBasicExpressionOutput) ToRulesRuleBasicExpressionOutput() RulesRuleBasicExpressionOutput {
	return o
}

func (o RulesRuleBasicExpressionOutput) ToRulesRuleBasicExpressionOutputWithContext(ctx context.Context) RulesRuleBasicExpressionOutput {
	return o
}

// left hand side dropdown value
func (o RulesRuleBasicExpressionOutput) Lhs() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleBasicExpression) string { return v.Lhs }).(pulumi.StringOutput)
}

// operator
func (o RulesRuleBasicExpressionOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleBasicExpression) string { return v.Op }).(pulumi.StringOutput)
}

// right hand side value
func (o RulesRuleBasicExpressionOutput) Rhs() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleBasicExpression) string { return v.Rhs }).(pulumi.StringOutput)
}

type RulesRuleBasicExpressionArrayOutput struct{ *pulumi.OutputState }

func (RulesRuleBasicExpressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRuleBasicExpression)(nil)).Elem()
}

func (o RulesRuleBasicExpressionArrayOutput) ToRulesRuleBasicExpressionArrayOutput() RulesRuleBasicExpressionArrayOutput {
	return o
}

func (o RulesRuleBasicExpressionArrayOutput) ToRulesRuleBasicExpressionArrayOutputWithContext(ctx context.Context) RulesRuleBasicExpressionArrayOutput {
	return o
}

func (o RulesRuleBasicExpressionArrayOutput) Index(i pulumi.IntInput) RulesRuleBasicExpressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesRuleBasicExpression {
		return vs[0].([]RulesRuleBasicExpression)[vs[1].(int)]
	}).(RulesRuleBasicExpressionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleInput)(nil)).Elem(), RulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleArrayInput)(nil)).Elem(), RulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleBasicExpressionInput)(nil)).Elem(), RulesRuleBasicExpressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleBasicExpressionArrayInput)(nil)).Elem(), RulesRuleBasicExpressionArray{})
	pulumi.RegisterOutputType(RulesRuleOutput{})
	pulumi.RegisterOutputType(RulesRuleArrayOutput{})
	pulumi.RegisterOutputType(RulesRuleBasicExpressionOutput{})
	pulumi.RegisterOutputType(RulesRuleBasicExpressionArrayOutput{})
}
