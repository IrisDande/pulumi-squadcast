// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package escalation

import (
	"context"
	"reflect"

	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type PolicyEntityOwner struct {
	// Escalation policy owner id.
	Id string `pulumi:"id"`
	// Escalation policy owner type. Supported values are 'user' or 'squad'.
	Type string `pulumi:"type"`
}

// PolicyEntityOwnerInput is an input type that accepts PolicyEntityOwnerArgs and PolicyEntityOwnerOutput values.
// You can construct a concrete instance of `PolicyEntityOwnerInput` via:
//
//	PolicyEntityOwnerArgs{...}
type PolicyEntityOwnerInput interface {
	pulumi.Input

	ToPolicyEntityOwnerOutput() PolicyEntityOwnerOutput
	ToPolicyEntityOwnerOutputWithContext(context.Context) PolicyEntityOwnerOutput
}

type PolicyEntityOwnerArgs struct {
	// Escalation policy owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Escalation policy owner type. Supported values are 'user' or 'squad'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (PolicyEntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyEntityOwner)(nil)).Elem()
}

func (i PolicyEntityOwnerArgs) ToPolicyEntityOwnerOutput() PolicyEntityOwnerOutput {
	return i.ToPolicyEntityOwnerOutputWithContext(context.Background())
}

func (i PolicyEntityOwnerArgs) ToPolicyEntityOwnerOutputWithContext(ctx context.Context) PolicyEntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyEntityOwnerOutput)
}

func (i PolicyEntityOwnerArgs) ToPolicyEntityOwnerPtrOutput() PolicyEntityOwnerPtrOutput {
	return i.ToPolicyEntityOwnerPtrOutputWithContext(context.Background())
}

func (i PolicyEntityOwnerArgs) ToPolicyEntityOwnerPtrOutputWithContext(ctx context.Context) PolicyEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyEntityOwnerOutput).ToPolicyEntityOwnerPtrOutputWithContext(ctx)
}

// PolicyEntityOwnerPtrInput is an input type that accepts PolicyEntityOwnerArgs, PolicyEntityOwnerPtr and PolicyEntityOwnerPtrOutput values.
// You can construct a concrete instance of `PolicyEntityOwnerPtrInput` via:
//
//	        PolicyEntityOwnerArgs{...}
//
//	or:
//
//	        nil
type PolicyEntityOwnerPtrInput interface {
	pulumi.Input

	ToPolicyEntityOwnerPtrOutput() PolicyEntityOwnerPtrOutput
	ToPolicyEntityOwnerPtrOutputWithContext(context.Context) PolicyEntityOwnerPtrOutput
}

type policyEntityOwnerPtrType PolicyEntityOwnerArgs

func PolicyEntityOwnerPtr(v *PolicyEntityOwnerArgs) PolicyEntityOwnerPtrInput {
	return (*policyEntityOwnerPtrType)(v)
}

func (*policyEntityOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyEntityOwner)(nil)).Elem()
}

func (i *policyEntityOwnerPtrType) ToPolicyEntityOwnerPtrOutput() PolicyEntityOwnerPtrOutput {
	return i.ToPolicyEntityOwnerPtrOutputWithContext(context.Background())
}

func (i *policyEntityOwnerPtrType) ToPolicyEntityOwnerPtrOutputWithContext(ctx context.Context) PolicyEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyEntityOwnerPtrOutput)
}

type PolicyEntityOwnerOutput struct{ *pulumi.OutputState }

func (PolicyEntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyEntityOwner)(nil)).Elem()
}

func (o PolicyEntityOwnerOutput) ToPolicyEntityOwnerOutput() PolicyEntityOwnerOutput {
	return o
}

func (o PolicyEntityOwnerOutput) ToPolicyEntityOwnerOutputWithContext(ctx context.Context) PolicyEntityOwnerOutput {
	return o
}

func (o PolicyEntityOwnerOutput) ToPolicyEntityOwnerPtrOutput() PolicyEntityOwnerPtrOutput {
	return o.ToPolicyEntityOwnerPtrOutputWithContext(context.Background())
}

func (o PolicyEntityOwnerOutput) ToPolicyEntityOwnerPtrOutputWithContext(ctx context.Context) PolicyEntityOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyEntityOwner) *PolicyEntityOwner {
		return &v
	}).(PolicyEntityOwnerPtrOutput)
}

// Escalation policy owner id.
func (o PolicyEntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyEntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Escalation policy owner type. Supported values are 'user' or 'squad'.
func (o PolicyEntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyEntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type PolicyEntityOwnerPtrOutput struct{ *pulumi.OutputState }

func (PolicyEntityOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyEntityOwner)(nil)).Elem()
}

func (o PolicyEntityOwnerPtrOutput) ToPolicyEntityOwnerPtrOutput() PolicyEntityOwnerPtrOutput {
	return o
}

func (o PolicyEntityOwnerPtrOutput) ToPolicyEntityOwnerPtrOutputWithContext(ctx context.Context) PolicyEntityOwnerPtrOutput {
	return o
}

func (o PolicyEntityOwnerPtrOutput) Elem() PolicyEntityOwnerOutput {
	return o.ApplyT(func(v *PolicyEntityOwner) PolicyEntityOwner {
		if v != nil {
			return *v
		}
		var ret PolicyEntityOwner
		return ret
	}).(PolicyEntityOwnerOutput)
}

// Escalation policy owner id.
func (o PolicyEntityOwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Escalation policy owner type. Supported values are 'user' or 'squad'.
func (o PolicyEntityOwnerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type PolicyRepeat struct {
	// The number of minutes to wait before repeating the escalation policy
	DelayMinutes int `pulumi:"delayMinutes"`
	// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
	Times int `pulumi:"times"`
}

// PolicyRepeatInput is an input type that accepts PolicyRepeatArgs and PolicyRepeatOutput values.
// You can construct a concrete instance of `PolicyRepeatInput` via:
//
//	PolicyRepeatArgs{...}
type PolicyRepeatInput interface {
	pulumi.Input

	ToPolicyRepeatOutput() PolicyRepeatOutput
	ToPolicyRepeatOutputWithContext(context.Context) PolicyRepeatOutput
}

type PolicyRepeatArgs struct {
	// The number of minutes to wait before repeating the escalation policy
	DelayMinutes pulumi.IntInput `pulumi:"delayMinutes"`
	// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
	Times pulumi.IntInput `pulumi:"times"`
}

func (PolicyRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRepeat)(nil)).Elem()
}

func (i PolicyRepeatArgs) ToPolicyRepeatOutput() PolicyRepeatOutput {
	return i.ToPolicyRepeatOutputWithContext(context.Background())
}

func (i PolicyRepeatArgs) ToPolicyRepeatOutputWithContext(ctx context.Context) PolicyRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRepeatOutput)
}

func (i PolicyRepeatArgs) ToPolicyRepeatPtrOutput() PolicyRepeatPtrOutput {
	return i.ToPolicyRepeatPtrOutputWithContext(context.Background())
}

func (i PolicyRepeatArgs) ToPolicyRepeatPtrOutputWithContext(ctx context.Context) PolicyRepeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRepeatOutput).ToPolicyRepeatPtrOutputWithContext(ctx)
}

// PolicyRepeatPtrInput is an input type that accepts PolicyRepeatArgs, PolicyRepeatPtr and PolicyRepeatPtrOutput values.
// You can construct a concrete instance of `PolicyRepeatPtrInput` via:
//
//	        PolicyRepeatArgs{...}
//
//	or:
//
//	        nil
type PolicyRepeatPtrInput interface {
	pulumi.Input

	ToPolicyRepeatPtrOutput() PolicyRepeatPtrOutput
	ToPolicyRepeatPtrOutputWithContext(context.Context) PolicyRepeatPtrOutput
}

type policyRepeatPtrType PolicyRepeatArgs

func PolicyRepeatPtr(v *PolicyRepeatArgs) PolicyRepeatPtrInput {
	return (*policyRepeatPtrType)(v)
}

func (*policyRepeatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRepeat)(nil)).Elem()
}

func (i *policyRepeatPtrType) ToPolicyRepeatPtrOutput() PolicyRepeatPtrOutput {
	return i.ToPolicyRepeatPtrOutputWithContext(context.Background())
}

func (i *policyRepeatPtrType) ToPolicyRepeatPtrOutputWithContext(ctx context.Context) PolicyRepeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRepeatPtrOutput)
}

type PolicyRepeatOutput struct{ *pulumi.OutputState }

func (PolicyRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRepeat)(nil)).Elem()
}

func (o PolicyRepeatOutput) ToPolicyRepeatOutput() PolicyRepeatOutput {
	return o
}

func (o PolicyRepeatOutput) ToPolicyRepeatOutputWithContext(ctx context.Context) PolicyRepeatOutput {
	return o
}

func (o PolicyRepeatOutput) ToPolicyRepeatPtrOutput() PolicyRepeatPtrOutput {
	return o.ToPolicyRepeatPtrOutputWithContext(context.Background())
}

func (o PolicyRepeatOutput) ToPolicyRepeatPtrOutputWithContext(ctx context.Context) PolicyRepeatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyRepeat) *PolicyRepeat {
		return &v
	}).(PolicyRepeatPtrOutput)
}

// The number of minutes to wait before repeating the escalation policy
func (o PolicyRepeatOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyRepeat) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
func (o PolicyRepeatOutput) Times() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyRepeat) int { return v.Times }).(pulumi.IntOutput)
}

type PolicyRepeatPtrOutput struct{ *pulumi.OutputState }

func (PolicyRepeatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRepeat)(nil)).Elem()
}

func (o PolicyRepeatPtrOutput) ToPolicyRepeatPtrOutput() PolicyRepeatPtrOutput {
	return o
}

func (o PolicyRepeatPtrOutput) ToPolicyRepeatPtrOutputWithContext(ctx context.Context) PolicyRepeatPtrOutput {
	return o
}

func (o PolicyRepeatPtrOutput) Elem() PolicyRepeatOutput {
	return o.ApplyT(func(v *PolicyRepeat) PolicyRepeat {
		if v != nil {
			return *v
		}
		var ret PolicyRepeat
		return ret
	}).(PolicyRepeatOutput)
}

// The number of minutes to wait before repeating the escalation policy
func (o PolicyRepeatPtrOutput) DelayMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyRepeat) *int {
		if v == nil {
			return nil
		}
		return &v.DelayMinutes
	}).(pulumi.IntPtrOutput)
}

// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
func (o PolicyRepeatPtrOutput) Times() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyRepeat) *int {
		if v == nil {
			return nil
		}
		return &v.Times
	}).(pulumi.IntPtrOutput)
}

type PolicyRule struct {
	DelayMinutes int `pulumi:"delayMinutes"`
	// Notification channels to notify the targets. (SMS, Phone, Email, Push)
	NotificationChannels []string `pulumi:"notificationChannels"`
	// repeat this rule
	Repeat     *PolicyRuleRepeat     `pulumi:"repeat"`
	RoundRobin *PolicyRuleRoundRobin `pulumi:"roundRobin"`
	Targets    []PolicyRuleTarget    `pulumi:"targets"`
}

// PolicyRuleInput is an input type that accepts PolicyRuleArgs and PolicyRuleOutput values.
// You can construct a concrete instance of `PolicyRuleInput` via:
//
//	PolicyRuleArgs{...}
type PolicyRuleInput interface {
	pulumi.Input

	ToPolicyRuleOutput() PolicyRuleOutput
	ToPolicyRuleOutputWithContext(context.Context) PolicyRuleOutput
}

type PolicyRuleArgs struct {
	DelayMinutes pulumi.IntInput `pulumi:"delayMinutes"`
	// Notification channels to notify the targets. (SMS, Phone, Email, Push)
	NotificationChannels pulumi.StringArrayInput `pulumi:"notificationChannels"`
	// repeat this rule
	Repeat     PolicyRuleRepeatPtrInput     `pulumi:"repeat"`
	RoundRobin PolicyRuleRoundRobinPtrInput `pulumi:"roundRobin"`
	Targets    PolicyRuleTargetArrayInput   `pulumi:"targets"`
}

func (PolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRule)(nil)).Elem()
}

func (i PolicyRuleArgs) ToPolicyRuleOutput() PolicyRuleOutput {
	return i.ToPolicyRuleOutputWithContext(context.Background())
}

func (i PolicyRuleArgs) ToPolicyRuleOutputWithContext(ctx context.Context) PolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleOutput)
}

// PolicyRuleArrayInput is an input type that accepts PolicyRuleArray and PolicyRuleArrayOutput values.
// You can construct a concrete instance of `PolicyRuleArrayInput` via:
//
//	PolicyRuleArray{ PolicyRuleArgs{...} }
type PolicyRuleArrayInput interface {
	pulumi.Input

	ToPolicyRuleArrayOutput() PolicyRuleArrayOutput
	ToPolicyRuleArrayOutputWithContext(context.Context) PolicyRuleArrayOutput
}

type PolicyRuleArray []PolicyRuleInput

func (PolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRule)(nil)).Elem()
}

func (i PolicyRuleArray) ToPolicyRuleArrayOutput() PolicyRuleArrayOutput {
	return i.ToPolicyRuleArrayOutputWithContext(context.Background())
}

func (i PolicyRuleArray) ToPolicyRuleArrayOutputWithContext(ctx context.Context) PolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleArrayOutput)
}

type PolicyRuleOutput struct{ *pulumi.OutputState }

func (PolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRule)(nil)).Elem()
}

func (o PolicyRuleOutput) ToPolicyRuleOutput() PolicyRuleOutput {
	return o
}

func (o PolicyRuleOutput) ToPolicyRuleOutputWithContext(ctx context.Context) PolicyRuleOutput {
	return o
}

func (o PolicyRuleOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyRule) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

// Notification channels to notify the targets. (SMS, Phone, Email, Push)
func (o PolicyRuleOutput) NotificationChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyRule) []string { return v.NotificationChannels }).(pulumi.StringArrayOutput)
}

// repeat this rule
func (o PolicyRuleOutput) Repeat() PolicyRuleRepeatPtrOutput {
	return o.ApplyT(func(v PolicyRule) *PolicyRuleRepeat { return v.Repeat }).(PolicyRuleRepeatPtrOutput)
}

func (o PolicyRuleOutput) RoundRobin() PolicyRuleRoundRobinPtrOutput {
	return o.ApplyT(func(v PolicyRule) *PolicyRuleRoundRobin { return v.RoundRobin }).(PolicyRuleRoundRobinPtrOutput)
}

func (o PolicyRuleOutput) Targets() PolicyRuleTargetArrayOutput {
	return o.ApplyT(func(v PolicyRule) []PolicyRuleTarget { return v.Targets }).(PolicyRuleTargetArrayOutput)
}

type PolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (PolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRule)(nil)).Elem()
}

func (o PolicyRuleArrayOutput) ToPolicyRuleArrayOutput() PolicyRuleArrayOutput {
	return o
}

func (o PolicyRuleArrayOutput) ToPolicyRuleArrayOutputWithContext(ctx context.Context) PolicyRuleArrayOutput {
	return o
}

func (o PolicyRuleArrayOutput) Index(i pulumi.IntInput) PolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyRule {
		return vs[0].([]PolicyRule)[vs[1].(int)]
	}).(PolicyRuleOutput)
}

type PolicyRuleRepeat struct {
	// repeat after minutes
	DelayMinutes int `pulumi:"delayMinutes"`
	// repeat times
	Times int `pulumi:"times"`
}

// PolicyRuleRepeatInput is an input type that accepts PolicyRuleRepeatArgs and PolicyRuleRepeatOutput values.
// You can construct a concrete instance of `PolicyRuleRepeatInput` via:
//
//	PolicyRuleRepeatArgs{...}
type PolicyRuleRepeatInput interface {
	pulumi.Input

	ToPolicyRuleRepeatOutput() PolicyRuleRepeatOutput
	ToPolicyRuleRepeatOutputWithContext(context.Context) PolicyRuleRepeatOutput
}

type PolicyRuleRepeatArgs struct {
	// repeat after minutes
	DelayMinutes pulumi.IntInput `pulumi:"delayMinutes"`
	// repeat times
	Times pulumi.IntInput `pulumi:"times"`
}

func (PolicyRuleRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleRepeat)(nil)).Elem()
}

func (i PolicyRuleRepeatArgs) ToPolicyRuleRepeatOutput() PolicyRuleRepeatOutput {
	return i.ToPolicyRuleRepeatOutputWithContext(context.Background())
}

func (i PolicyRuleRepeatArgs) ToPolicyRuleRepeatOutputWithContext(ctx context.Context) PolicyRuleRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleRepeatOutput)
}

func (i PolicyRuleRepeatArgs) ToPolicyRuleRepeatPtrOutput() PolicyRuleRepeatPtrOutput {
	return i.ToPolicyRuleRepeatPtrOutputWithContext(context.Background())
}

func (i PolicyRuleRepeatArgs) ToPolicyRuleRepeatPtrOutputWithContext(ctx context.Context) PolicyRuleRepeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleRepeatOutput).ToPolicyRuleRepeatPtrOutputWithContext(ctx)
}

// PolicyRuleRepeatPtrInput is an input type that accepts PolicyRuleRepeatArgs, PolicyRuleRepeatPtr and PolicyRuleRepeatPtrOutput values.
// You can construct a concrete instance of `PolicyRuleRepeatPtrInput` via:
//
//	        PolicyRuleRepeatArgs{...}
//
//	or:
//
//	        nil
type PolicyRuleRepeatPtrInput interface {
	pulumi.Input

	ToPolicyRuleRepeatPtrOutput() PolicyRuleRepeatPtrOutput
	ToPolicyRuleRepeatPtrOutputWithContext(context.Context) PolicyRuleRepeatPtrOutput
}

type policyRuleRepeatPtrType PolicyRuleRepeatArgs

func PolicyRuleRepeatPtr(v *PolicyRuleRepeatArgs) PolicyRuleRepeatPtrInput {
	return (*policyRuleRepeatPtrType)(v)
}

func (*policyRuleRepeatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRuleRepeat)(nil)).Elem()
}

func (i *policyRuleRepeatPtrType) ToPolicyRuleRepeatPtrOutput() PolicyRuleRepeatPtrOutput {
	return i.ToPolicyRuleRepeatPtrOutputWithContext(context.Background())
}

func (i *policyRuleRepeatPtrType) ToPolicyRuleRepeatPtrOutputWithContext(ctx context.Context) PolicyRuleRepeatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleRepeatPtrOutput)
}

type PolicyRuleRepeatOutput struct{ *pulumi.OutputState }

func (PolicyRuleRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleRepeat)(nil)).Elem()
}

func (o PolicyRuleRepeatOutput) ToPolicyRuleRepeatOutput() PolicyRuleRepeatOutput {
	return o
}

func (o PolicyRuleRepeatOutput) ToPolicyRuleRepeatOutputWithContext(ctx context.Context) PolicyRuleRepeatOutput {
	return o
}

func (o PolicyRuleRepeatOutput) ToPolicyRuleRepeatPtrOutput() PolicyRuleRepeatPtrOutput {
	return o.ToPolicyRuleRepeatPtrOutputWithContext(context.Background())
}

func (o PolicyRuleRepeatOutput) ToPolicyRuleRepeatPtrOutputWithContext(ctx context.Context) PolicyRuleRepeatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyRuleRepeat) *PolicyRuleRepeat {
		return &v
	}).(PolicyRuleRepeatPtrOutput)
}

// repeat after minutes
func (o PolicyRuleRepeatOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyRuleRepeat) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

// repeat times
func (o PolicyRuleRepeatOutput) Times() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyRuleRepeat) int { return v.Times }).(pulumi.IntOutput)
}

type PolicyRuleRepeatPtrOutput struct{ *pulumi.OutputState }

func (PolicyRuleRepeatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRuleRepeat)(nil)).Elem()
}

func (o PolicyRuleRepeatPtrOutput) ToPolicyRuleRepeatPtrOutput() PolicyRuleRepeatPtrOutput {
	return o
}

func (o PolicyRuleRepeatPtrOutput) ToPolicyRuleRepeatPtrOutputWithContext(ctx context.Context) PolicyRuleRepeatPtrOutput {
	return o
}

func (o PolicyRuleRepeatPtrOutput) Elem() PolicyRuleRepeatOutput {
	return o.ApplyT(func(v *PolicyRuleRepeat) PolicyRuleRepeat {
		if v != nil {
			return *v
		}
		var ret PolicyRuleRepeat
		return ret
	}).(PolicyRuleRepeatOutput)
}

// repeat after minutes
func (o PolicyRuleRepeatPtrOutput) DelayMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyRuleRepeat) *int {
		if v == nil {
			return nil
		}
		return &v.DelayMinutes
	}).(pulumi.IntPtrOutput)
}

// repeat times
func (o PolicyRuleRepeatPtrOutput) Times() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyRuleRepeat) *int {
		if v == nil {
			return nil
		}
		return &v.Times
	}).(pulumi.IntPtrOutput)
}

type PolicyRuleRoundRobin struct {
	// Enables Round Robin escalation within this layer
	Enabled  bool                          `pulumi:"enabled"`
	Rotation *PolicyRuleRoundRobinRotation `pulumi:"rotation"`
}

// PolicyRuleRoundRobinInput is an input type that accepts PolicyRuleRoundRobinArgs and PolicyRuleRoundRobinOutput values.
// You can construct a concrete instance of `PolicyRuleRoundRobinInput` via:
//
//	PolicyRuleRoundRobinArgs{...}
type PolicyRuleRoundRobinInput interface {
	pulumi.Input

	ToPolicyRuleRoundRobinOutput() PolicyRuleRoundRobinOutput
	ToPolicyRuleRoundRobinOutputWithContext(context.Context) PolicyRuleRoundRobinOutput
}

type PolicyRuleRoundRobinArgs struct {
	// Enables Round Robin escalation within this layer
	Enabled  pulumi.BoolInput                     `pulumi:"enabled"`
	Rotation PolicyRuleRoundRobinRotationPtrInput `pulumi:"rotation"`
}

func (PolicyRuleRoundRobinArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleRoundRobin)(nil)).Elem()
}

func (i PolicyRuleRoundRobinArgs) ToPolicyRuleRoundRobinOutput() PolicyRuleRoundRobinOutput {
	return i.ToPolicyRuleRoundRobinOutputWithContext(context.Background())
}

func (i PolicyRuleRoundRobinArgs) ToPolicyRuleRoundRobinOutputWithContext(ctx context.Context) PolicyRuleRoundRobinOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleRoundRobinOutput)
}

func (i PolicyRuleRoundRobinArgs) ToPolicyRuleRoundRobinPtrOutput() PolicyRuleRoundRobinPtrOutput {
	return i.ToPolicyRuleRoundRobinPtrOutputWithContext(context.Background())
}

func (i PolicyRuleRoundRobinArgs) ToPolicyRuleRoundRobinPtrOutputWithContext(ctx context.Context) PolicyRuleRoundRobinPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleRoundRobinOutput).ToPolicyRuleRoundRobinPtrOutputWithContext(ctx)
}

// PolicyRuleRoundRobinPtrInput is an input type that accepts PolicyRuleRoundRobinArgs, PolicyRuleRoundRobinPtr and PolicyRuleRoundRobinPtrOutput values.
// You can construct a concrete instance of `PolicyRuleRoundRobinPtrInput` via:
//
//	        PolicyRuleRoundRobinArgs{...}
//
//	or:
//
//	        nil
type PolicyRuleRoundRobinPtrInput interface {
	pulumi.Input

	ToPolicyRuleRoundRobinPtrOutput() PolicyRuleRoundRobinPtrOutput
	ToPolicyRuleRoundRobinPtrOutputWithContext(context.Context) PolicyRuleRoundRobinPtrOutput
}

type policyRuleRoundRobinPtrType PolicyRuleRoundRobinArgs

func PolicyRuleRoundRobinPtr(v *PolicyRuleRoundRobinArgs) PolicyRuleRoundRobinPtrInput {
	return (*policyRuleRoundRobinPtrType)(v)
}

func (*policyRuleRoundRobinPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRuleRoundRobin)(nil)).Elem()
}

func (i *policyRuleRoundRobinPtrType) ToPolicyRuleRoundRobinPtrOutput() PolicyRuleRoundRobinPtrOutput {
	return i.ToPolicyRuleRoundRobinPtrOutputWithContext(context.Background())
}

func (i *policyRuleRoundRobinPtrType) ToPolicyRuleRoundRobinPtrOutputWithContext(ctx context.Context) PolicyRuleRoundRobinPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleRoundRobinPtrOutput)
}

type PolicyRuleRoundRobinOutput struct{ *pulumi.OutputState }

func (PolicyRuleRoundRobinOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleRoundRobin)(nil)).Elem()
}

func (o PolicyRuleRoundRobinOutput) ToPolicyRuleRoundRobinOutput() PolicyRuleRoundRobinOutput {
	return o
}

func (o PolicyRuleRoundRobinOutput) ToPolicyRuleRoundRobinOutputWithContext(ctx context.Context) PolicyRuleRoundRobinOutput {
	return o
}

func (o PolicyRuleRoundRobinOutput) ToPolicyRuleRoundRobinPtrOutput() PolicyRuleRoundRobinPtrOutput {
	return o.ToPolicyRuleRoundRobinPtrOutputWithContext(context.Background())
}

func (o PolicyRuleRoundRobinOutput) ToPolicyRuleRoundRobinPtrOutputWithContext(ctx context.Context) PolicyRuleRoundRobinPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyRuleRoundRobin) *PolicyRuleRoundRobin {
		return &v
	}).(PolicyRuleRoundRobinPtrOutput)
}

// Enables Round Robin escalation within this layer
func (o PolicyRuleRoundRobinOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v PolicyRuleRoundRobin) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o PolicyRuleRoundRobinOutput) Rotation() PolicyRuleRoundRobinRotationPtrOutput {
	return o.ApplyT(func(v PolicyRuleRoundRobin) *PolicyRuleRoundRobinRotation { return v.Rotation }).(PolicyRuleRoundRobinRotationPtrOutput)
}

type PolicyRuleRoundRobinPtrOutput struct{ *pulumi.OutputState }

func (PolicyRuleRoundRobinPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRuleRoundRobin)(nil)).Elem()
}

func (o PolicyRuleRoundRobinPtrOutput) ToPolicyRuleRoundRobinPtrOutput() PolicyRuleRoundRobinPtrOutput {
	return o
}

func (o PolicyRuleRoundRobinPtrOutput) ToPolicyRuleRoundRobinPtrOutputWithContext(ctx context.Context) PolicyRuleRoundRobinPtrOutput {
	return o
}

func (o PolicyRuleRoundRobinPtrOutput) Elem() PolicyRuleRoundRobinOutput {
	return o.ApplyT(func(v *PolicyRuleRoundRobin) PolicyRuleRoundRobin {
		if v != nil {
			return *v
		}
		var ret PolicyRuleRoundRobin
		return ret
	}).(PolicyRuleRoundRobinOutput)
}

// Enables Round Robin escalation within this layer
func (o PolicyRuleRoundRobinPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyRuleRoundRobin) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

func (o PolicyRuleRoundRobinPtrOutput) Rotation() PolicyRuleRoundRobinRotationPtrOutput {
	return o.ApplyT(func(v *PolicyRuleRoundRobin) *PolicyRuleRoundRobinRotation {
		if v == nil {
			return nil
		}
		return v.Rotation
	}).(PolicyRuleRoundRobinRotationPtrOutput)
}

type PolicyRuleRoundRobinRotation struct {
	// repeat after minutes
	DelayMinutes *int `pulumi:"delayMinutes"`
	// enable rotation within
	Enabled *bool `pulumi:"enabled"`
}

// PolicyRuleRoundRobinRotationInput is an input type that accepts PolicyRuleRoundRobinRotationArgs and PolicyRuleRoundRobinRotationOutput values.
// You can construct a concrete instance of `PolicyRuleRoundRobinRotationInput` via:
//
//	PolicyRuleRoundRobinRotationArgs{...}
type PolicyRuleRoundRobinRotationInput interface {
	pulumi.Input

	ToPolicyRuleRoundRobinRotationOutput() PolicyRuleRoundRobinRotationOutput
	ToPolicyRuleRoundRobinRotationOutputWithContext(context.Context) PolicyRuleRoundRobinRotationOutput
}

type PolicyRuleRoundRobinRotationArgs struct {
	// repeat after minutes
	DelayMinutes pulumi.IntPtrInput `pulumi:"delayMinutes"`
	// enable rotation within
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (PolicyRuleRoundRobinRotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (i PolicyRuleRoundRobinRotationArgs) ToPolicyRuleRoundRobinRotationOutput() PolicyRuleRoundRobinRotationOutput {
	return i.ToPolicyRuleRoundRobinRotationOutputWithContext(context.Background())
}

func (i PolicyRuleRoundRobinRotationArgs) ToPolicyRuleRoundRobinRotationOutputWithContext(ctx context.Context) PolicyRuleRoundRobinRotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleRoundRobinRotationOutput)
}

func (i PolicyRuleRoundRobinRotationArgs) ToPolicyRuleRoundRobinRotationPtrOutput() PolicyRuleRoundRobinRotationPtrOutput {
	return i.ToPolicyRuleRoundRobinRotationPtrOutputWithContext(context.Background())
}

func (i PolicyRuleRoundRobinRotationArgs) ToPolicyRuleRoundRobinRotationPtrOutputWithContext(ctx context.Context) PolicyRuleRoundRobinRotationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleRoundRobinRotationOutput).ToPolicyRuleRoundRobinRotationPtrOutputWithContext(ctx)
}

// PolicyRuleRoundRobinRotationPtrInput is an input type that accepts PolicyRuleRoundRobinRotationArgs, PolicyRuleRoundRobinRotationPtr and PolicyRuleRoundRobinRotationPtrOutput values.
// You can construct a concrete instance of `PolicyRuleRoundRobinRotationPtrInput` via:
//
//	        PolicyRuleRoundRobinRotationArgs{...}
//
//	or:
//
//	        nil
type PolicyRuleRoundRobinRotationPtrInput interface {
	pulumi.Input

	ToPolicyRuleRoundRobinRotationPtrOutput() PolicyRuleRoundRobinRotationPtrOutput
	ToPolicyRuleRoundRobinRotationPtrOutputWithContext(context.Context) PolicyRuleRoundRobinRotationPtrOutput
}

type policyRuleRoundRobinRotationPtrType PolicyRuleRoundRobinRotationArgs

func PolicyRuleRoundRobinRotationPtr(v *PolicyRuleRoundRobinRotationArgs) PolicyRuleRoundRobinRotationPtrInput {
	return (*policyRuleRoundRobinRotationPtrType)(v)
}

func (*policyRuleRoundRobinRotationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (i *policyRuleRoundRobinRotationPtrType) ToPolicyRuleRoundRobinRotationPtrOutput() PolicyRuleRoundRobinRotationPtrOutput {
	return i.ToPolicyRuleRoundRobinRotationPtrOutputWithContext(context.Background())
}

func (i *policyRuleRoundRobinRotationPtrType) ToPolicyRuleRoundRobinRotationPtrOutputWithContext(ctx context.Context) PolicyRuleRoundRobinRotationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleRoundRobinRotationPtrOutput)
}

type PolicyRuleRoundRobinRotationOutput struct{ *pulumi.OutputState }

func (PolicyRuleRoundRobinRotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (o PolicyRuleRoundRobinRotationOutput) ToPolicyRuleRoundRobinRotationOutput() PolicyRuleRoundRobinRotationOutput {
	return o
}

func (o PolicyRuleRoundRobinRotationOutput) ToPolicyRuleRoundRobinRotationOutputWithContext(ctx context.Context) PolicyRuleRoundRobinRotationOutput {
	return o
}

func (o PolicyRuleRoundRobinRotationOutput) ToPolicyRuleRoundRobinRotationPtrOutput() PolicyRuleRoundRobinRotationPtrOutput {
	return o.ToPolicyRuleRoundRobinRotationPtrOutputWithContext(context.Background())
}

func (o PolicyRuleRoundRobinRotationOutput) ToPolicyRuleRoundRobinRotationPtrOutputWithContext(ctx context.Context) PolicyRuleRoundRobinRotationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyRuleRoundRobinRotation) *PolicyRuleRoundRobinRotation {
		return &v
	}).(PolicyRuleRoundRobinRotationPtrOutput)
}

// repeat after minutes
func (o PolicyRuleRoundRobinRotationOutput) DelayMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyRuleRoundRobinRotation) *int { return v.DelayMinutes }).(pulumi.IntPtrOutput)
}

// enable rotation within
func (o PolicyRuleRoundRobinRotationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyRuleRoundRobinRotation) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type PolicyRuleRoundRobinRotationPtrOutput struct{ *pulumi.OutputState }

func (PolicyRuleRoundRobinRotationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (o PolicyRuleRoundRobinRotationPtrOutput) ToPolicyRuleRoundRobinRotationPtrOutput() PolicyRuleRoundRobinRotationPtrOutput {
	return o
}

func (o PolicyRuleRoundRobinRotationPtrOutput) ToPolicyRuleRoundRobinRotationPtrOutputWithContext(ctx context.Context) PolicyRuleRoundRobinRotationPtrOutput {
	return o
}

func (o PolicyRuleRoundRobinRotationPtrOutput) Elem() PolicyRuleRoundRobinRotationOutput {
	return o.ApplyT(func(v *PolicyRuleRoundRobinRotation) PolicyRuleRoundRobinRotation {
		if v != nil {
			return *v
		}
		var ret PolicyRuleRoundRobinRotation
		return ret
	}).(PolicyRuleRoundRobinRotationOutput)
}

// repeat after minutes
func (o PolicyRuleRoundRobinRotationPtrOutput) DelayMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyRuleRoundRobinRotation) *int {
		if v == nil {
			return nil
		}
		return v.DelayMinutes
	}).(pulumi.IntPtrOutput)
}

// enable rotation within
func (o PolicyRuleRoundRobinRotationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyRuleRoundRobinRotation) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type PolicyRuleTarget struct {
	// ID of the target
	Id string `pulumi:"id"`
	// Type of the target. (user, squad, schedule, schedulev2)
	Type string `pulumi:"type"`
}

// PolicyRuleTargetInput is an input type that accepts PolicyRuleTargetArgs and PolicyRuleTargetOutput values.
// You can construct a concrete instance of `PolicyRuleTargetInput` via:
//
//	PolicyRuleTargetArgs{...}
type PolicyRuleTargetInput interface {
	pulumi.Input

	ToPolicyRuleTargetOutput() PolicyRuleTargetOutput
	ToPolicyRuleTargetOutputWithContext(context.Context) PolicyRuleTargetOutput
}

type PolicyRuleTargetArgs struct {
	// ID of the target
	Id pulumi.StringInput `pulumi:"id"`
	// Type of the target. (user, squad, schedule, schedulev2)
	Type pulumi.StringInput `pulumi:"type"`
}

func (PolicyRuleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleTarget)(nil)).Elem()
}

func (i PolicyRuleTargetArgs) ToPolicyRuleTargetOutput() PolicyRuleTargetOutput {
	return i.ToPolicyRuleTargetOutputWithContext(context.Background())
}

func (i PolicyRuleTargetArgs) ToPolicyRuleTargetOutputWithContext(ctx context.Context) PolicyRuleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleTargetOutput)
}

// PolicyRuleTargetArrayInput is an input type that accepts PolicyRuleTargetArray and PolicyRuleTargetArrayOutput values.
// You can construct a concrete instance of `PolicyRuleTargetArrayInput` via:
//
//	PolicyRuleTargetArray{ PolicyRuleTargetArgs{...} }
type PolicyRuleTargetArrayInput interface {
	pulumi.Input

	ToPolicyRuleTargetArrayOutput() PolicyRuleTargetArrayOutput
	ToPolicyRuleTargetArrayOutputWithContext(context.Context) PolicyRuleTargetArrayOutput
}

type PolicyRuleTargetArray []PolicyRuleTargetInput

func (PolicyRuleTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRuleTarget)(nil)).Elem()
}

func (i PolicyRuleTargetArray) ToPolicyRuleTargetArrayOutput() PolicyRuleTargetArrayOutput {
	return i.ToPolicyRuleTargetArrayOutputWithContext(context.Background())
}

func (i PolicyRuleTargetArray) ToPolicyRuleTargetArrayOutputWithContext(ctx context.Context) PolicyRuleTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyRuleTargetArrayOutput)
}

type PolicyRuleTargetOutput struct{ *pulumi.OutputState }

func (PolicyRuleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyRuleTarget)(nil)).Elem()
}

func (o PolicyRuleTargetOutput) ToPolicyRuleTargetOutput() PolicyRuleTargetOutput {
	return o
}

func (o PolicyRuleTargetOutput) ToPolicyRuleTargetOutputWithContext(ctx context.Context) PolicyRuleTargetOutput {
	return o
}

// ID of the target
func (o PolicyRuleTargetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyRuleTarget) string { return v.Id }).(pulumi.StringOutput)
}

// Type of the target. (user, squad, schedule, schedulev2)
func (o PolicyRuleTargetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyRuleTarget) string { return v.Type }).(pulumi.StringOutput)
}

type PolicyRuleTargetArrayOutput struct{ *pulumi.OutputState }

func (PolicyRuleTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyRuleTarget)(nil)).Elem()
}

func (o PolicyRuleTargetArrayOutput) ToPolicyRuleTargetArrayOutput() PolicyRuleTargetArrayOutput {
	return o
}

func (o PolicyRuleTargetArrayOutput) ToPolicyRuleTargetArrayOutputWithContext(ctx context.Context) PolicyRuleTargetArrayOutput {
	return o
}

func (o PolicyRuleTargetArrayOutput) Index(i pulumi.IntInput) PolicyRuleTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyRuleTarget {
		return vs[0].([]PolicyRuleTarget)[vs[1].(int)]
	}).(PolicyRuleTargetOutput)
}

type GetPolicyEntityOwner struct {
	// Escalation policy owner id.
	Id string `pulumi:"id"`
	// Escalation policy owner type. (user or squad or team)
	Type string `pulumi:"type"`
}

// GetPolicyEntityOwnerInput is an input type that accepts GetPolicyEntityOwnerArgs and GetPolicyEntityOwnerOutput values.
// You can construct a concrete instance of `GetPolicyEntityOwnerInput` via:
//
//	GetPolicyEntityOwnerArgs{...}
type GetPolicyEntityOwnerInput interface {
	pulumi.Input

	ToGetPolicyEntityOwnerOutput() GetPolicyEntityOwnerOutput
	ToGetPolicyEntityOwnerOutputWithContext(context.Context) GetPolicyEntityOwnerOutput
}

type GetPolicyEntityOwnerArgs struct {
	// Escalation policy owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Escalation policy owner type. (user or squad or team)
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetPolicyEntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyEntityOwner)(nil)).Elem()
}

func (i GetPolicyEntityOwnerArgs) ToGetPolicyEntityOwnerOutput() GetPolicyEntityOwnerOutput {
	return i.ToGetPolicyEntityOwnerOutputWithContext(context.Background())
}

func (i GetPolicyEntityOwnerArgs) ToGetPolicyEntityOwnerOutputWithContext(ctx context.Context) GetPolicyEntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyEntityOwnerOutput)
}

// GetPolicyEntityOwnerArrayInput is an input type that accepts GetPolicyEntityOwnerArray and GetPolicyEntityOwnerArrayOutput values.
// You can construct a concrete instance of `GetPolicyEntityOwnerArrayInput` via:
//
//	GetPolicyEntityOwnerArray{ GetPolicyEntityOwnerArgs{...} }
type GetPolicyEntityOwnerArrayInput interface {
	pulumi.Input

	ToGetPolicyEntityOwnerArrayOutput() GetPolicyEntityOwnerArrayOutput
	ToGetPolicyEntityOwnerArrayOutputWithContext(context.Context) GetPolicyEntityOwnerArrayOutput
}

type GetPolicyEntityOwnerArray []GetPolicyEntityOwnerInput

func (GetPolicyEntityOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyEntityOwner)(nil)).Elem()
}

func (i GetPolicyEntityOwnerArray) ToGetPolicyEntityOwnerArrayOutput() GetPolicyEntityOwnerArrayOutput {
	return i.ToGetPolicyEntityOwnerArrayOutputWithContext(context.Background())
}

func (i GetPolicyEntityOwnerArray) ToGetPolicyEntityOwnerArrayOutputWithContext(ctx context.Context) GetPolicyEntityOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyEntityOwnerArrayOutput)
}

type GetPolicyEntityOwnerOutput struct{ *pulumi.OutputState }

func (GetPolicyEntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyEntityOwner)(nil)).Elem()
}

func (o GetPolicyEntityOwnerOutput) ToGetPolicyEntityOwnerOutput() GetPolicyEntityOwnerOutput {
	return o
}

func (o GetPolicyEntityOwnerOutput) ToGetPolicyEntityOwnerOutputWithContext(ctx context.Context) GetPolicyEntityOwnerOutput {
	return o
}

// Escalation policy owner id.
func (o GetPolicyEntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyEntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Escalation policy owner type. (user or squad or team)
func (o GetPolicyEntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyEntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type GetPolicyEntityOwnerArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyEntityOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyEntityOwner)(nil)).Elem()
}

func (o GetPolicyEntityOwnerArrayOutput) ToGetPolicyEntityOwnerArrayOutput() GetPolicyEntityOwnerArrayOutput {
	return o
}

func (o GetPolicyEntityOwnerArrayOutput) ToGetPolicyEntityOwnerArrayOutputWithContext(ctx context.Context) GetPolicyEntityOwnerArrayOutput {
	return o
}

func (o GetPolicyEntityOwnerArrayOutput) Index(i pulumi.IntInput) GetPolicyEntityOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyEntityOwner {
		return vs[0].([]GetPolicyEntityOwner)[vs[1].(int)]
	}).(GetPolicyEntityOwnerOutput)
}

type GetPolicyRepeat struct {
	// The number of minutes to wait before repeating the escalation policy
	DelayMinutes int `pulumi:"delayMinutes"`
	// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
	Times int `pulumi:"times"`
}

// GetPolicyRepeatInput is an input type that accepts GetPolicyRepeatArgs and GetPolicyRepeatOutput values.
// You can construct a concrete instance of `GetPolicyRepeatInput` via:
//
//	GetPolicyRepeatArgs{...}
type GetPolicyRepeatInput interface {
	pulumi.Input

	ToGetPolicyRepeatOutput() GetPolicyRepeatOutput
	ToGetPolicyRepeatOutputWithContext(context.Context) GetPolicyRepeatOutput
}

type GetPolicyRepeatArgs struct {
	// The number of minutes to wait before repeating the escalation policy
	DelayMinutes pulumi.IntInput `pulumi:"delayMinutes"`
	// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
	Times pulumi.IntInput `pulumi:"times"`
}

func (GetPolicyRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRepeat)(nil)).Elem()
}

func (i GetPolicyRepeatArgs) ToGetPolicyRepeatOutput() GetPolicyRepeatOutput {
	return i.ToGetPolicyRepeatOutputWithContext(context.Background())
}

func (i GetPolicyRepeatArgs) ToGetPolicyRepeatOutputWithContext(ctx context.Context) GetPolicyRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRepeatOutput)
}

// GetPolicyRepeatArrayInput is an input type that accepts GetPolicyRepeatArray and GetPolicyRepeatArrayOutput values.
// You can construct a concrete instance of `GetPolicyRepeatArrayInput` via:
//
//	GetPolicyRepeatArray{ GetPolicyRepeatArgs{...} }
type GetPolicyRepeatArrayInput interface {
	pulumi.Input

	ToGetPolicyRepeatArrayOutput() GetPolicyRepeatArrayOutput
	ToGetPolicyRepeatArrayOutputWithContext(context.Context) GetPolicyRepeatArrayOutput
}

type GetPolicyRepeatArray []GetPolicyRepeatInput

func (GetPolicyRepeatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRepeat)(nil)).Elem()
}

func (i GetPolicyRepeatArray) ToGetPolicyRepeatArrayOutput() GetPolicyRepeatArrayOutput {
	return i.ToGetPolicyRepeatArrayOutputWithContext(context.Background())
}

func (i GetPolicyRepeatArray) ToGetPolicyRepeatArrayOutputWithContext(ctx context.Context) GetPolicyRepeatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRepeatArrayOutput)
}

type GetPolicyRepeatOutput struct{ *pulumi.OutputState }

func (GetPolicyRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRepeat)(nil)).Elem()
}

func (o GetPolicyRepeatOutput) ToGetPolicyRepeatOutput() GetPolicyRepeatOutput {
	return o
}

func (o GetPolicyRepeatOutput) ToGetPolicyRepeatOutputWithContext(ctx context.Context) GetPolicyRepeatOutput {
	return o
}

// The number of minutes to wait before repeating the escalation policy
func (o GetPolicyRepeatOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRepeat) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

// The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
func (o GetPolicyRepeatOutput) Times() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRepeat) int { return v.Times }).(pulumi.IntOutput)
}

type GetPolicyRepeatArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyRepeatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRepeat)(nil)).Elem()
}

func (o GetPolicyRepeatArrayOutput) ToGetPolicyRepeatArrayOutput() GetPolicyRepeatArrayOutput {
	return o
}

func (o GetPolicyRepeatArrayOutput) ToGetPolicyRepeatArrayOutputWithContext(ctx context.Context) GetPolicyRepeatArrayOutput {
	return o
}

func (o GetPolicyRepeatArrayOutput) Index(i pulumi.IntInput) GetPolicyRepeatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyRepeat {
		return vs[0].([]GetPolicyRepeat)[vs[1].(int)]
	}).(GetPolicyRepeatOutput)
}

type GetPolicyRule struct {
	DelayMinutes         int      `pulumi:"delayMinutes"`
	NotificationChannels []string `pulumi:"notificationChannels"`
	// repeat this rule
	Repeats     []GetPolicyRuleRepeat     `pulumi:"repeats"`
	RoundRobins []GetPolicyRuleRoundRobin `pulumi:"roundRobins"`
	Targets     []GetPolicyRuleTarget     `pulumi:"targets"`
}

// GetPolicyRuleInput is an input type that accepts GetPolicyRuleArgs and GetPolicyRuleOutput values.
// You can construct a concrete instance of `GetPolicyRuleInput` via:
//
//	GetPolicyRuleArgs{...}
type GetPolicyRuleInput interface {
	pulumi.Input

	ToGetPolicyRuleOutput() GetPolicyRuleOutput
	ToGetPolicyRuleOutputWithContext(context.Context) GetPolicyRuleOutput
}

type GetPolicyRuleArgs struct {
	DelayMinutes         pulumi.IntInput         `pulumi:"delayMinutes"`
	NotificationChannels pulumi.StringArrayInput `pulumi:"notificationChannels"`
	// repeat this rule
	Repeats     GetPolicyRuleRepeatArrayInput     `pulumi:"repeats"`
	RoundRobins GetPolicyRuleRoundRobinArrayInput `pulumi:"roundRobins"`
	Targets     GetPolicyRuleTargetArrayInput     `pulumi:"targets"`
}

func (GetPolicyRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRule)(nil)).Elem()
}

func (i GetPolicyRuleArgs) ToGetPolicyRuleOutput() GetPolicyRuleOutput {
	return i.ToGetPolicyRuleOutputWithContext(context.Background())
}

func (i GetPolicyRuleArgs) ToGetPolicyRuleOutputWithContext(ctx context.Context) GetPolicyRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleOutput)
}

// GetPolicyRuleArrayInput is an input type that accepts GetPolicyRuleArray and GetPolicyRuleArrayOutput values.
// You can construct a concrete instance of `GetPolicyRuleArrayInput` via:
//
//	GetPolicyRuleArray{ GetPolicyRuleArgs{...} }
type GetPolicyRuleArrayInput interface {
	pulumi.Input

	ToGetPolicyRuleArrayOutput() GetPolicyRuleArrayOutput
	ToGetPolicyRuleArrayOutputWithContext(context.Context) GetPolicyRuleArrayOutput
}

type GetPolicyRuleArray []GetPolicyRuleInput

func (GetPolicyRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRule)(nil)).Elem()
}

func (i GetPolicyRuleArray) ToGetPolicyRuleArrayOutput() GetPolicyRuleArrayOutput {
	return i.ToGetPolicyRuleArrayOutputWithContext(context.Background())
}

func (i GetPolicyRuleArray) ToGetPolicyRuleArrayOutputWithContext(ctx context.Context) GetPolicyRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleArrayOutput)
}

type GetPolicyRuleOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRule)(nil)).Elem()
}

func (o GetPolicyRuleOutput) ToGetPolicyRuleOutput() GetPolicyRuleOutput {
	return o
}

func (o GetPolicyRuleOutput) ToGetPolicyRuleOutputWithContext(ctx context.Context) GetPolicyRuleOutput {
	return o
}

func (o GetPolicyRuleOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRule) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

func (o GetPolicyRuleOutput) NotificationChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPolicyRule) []string { return v.NotificationChannels }).(pulumi.StringArrayOutput)
}

// repeat this rule
func (o GetPolicyRuleOutput) Repeats() GetPolicyRuleRepeatArrayOutput {
	return o.ApplyT(func(v GetPolicyRule) []GetPolicyRuleRepeat { return v.Repeats }).(GetPolicyRuleRepeatArrayOutput)
}

func (o GetPolicyRuleOutput) RoundRobins() GetPolicyRuleRoundRobinArrayOutput {
	return o.ApplyT(func(v GetPolicyRule) []GetPolicyRuleRoundRobin { return v.RoundRobins }).(GetPolicyRuleRoundRobinArrayOutput)
}

func (o GetPolicyRuleOutput) Targets() GetPolicyRuleTargetArrayOutput {
	return o.ApplyT(func(v GetPolicyRule) []GetPolicyRuleTarget { return v.Targets }).(GetPolicyRuleTargetArrayOutput)
}

type GetPolicyRuleArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRule)(nil)).Elem()
}

func (o GetPolicyRuleArrayOutput) ToGetPolicyRuleArrayOutput() GetPolicyRuleArrayOutput {
	return o
}

func (o GetPolicyRuleArrayOutput) ToGetPolicyRuleArrayOutputWithContext(ctx context.Context) GetPolicyRuleArrayOutput {
	return o
}

func (o GetPolicyRuleArrayOutput) Index(i pulumi.IntInput) GetPolicyRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyRule {
		return vs[0].([]GetPolicyRule)[vs[1].(int)]
	}).(GetPolicyRuleOutput)
}

type GetPolicyRuleRepeat struct {
	// repeat after minutes
	DelayMinutes int `pulumi:"delayMinutes"`
	// repeat times
	Times int `pulumi:"times"`
}

// GetPolicyRuleRepeatInput is an input type that accepts GetPolicyRuleRepeatArgs and GetPolicyRuleRepeatOutput values.
// You can construct a concrete instance of `GetPolicyRuleRepeatInput` via:
//
//	GetPolicyRuleRepeatArgs{...}
type GetPolicyRuleRepeatInput interface {
	pulumi.Input

	ToGetPolicyRuleRepeatOutput() GetPolicyRuleRepeatOutput
	ToGetPolicyRuleRepeatOutputWithContext(context.Context) GetPolicyRuleRepeatOutput
}

type GetPolicyRuleRepeatArgs struct {
	// repeat after minutes
	DelayMinutes pulumi.IntInput `pulumi:"delayMinutes"`
	// repeat times
	Times pulumi.IntInput `pulumi:"times"`
}

func (GetPolicyRuleRepeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRuleRepeat)(nil)).Elem()
}

func (i GetPolicyRuleRepeatArgs) ToGetPolicyRuleRepeatOutput() GetPolicyRuleRepeatOutput {
	return i.ToGetPolicyRuleRepeatOutputWithContext(context.Background())
}

func (i GetPolicyRuleRepeatArgs) ToGetPolicyRuleRepeatOutputWithContext(ctx context.Context) GetPolicyRuleRepeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleRepeatOutput)
}

// GetPolicyRuleRepeatArrayInput is an input type that accepts GetPolicyRuleRepeatArray and GetPolicyRuleRepeatArrayOutput values.
// You can construct a concrete instance of `GetPolicyRuleRepeatArrayInput` via:
//
//	GetPolicyRuleRepeatArray{ GetPolicyRuleRepeatArgs{...} }
type GetPolicyRuleRepeatArrayInput interface {
	pulumi.Input

	ToGetPolicyRuleRepeatArrayOutput() GetPolicyRuleRepeatArrayOutput
	ToGetPolicyRuleRepeatArrayOutputWithContext(context.Context) GetPolicyRuleRepeatArrayOutput
}

type GetPolicyRuleRepeatArray []GetPolicyRuleRepeatInput

func (GetPolicyRuleRepeatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRuleRepeat)(nil)).Elem()
}

func (i GetPolicyRuleRepeatArray) ToGetPolicyRuleRepeatArrayOutput() GetPolicyRuleRepeatArrayOutput {
	return i.ToGetPolicyRuleRepeatArrayOutputWithContext(context.Background())
}

func (i GetPolicyRuleRepeatArray) ToGetPolicyRuleRepeatArrayOutputWithContext(ctx context.Context) GetPolicyRuleRepeatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleRepeatArrayOutput)
}

type GetPolicyRuleRepeatOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleRepeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRuleRepeat)(nil)).Elem()
}

func (o GetPolicyRuleRepeatOutput) ToGetPolicyRuleRepeatOutput() GetPolicyRuleRepeatOutput {
	return o
}

func (o GetPolicyRuleRepeatOutput) ToGetPolicyRuleRepeatOutputWithContext(ctx context.Context) GetPolicyRuleRepeatOutput {
	return o
}

// repeat after minutes
func (o GetPolicyRuleRepeatOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRuleRepeat) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

// repeat times
func (o GetPolicyRuleRepeatOutput) Times() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRuleRepeat) int { return v.Times }).(pulumi.IntOutput)
}

type GetPolicyRuleRepeatArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleRepeatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRuleRepeat)(nil)).Elem()
}

func (o GetPolicyRuleRepeatArrayOutput) ToGetPolicyRuleRepeatArrayOutput() GetPolicyRuleRepeatArrayOutput {
	return o
}

func (o GetPolicyRuleRepeatArrayOutput) ToGetPolicyRuleRepeatArrayOutputWithContext(ctx context.Context) GetPolicyRuleRepeatArrayOutput {
	return o
}

func (o GetPolicyRuleRepeatArrayOutput) Index(i pulumi.IntInput) GetPolicyRuleRepeatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyRuleRepeat {
		return vs[0].([]GetPolicyRuleRepeat)[vs[1].(int)]
	}).(GetPolicyRuleRepeatOutput)
}

type GetPolicyRuleRoundRobin struct {
	// Round Robin Escalation is an incident assignment strategy where users are placed in a ring and assigned to incidents sequentially. This strategy can help ensure that incidents are equitably distributed. It can also lower incident response time if a service experiences concurrent incidents, since the incidents will not all be assigned to the same responder.
	Enabled   bool                              `pulumi:"enabled"`
	Rotations []GetPolicyRuleRoundRobinRotation `pulumi:"rotations"`
}

// GetPolicyRuleRoundRobinInput is an input type that accepts GetPolicyRuleRoundRobinArgs and GetPolicyRuleRoundRobinOutput values.
// You can construct a concrete instance of `GetPolicyRuleRoundRobinInput` via:
//
//	GetPolicyRuleRoundRobinArgs{...}
type GetPolicyRuleRoundRobinInput interface {
	pulumi.Input

	ToGetPolicyRuleRoundRobinOutput() GetPolicyRuleRoundRobinOutput
	ToGetPolicyRuleRoundRobinOutputWithContext(context.Context) GetPolicyRuleRoundRobinOutput
}

type GetPolicyRuleRoundRobinArgs struct {
	// Round Robin Escalation is an incident assignment strategy where users are placed in a ring and assigned to incidents sequentially. This strategy can help ensure that incidents are equitably distributed. It can also lower incident response time if a service experiences concurrent incidents, since the incidents will not all be assigned to the same responder.
	Enabled   pulumi.BoolInput                          `pulumi:"enabled"`
	Rotations GetPolicyRuleRoundRobinRotationArrayInput `pulumi:"rotations"`
}

func (GetPolicyRuleRoundRobinArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRuleRoundRobin)(nil)).Elem()
}

func (i GetPolicyRuleRoundRobinArgs) ToGetPolicyRuleRoundRobinOutput() GetPolicyRuleRoundRobinOutput {
	return i.ToGetPolicyRuleRoundRobinOutputWithContext(context.Background())
}

func (i GetPolicyRuleRoundRobinArgs) ToGetPolicyRuleRoundRobinOutputWithContext(ctx context.Context) GetPolicyRuleRoundRobinOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleRoundRobinOutput)
}

// GetPolicyRuleRoundRobinArrayInput is an input type that accepts GetPolicyRuleRoundRobinArray and GetPolicyRuleRoundRobinArrayOutput values.
// You can construct a concrete instance of `GetPolicyRuleRoundRobinArrayInput` via:
//
//	GetPolicyRuleRoundRobinArray{ GetPolicyRuleRoundRobinArgs{...} }
type GetPolicyRuleRoundRobinArrayInput interface {
	pulumi.Input

	ToGetPolicyRuleRoundRobinArrayOutput() GetPolicyRuleRoundRobinArrayOutput
	ToGetPolicyRuleRoundRobinArrayOutputWithContext(context.Context) GetPolicyRuleRoundRobinArrayOutput
}

type GetPolicyRuleRoundRobinArray []GetPolicyRuleRoundRobinInput

func (GetPolicyRuleRoundRobinArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRuleRoundRobin)(nil)).Elem()
}

func (i GetPolicyRuleRoundRobinArray) ToGetPolicyRuleRoundRobinArrayOutput() GetPolicyRuleRoundRobinArrayOutput {
	return i.ToGetPolicyRuleRoundRobinArrayOutputWithContext(context.Background())
}

func (i GetPolicyRuleRoundRobinArray) ToGetPolicyRuleRoundRobinArrayOutputWithContext(ctx context.Context) GetPolicyRuleRoundRobinArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleRoundRobinArrayOutput)
}

type GetPolicyRuleRoundRobinOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleRoundRobinOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRuleRoundRobin)(nil)).Elem()
}

func (o GetPolicyRuleRoundRobinOutput) ToGetPolicyRuleRoundRobinOutput() GetPolicyRuleRoundRobinOutput {
	return o
}

func (o GetPolicyRuleRoundRobinOutput) ToGetPolicyRuleRoundRobinOutputWithContext(ctx context.Context) GetPolicyRuleRoundRobinOutput {
	return o
}

// Round Robin Escalation is an incident assignment strategy where users are placed in a ring and assigned to incidents sequentially. This strategy can help ensure that incidents are equitably distributed. It can also lower incident response time if a service experiences concurrent incidents, since the incidents will not all be assigned to the same responder.
func (o GetPolicyRuleRoundRobinOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleRoundRobin) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetPolicyRuleRoundRobinOutput) Rotations() GetPolicyRuleRoundRobinRotationArrayOutput {
	return o.ApplyT(func(v GetPolicyRuleRoundRobin) []GetPolicyRuleRoundRobinRotation { return v.Rotations }).(GetPolicyRuleRoundRobinRotationArrayOutput)
}

type GetPolicyRuleRoundRobinArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleRoundRobinArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRuleRoundRobin)(nil)).Elem()
}

func (o GetPolicyRuleRoundRobinArrayOutput) ToGetPolicyRuleRoundRobinArrayOutput() GetPolicyRuleRoundRobinArrayOutput {
	return o
}

func (o GetPolicyRuleRoundRobinArrayOutput) ToGetPolicyRuleRoundRobinArrayOutputWithContext(ctx context.Context) GetPolicyRuleRoundRobinArrayOutput {
	return o
}

func (o GetPolicyRuleRoundRobinArrayOutput) Index(i pulumi.IntInput) GetPolicyRuleRoundRobinOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyRuleRoundRobin {
		return vs[0].([]GetPolicyRuleRoundRobin)[vs[1].(int)]
	}).(GetPolicyRuleRoundRobinOutput)
}

type GetPolicyRuleRoundRobinRotation struct {
	// repeat after minutes
	DelayMinutes int `pulumi:"delayMinutes"`
	// enable rotation within
	Enabled bool `pulumi:"enabled"`
}

// GetPolicyRuleRoundRobinRotationInput is an input type that accepts GetPolicyRuleRoundRobinRotationArgs and GetPolicyRuleRoundRobinRotationOutput values.
// You can construct a concrete instance of `GetPolicyRuleRoundRobinRotationInput` via:
//
//	GetPolicyRuleRoundRobinRotationArgs{...}
type GetPolicyRuleRoundRobinRotationInput interface {
	pulumi.Input

	ToGetPolicyRuleRoundRobinRotationOutput() GetPolicyRuleRoundRobinRotationOutput
	ToGetPolicyRuleRoundRobinRotationOutputWithContext(context.Context) GetPolicyRuleRoundRobinRotationOutput
}

type GetPolicyRuleRoundRobinRotationArgs struct {
	// repeat after minutes
	DelayMinutes pulumi.IntInput `pulumi:"delayMinutes"`
	// enable rotation within
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (GetPolicyRuleRoundRobinRotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (i GetPolicyRuleRoundRobinRotationArgs) ToGetPolicyRuleRoundRobinRotationOutput() GetPolicyRuleRoundRobinRotationOutput {
	return i.ToGetPolicyRuleRoundRobinRotationOutputWithContext(context.Background())
}

func (i GetPolicyRuleRoundRobinRotationArgs) ToGetPolicyRuleRoundRobinRotationOutputWithContext(ctx context.Context) GetPolicyRuleRoundRobinRotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleRoundRobinRotationOutput)
}

// GetPolicyRuleRoundRobinRotationArrayInput is an input type that accepts GetPolicyRuleRoundRobinRotationArray and GetPolicyRuleRoundRobinRotationArrayOutput values.
// You can construct a concrete instance of `GetPolicyRuleRoundRobinRotationArrayInput` via:
//
//	GetPolicyRuleRoundRobinRotationArray{ GetPolicyRuleRoundRobinRotationArgs{...} }
type GetPolicyRuleRoundRobinRotationArrayInput interface {
	pulumi.Input

	ToGetPolicyRuleRoundRobinRotationArrayOutput() GetPolicyRuleRoundRobinRotationArrayOutput
	ToGetPolicyRuleRoundRobinRotationArrayOutputWithContext(context.Context) GetPolicyRuleRoundRobinRotationArrayOutput
}

type GetPolicyRuleRoundRobinRotationArray []GetPolicyRuleRoundRobinRotationInput

func (GetPolicyRuleRoundRobinRotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (i GetPolicyRuleRoundRobinRotationArray) ToGetPolicyRuleRoundRobinRotationArrayOutput() GetPolicyRuleRoundRobinRotationArrayOutput {
	return i.ToGetPolicyRuleRoundRobinRotationArrayOutputWithContext(context.Background())
}

func (i GetPolicyRuleRoundRobinRotationArray) ToGetPolicyRuleRoundRobinRotationArrayOutputWithContext(ctx context.Context) GetPolicyRuleRoundRobinRotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleRoundRobinRotationArrayOutput)
}

type GetPolicyRuleRoundRobinRotationOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleRoundRobinRotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (o GetPolicyRuleRoundRobinRotationOutput) ToGetPolicyRuleRoundRobinRotationOutput() GetPolicyRuleRoundRobinRotationOutput {
	return o
}

func (o GetPolicyRuleRoundRobinRotationOutput) ToGetPolicyRuleRoundRobinRotationOutputWithContext(ctx context.Context) GetPolicyRuleRoundRobinRotationOutput {
	return o
}

// repeat after minutes
func (o GetPolicyRuleRoundRobinRotationOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyRuleRoundRobinRotation) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

// enable rotation within
func (o GetPolicyRuleRoundRobinRotationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyRuleRoundRobinRotation) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type GetPolicyRuleRoundRobinRotationArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleRoundRobinRotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRuleRoundRobinRotation)(nil)).Elem()
}

func (o GetPolicyRuleRoundRobinRotationArrayOutput) ToGetPolicyRuleRoundRobinRotationArrayOutput() GetPolicyRuleRoundRobinRotationArrayOutput {
	return o
}

func (o GetPolicyRuleRoundRobinRotationArrayOutput) ToGetPolicyRuleRoundRobinRotationArrayOutputWithContext(ctx context.Context) GetPolicyRuleRoundRobinRotationArrayOutput {
	return o
}

func (o GetPolicyRuleRoundRobinRotationArrayOutput) Index(i pulumi.IntInput) GetPolicyRuleRoundRobinRotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyRuleRoundRobinRotation {
		return vs[0].([]GetPolicyRuleRoundRobinRotation)[vs[1].(int)]
	}).(GetPolicyRuleRoundRobinRotationOutput)
}

type GetPolicyRuleTarget struct {
	Id   string `pulumi:"id"`
	Type string `pulumi:"type"`
}

// GetPolicyRuleTargetInput is an input type that accepts GetPolicyRuleTargetArgs and GetPolicyRuleTargetOutput values.
// You can construct a concrete instance of `GetPolicyRuleTargetInput` via:
//
//	GetPolicyRuleTargetArgs{...}
type GetPolicyRuleTargetInput interface {
	pulumi.Input

	ToGetPolicyRuleTargetOutput() GetPolicyRuleTargetOutput
	ToGetPolicyRuleTargetOutputWithContext(context.Context) GetPolicyRuleTargetOutput
}

type GetPolicyRuleTargetArgs struct {
	Id   pulumi.StringInput `pulumi:"id"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetPolicyRuleTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRuleTarget)(nil)).Elem()
}

func (i GetPolicyRuleTargetArgs) ToGetPolicyRuleTargetOutput() GetPolicyRuleTargetOutput {
	return i.ToGetPolicyRuleTargetOutputWithContext(context.Background())
}

func (i GetPolicyRuleTargetArgs) ToGetPolicyRuleTargetOutputWithContext(ctx context.Context) GetPolicyRuleTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleTargetOutput)
}

// GetPolicyRuleTargetArrayInput is an input type that accepts GetPolicyRuleTargetArray and GetPolicyRuleTargetArrayOutput values.
// You can construct a concrete instance of `GetPolicyRuleTargetArrayInput` via:
//
//	GetPolicyRuleTargetArray{ GetPolicyRuleTargetArgs{...} }
type GetPolicyRuleTargetArrayInput interface {
	pulumi.Input

	ToGetPolicyRuleTargetArrayOutput() GetPolicyRuleTargetArrayOutput
	ToGetPolicyRuleTargetArrayOutputWithContext(context.Context) GetPolicyRuleTargetArrayOutput
}

type GetPolicyRuleTargetArray []GetPolicyRuleTargetInput

func (GetPolicyRuleTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRuleTarget)(nil)).Elem()
}

func (i GetPolicyRuleTargetArray) ToGetPolicyRuleTargetArrayOutput() GetPolicyRuleTargetArrayOutput {
	return i.ToGetPolicyRuleTargetArrayOutputWithContext(context.Background())
}

func (i GetPolicyRuleTargetArray) ToGetPolicyRuleTargetArrayOutputWithContext(ctx context.Context) GetPolicyRuleTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyRuleTargetArrayOutput)
}

type GetPolicyRuleTargetOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyRuleTarget)(nil)).Elem()
}

func (o GetPolicyRuleTargetOutput) ToGetPolicyRuleTargetOutput() GetPolicyRuleTargetOutput {
	return o
}

func (o GetPolicyRuleTargetOutput) ToGetPolicyRuleTargetOutputWithContext(ctx context.Context) GetPolicyRuleTargetOutput {
	return o
}

func (o GetPolicyRuleTargetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleTarget) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPolicyRuleTargetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyRuleTarget) string { return v.Type }).(pulumi.StringOutput)
}

type GetPolicyRuleTargetArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyRuleTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyRuleTarget)(nil)).Elem()
}

func (o GetPolicyRuleTargetArrayOutput) ToGetPolicyRuleTargetArrayOutput() GetPolicyRuleTargetArrayOutput {
	return o
}

func (o GetPolicyRuleTargetArrayOutput) ToGetPolicyRuleTargetArrayOutputWithContext(ctx context.Context) GetPolicyRuleTargetArrayOutput {
	return o
}

func (o GetPolicyRuleTargetArrayOutput) Index(i pulumi.IntInput) GetPolicyRuleTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyRuleTarget {
		return vs[0].([]GetPolicyRuleTarget)[vs[1].(int)]
	}).(GetPolicyRuleTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyEntityOwnerInput)(nil)).Elem(), PolicyEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyEntityOwnerPtrInput)(nil)).Elem(), PolicyEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRepeatInput)(nil)).Elem(), PolicyRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRepeatPtrInput)(nil)).Elem(), PolicyRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleInput)(nil)).Elem(), PolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleArrayInput)(nil)).Elem(), PolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleRepeatInput)(nil)).Elem(), PolicyRuleRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleRepeatPtrInput)(nil)).Elem(), PolicyRuleRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleRoundRobinInput)(nil)).Elem(), PolicyRuleRoundRobinArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleRoundRobinPtrInput)(nil)).Elem(), PolicyRuleRoundRobinArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleRoundRobinRotationInput)(nil)).Elem(), PolicyRuleRoundRobinRotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleRoundRobinRotationPtrInput)(nil)).Elem(), PolicyRuleRoundRobinRotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleTargetInput)(nil)).Elem(), PolicyRuleTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyRuleTargetArrayInput)(nil)).Elem(), PolicyRuleTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyEntityOwnerInput)(nil)).Elem(), GetPolicyEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyEntityOwnerArrayInput)(nil)).Elem(), GetPolicyEntityOwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRepeatInput)(nil)).Elem(), GetPolicyRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRepeatArrayInput)(nil)).Elem(), GetPolicyRepeatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleInput)(nil)).Elem(), GetPolicyRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleArrayInput)(nil)).Elem(), GetPolicyRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleRepeatInput)(nil)).Elem(), GetPolicyRuleRepeatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleRepeatArrayInput)(nil)).Elem(), GetPolicyRuleRepeatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleRoundRobinInput)(nil)).Elem(), GetPolicyRuleRoundRobinArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleRoundRobinArrayInput)(nil)).Elem(), GetPolicyRuleRoundRobinArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleRoundRobinRotationInput)(nil)).Elem(), GetPolicyRuleRoundRobinRotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleRoundRobinRotationArrayInput)(nil)).Elem(), GetPolicyRuleRoundRobinRotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleTargetInput)(nil)).Elem(), GetPolicyRuleTargetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyRuleTargetArrayInput)(nil)).Elem(), GetPolicyRuleTargetArray{})
	pulumi.RegisterOutputType(PolicyEntityOwnerOutput{})
	pulumi.RegisterOutputType(PolicyEntityOwnerPtrOutput{})
	pulumi.RegisterOutputType(PolicyRepeatOutput{})
	pulumi.RegisterOutputType(PolicyRepeatPtrOutput{})
	pulumi.RegisterOutputType(PolicyRuleOutput{})
	pulumi.RegisterOutputType(PolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(PolicyRuleRepeatOutput{})
	pulumi.RegisterOutputType(PolicyRuleRepeatPtrOutput{})
	pulumi.RegisterOutputType(PolicyRuleRoundRobinOutput{})
	pulumi.RegisterOutputType(PolicyRuleRoundRobinPtrOutput{})
	pulumi.RegisterOutputType(PolicyRuleRoundRobinRotationOutput{})
	pulumi.RegisterOutputType(PolicyRuleRoundRobinRotationPtrOutput{})
	pulumi.RegisterOutputType(PolicyRuleTargetOutput{})
	pulumi.RegisterOutputType(PolicyRuleTargetArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyEntityOwnerOutput{})
	pulumi.RegisterOutputType(GetPolicyEntityOwnerArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyRepeatOutput{})
	pulumi.RegisterOutputType(GetPolicyRepeatArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleRepeatOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleRepeatArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleRoundRobinOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleRoundRobinArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleRoundRobinRotationOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleRoundRobinRotationArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleTargetOutput{})
	pulumi.RegisterOutputType(GetPolicyRuleTargetArrayOutput{})
}
