// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rules

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The ordering of rules within a Ruleset dictates the sequence in which rules are evaluated for an alert source. These rules are evaluated sequentially, starting from the top.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast"
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/ger"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTeam, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "Example Team",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleUser, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "john@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleService, err := squadcast.LookupService(ctx, &squadcast.LookupServiceArgs{
//				Name:   "Example Service",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGer, err := squadcast.NewGer(ctx, "exampleGer", &squadcast.GerArgs{
//				Description: pulumi.String("Example GER Description"),
//				TeamId:      pulumi.String(exampleTeam.Id),
//				EntityOwner: &squadcast.GerEntityOwnerArgs{
//					Id:   pulumi.String(exampleUser.Id),
//					Type: pulumi.String("user"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleGerRuleset, err := ger.NewRuleset(ctx, "exampleGerRuleset", &ger.RulesetArgs{
//				GerId:       exampleGer.ID(),
//				AlertSource: pulumi.String("Prometheus"),
//				CatchAllAction: pulumi.StringMap{
//					"route_to": pulumi.String(exampleService.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ger.NewRule(ctx, "exampleGerRulesetRule1", &ger.RuleArgs{
//				GerId:       exampleGer.ID(),
//				AlertSource: exampleGerRuleset.AlertSource,
//				Expression:  pulumi.String("alertname == \"DeploymentReplicasNotUpdated\""),
//				Description: pulumi.String("Example GER Ruleset Rule"),
//				Action: pulumi.StringMap{
//					"route_to": pulumi.String(exampleService.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ger.NewRule(ctx, "exampleGerRulesetRule2", &ger.RuleArgs{
//				GerId:       exampleGer.ID(),
//				AlertSource: exampleGerRuleset.AlertSource,
//				Expression:  pulumi.String("component == \"kube-state-metrics\""),
//				Description: pulumi.String("Example GER Ruleset Rule"),
//				Action: pulumi.StringMap{
//					"route_to": pulumi.String(exampleService.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ger.NewOrdering(ctx, "ruleOrdering", &ger.OrderingArgs{
//				GerId:       pulumi.Any(squadcast_ger.Ger.Id),
//				AlertSource: pulumi.Any(squadcast_ger_ruleset.Ger_ruleset_1.Alert_source),
//				Orderings: pulumi.StringArray{
//					squadcast_ger_ruleset_rule.Ger_ruleset_rule_2.Id,
//					squadcast_ger_ruleset_rule.Ger_ruleset_rule_1.Id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// gerID:alertSourceName
//
// ```sh
// $ pulumi import squadcast:ger/ruleset/rules/ordering:Ordering example_ger_ruleset_rule_ordering_import "53:Grafana"
// ```
type Ordering struct {
	pulumi.CustomResourceState

	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource pulumi.StringOutput `pulumi:"alertSource"`
	// Shortname of the linked alert source.
	AlertSourceShortname pulumi.StringOutput `pulumi:"alertSourceShortname"`
	// Version of the linked alert source.
	AlertSourceVersion pulumi.StringOutput `pulumi:"alertSourceVersion"`
	// GER id.
	GerId pulumi.StringOutput `pulumi:"gerId"`
	// GER Ruleset Rule Ordering.
	Orderings pulumi.StringArrayOutput `pulumi:"orderings"`
}

// NewOrdering registers a new resource with the given unique name, arguments, and options.
func NewOrdering(ctx *pulumi.Context,
	name string, args *OrderingArgs, opts ...pulumi.ResourceOption) (*Ordering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlertSource == nil {
		return nil, errors.New("invalid value for required argument 'AlertSource'")
	}
	if args.GerId == nil {
		return nil, errors.New("invalid value for required argument 'GerId'")
	}
	if args.Orderings == nil {
		return nil, errors.New("invalid value for required argument 'Orderings'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ordering
	err := ctx.RegisterResource("squadcast:ger/ruleset/rules/ordering:Ordering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrdering gets an existing Ordering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrdering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrderingState, opts ...pulumi.ResourceOption) (*Ordering, error) {
	var resource Ordering
	err := ctx.ReadResource("squadcast:ger/ruleset/rules/ordering:Ordering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ordering resources.
type orderingState struct {
	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource *string `pulumi:"alertSource"`
	// Shortname of the linked alert source.
	AlertSourceShortname *string `pulumi:"alertSourceShortname"`
	// Version of the linked alert source.
	AlertSourceVersion *string `pulumi:"alertSourceVersion"`
	// GER id.
	GerId *string `pulumi:"gerId"`
	// GER Ruleset Rule Ordering.
	Orderings []string `pulumi:"orderings"`
}

type OrderingState struct {
	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource pulumi.StringPtrInput
	// Shortname of the linked alert source.
	AlertSourceShortname pulumi.StringPtrInput
	// Version of the linked alert source.
	AlertSourceVersion pulumi.StringPtrInput
	// GER id.
	GerId pulumi.StringPtrInput
	// GER Ruleset Rule Ordering.
	Orderings pulumi.StringArrayInput
}

func (OrderingState) ElementType() reflect.Type {
	return reflect.TypeOf((*orderingState)(nil)).Elem()
}

type orderingArgs struct {
	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource string `pulumi:"alertSource"`
	// GER id.
	GerId string `pulumi:"gerId"`
	// GER Ruleset Rule Ordering.
	Orderings []string `pulumi:"orderings"`
}

// The set of arguments for constructing a Ordering resource.
type OrderingArgs struct {
	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource pulumi.StringInput
	// GER id.
	GerId pulumi.StringInput
	// GER Ruleset Rule Ordering.
	Orderings pulumi.StringArrayInput
}

func (OrderingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orderingArgs)(nil)).Elem()
}

type OrderingInput interface {
	pulumi.Input

	ToOrderingOutput() OrderingOutput
	ToOrderingOutputWithContext(ctx context.Context) OrderingOutput
}

func (*Ordering) ElementType() reflect.Type {
	return reflect.TypeOf((**Ordering)(nil)).Elem()
}

func (i *Ordering) ToOrderingOutput() OrderingOutput {
	return i.ToOrderingOutputWithContext(context.Background())
}

func (i *Ordering) ToOrderingOutputWithContext(ctx context.Context) OrderingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderingOutput)
}

// OrderingArrayInput is an input type that accepts OrderingArray and OrderingArrayOutput values.
// You can construct a concrete instance of `OrderingArrayInput` via:
//
//	OrderingArray{ OrderingArgs{...} }
type OrderingArrayInput interface {
	pulumi.Input

	ToOrderingArrayOutput() OrderingArrayOutput
	ToOrderingArrayOutputWithContext(context.Context) OrderingArrayOutput
}

type OrderingArray []OrderingInput

func (OrderingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ordering)(nil)).Elem()
}

func (i OrderingArray) ToOrderingArrayOutput() OrderingArrayOutput {
	return i.ToOrderingArrayOutputWithContext(context.Background())
}

func (i OrderingArray) ToOrderingArrayOutputWithContext(ctx context.Context) OrderingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderingArrayOutput)
}

// OrderingMapInput is an input type that accepts OrderingMap and OrderingMapOutput values.
// You can construct a concrete instance of `OrderingMapInput` via:
//
//	OrderingMap{ "key": OrderingArgs{...} }
type OrderingMapInput interface {
	pulumi.Input

	ToOrderingMapOutput() OrderingMapOutput
	ToOrderingMapOutputWithContext(context.Context) OrderingMapOutput
}

type OrderingMap map[string]OrderingInput

func (OrderingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ordering)(nil)).Elem()
}

func (i OrderingMap) ToOrderingMapOutput() OrderingMapOutput {
	return i.ToOrderingMapOutputWithContext(context.Background())
}

func (i OrderingMap) ToOrderingMapOutputWithContext(ctx context.Context) OrderingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderingMapOutput)
}

type OrderingOutput struct{ *pulumi.OutputState }

func (OrderingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ordering)(nil)).Elem()
}

func (o OrderingOutput) ToOrderingOutput() OrderingOutput {
	return o
}

func (o OrderingOutput) ToOrderingOutputWithContext(ctx context.Context) OrderingOutput {
	return o
}

// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
func (o OrderingOutput) AlertSource() pulumi.StringOutput {
	return o.ApplyT(func(v *Ordering) pulumi.StringOutput { return v.AlertSource }).(pulumi.StringOutput)
}

// Shortname of the linked alert source.
func (o OrderingOutput) AlertSourceShortname() pulumi.StringOutput {
	return o.ApplyT(func(v *Ordering) pulumi.StringOutput { return v.AlertSourceShortname }).(pulumi.StringOutput)
}

// Version of the linked alert source.
func (o OrderingOutput) AlertSourceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Ordering) pulumi.StringOutput { return v.AlertSourceVersion }).(pulumi.StringOutput)
}

// GER id.
func (o OrderingOutput) GerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ordering) pulumi.StringOutput { return v.GerId }).(pulumi.StringOutput)
}

// GER Ruleset Rule Ordering.
func (o OrderingOutput) Orderings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Ordering) pulumi.StringArrayOutput { return v.Orderings }).(pulumi.StringArrayOutput)
}

type OrderingArrayOutput struct{ *pulumi.OutputState }

func (OrderingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ordering)(nil)).Elem()
}

func (o OrderingArrayOutput) ToOrderingArrayOutput() OrderingArrayOutput {
	return o
}

func (o OrderingArrayOutput) ToOrderingArrayOutputWithContext(ctx context.Context) OrderingArrayOutput {
	return o
}

func (o OrderingArrayOutput) Index(i pulumi.IntInput) OrderingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ordering {
		return vs[0].([]*Ordering)[vs[1].(int)]
	}).(OrderingOutput)
}

type OrderingMapOutput struct{ *pulumi.OutputState }

func (OrderingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ordering)(nil)).Elem()
}

func (o OrderingMapOutput) ToOrderingMapOutput() OrderingMapOutput {
	return o
}

func (o OrderingMapOutput) ToOrderingMapOutputWithContext(ctx context.Context) OrderingMapOutput {
	return o
}

func (o OrderingMapOutput) MapIndex(k pulumi.StringInput) OrderingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ordering {
		return vs[0].(map[string]*Ordering)[vs[1].(string)]
	}).(OrderingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrderingInput)(nil)).Elem(), &Ordering{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrderingArrayInput)(nil)).Elem(), OrderingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrderingMapInput)(nil)).Elem(), OrderingMap{})
	pulumi.RegisterOutputType(OrderingOutput{})
	pulumi.RegisterOutputType(OrderingArrayOutput{})
	pulumi.RegisterOutputType(OrderingMapOutput{})
}
