// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GER Ruleset is a set of rules and configurations in Squadcast. It allows users to define how alerts are routed to services without the need to set up individual webhooks for each alert source.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTeam, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "Example Team",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			user, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "john@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleService, err := squadcast.LookupService(ctx, &squadcast.LookupServiceArgs{
//				Name:   "Example Service",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGer, err := squadcast.NewGer(ctx, "exampleGer", &squadcast.GerArgs{
//				Description: pulumi.String("Example GER Description"),
//				TeamId:      pulumi.String(exampleTeam.Id),
//				EntityOwner: &squadcast.GerEntityOwnerArgs{
//					Id:   pulumi.String(user.Id),
//					Type: pulumi.String("user"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.NewGerRuleset(ctx, "exampleGerRuleset", &squadcast.GerRulesetArgs{
//				GerId:       exampleGer.ID(),
//				AlertSource: pulumi.String("Prometheus"),
//				CatchAllAction: pulumi.StringMap{
//					"route_to": pulumi.String(exampleService.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// gerID:alertSourceName
//
// ```sh
// $ pulumi import squadcast:index/gerRuleset:GerRuleset example_ger_ruleset_import "53:Grafana"
// ```
type GerRuleset struct {
	pulumi.CustomResourceState

	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource pulumi.StringOutput `pulumi:"alertSource"`
	// Shortname of the linked alert source.
	AlertSourceShortname pulumi.StringOutput `pulumi:"alertSourceShortname"`
	// Version of the linked alert source.
	AlertSourceVersion pulumi.StringOutput `pulumi:"alertSourceVersion"`
	// The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
	CatchAllAction pulumi.StringMapOutput `pulumi:"catchAllAction"`
	// GER id.
	GerId pulumi.StringOutput `pulumi:"gerId"`
}

// NewGerRuleset registers a new resource with the given unique name, arguments, and options.
func NewGerRuleset(ctx *pulumi.Context,
	name string, args *GerRulesetArgs, opts ...pulumi.ResourceOption) (*GerRuleset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlertSource == nil {
		return nil, errors.New("invalid value for required argument 'AlertSource'")
	}
	if args.GerId == nil {
		return nil, errors.New("invalid value for required argument 'GerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GerRuleset
	err := ctx.RegisterResource("squadcast:index/gerRuleset:GerRuleset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGerRuleset gets an existing GerRuleset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGerRuleset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GerRulesetState, opts ...pulumi.ResourceOption) (*GerRuleset, error) {
	var resource GerRuleset
	err := ctx.ReadResource("squadcast:index/gerRuleset:GerRuleset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GerRuleset resources.
type gerRulesetState struct {
	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource *string `pulumi:"alertSource"`
	// Shortname of the linked alert source.
	AlertSourceShortname *string `pulumi:"alertSourceShortname"`
	// Version of the linked alert source.
	AlertSourceVersion *string `pulumi:"alertSourceVersion"`
	// The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
	CatchAllAction map[string]string `pulumi:"catchAllAction"`
	// GER id.
	GerId *string `pulumi:"gerId"`
}

type GerRulesetState struct {
	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource pulumi.StringPtrInput
	// Shortname of the linked alert source.
	AlertSourceShortname pulumi.StringPtrInput
	// Version of the linked alert source.
	AlertSourceVersion pulumi.StringPtrInput
	// The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
	CatchAllAction pulumi.StringMapInput
	// GER id.
	GerId pulumi.StringPtrInput
}

func (GerRulesetState) ElementType() reflect.Type {
	return reflect.TypeOf((*gerRulesetState)(nil)).Elem()
}

type gerRulesetArgs struct {
	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource string `pulumi:"alertSource"`
	// The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
	CatchAllAction map[string]string `pulumi:"catchAllAction"`
	// GER id.
	GerId string `pulumi:"gerId"`
}

// The set of arguments for constructing a GerRuleset resource.
type GerRulesetArgs struct {
	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource pulumi.StringInput
	// The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
	CatchAllAction pulumi.StringMapInput
	// GER id.
	GerId pulumi.StringInput
}

func (GerRulesetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gerRulesetArgs)(nil)).Elem()
}

type GerRulesetInput interface {
	pulumi.Input

	ToGerRulesetOutput() GerRulesetOutput
	ToGerRulesetOutputWithContext(ctx context.Context) GerRulesetOutput
}

func (*GerRuleset) ElementType() reflect.Type {
	return reflect.TypeOf((**GerRuleset)(nil)).Elem()
}

func (i *GerRuleset) ToGerRulesetOutput() GerRulesetOutput {
	return i.ToGerRulesetOutputWithContext(context.Background())
}

func (i *GerRuleset) ToGerRulesetOutputWithContext(ctx context.Context) GerRulesetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerRulesetOutput)
}

// GerRulesetArrayInput is an input type that accepts GerRulesetArray and GerRulesetArrayOutput values.
// You can construct a concrete instance of `GerRulesetArrayInput` via:
//
//	GerRulesetArray{ GerRulesetArgs{...} }
type GerRulesetArrayInput interface {
	pulumi.Input

	ToGerRulesetArrayOutput() GerRulesetArrayOutput
	ToGerRulesetArrayOutputWithContext(context.Context) GerRulesetArrayOutput
}

type GerRulesetArray []GerRulesetInput

func (GerRulesetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GerRuleset)(nil)).Elem()
}

func (i GerRulesetArray) ToGerRulesetArrayOutput() GerRulesetArrayOutput {
	return i.ToGerRulesetArrayOutputWithContext(context.Background())
}

func (i GerRulesetArray) ToGerRulesetArrayOutputWithContext(ctx context.Context) GerRulesetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerRulesetArrayOutput)
}

// GerRulesetMapInput is an input type that accepts GerRulesetMap and GerRulesetMapOutput values.
// You can construct a concrete instance of `GerRulesetMapInput` via:
//
//	GerRulesetMap{ "key": GerRulesetArgs{...} }
type GerRulesetMapInput interface {
	pulumi.Input

	ToGerRulesetMapOutput() GerRulesetMapOutput
	ToGerRulesetMapOutputWithContext(context.Context) GerRulesetMapOutput
}

type GerRulesetMap map[string]GerRulesetInput

func (GerRulesetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GerRuleset)(nil)).Elem()
}

func (i GerRulesetMap) ToGerRulesetMapOutput() GerRulesetMapOutput {
	return i.ToGerRulesetMapOutputWithContext(context.Background())
}

func (i GerRulesetMap) ToGerRulesetMapOutputWithContext(ctx context.Context) GerRulesetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerRulesetMapOutput)
}

type GerRulesetOutput struct{ *pulumi.OutputState }

func (GerRulesetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GerRuleset)(nil)).Elem()
}

func (o GerRulesetOutput) ToGerRulesetOutput() GerRulesetOutput {
	return o
}

func (o GerRulesetOutput) ToGerRulesetOutputWithContext(ctx context.Context) GerRulesetOutput {
	return o
}

// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
func (o GerRulesetOutput) AlertSource() pulumi.StringOutput {
	return o.ApplyT(func(v *GerRuleset) pulumi.StringOutput { return v.AlertSource }).(pulumi.StringOutput)
}

// Shortname of the linked alert source.
func (o GerRulesetOutput) AlertSourceShortname() pulumi.StringOutput {
	return o.ApplyT(func(v *GerRuleset) pulumi.StringOutput { return v.AlertSourceShortname }).(pulumi.StringOutput)
}

// Version of the linked alert source.
func (o GerRulesetOutput) AlertSourceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GerRuleset) pulumi.StringOutput { return v.AlertSourceVersion }).(pulumi.StringOutput)
}

// The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
func (o GerRulesetOutput) CatchAllAction() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GerRuleset) pulumi.StringMapOutput { return v.CatchAllAction }).(pulumi.StringMapOutput)
}

// GER id.
func (o GerRulesetOutput) GerId() pulumi.StringOutput {
	return o.ApplyT(func(v *GerRuleset) pulumi.StringOutput { return v.GerId }).(pulumi.StringOutput)
}

type GerRulesetArrayOutput struct{ *pulumi.OutputState }

func (GerRulesetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GerRuleset)(nil)).Elem()
}

func (o GerRulesetArrayOutput) ToGerRulesetArrayOutput() GerRulesetArrayOutput {
	return o
}

func (o GerRulesetArrayOutput) ToGerRulesetArrayOutputWithContext(ctx context.Context) GerRulesetArrayOutput {
	return o
}

func (o GerRulesetArrayOutput) Index(i pulumi.IntInput) GerRulesetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GerRuleset {
		return vs[0].([]*GerRuleset)[vs[1].(int)]
	}).(GerRulesetOutput)
}

type GerRulesetMapOutput struct{ *pulumi.OutputState }

func (GerRulesetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GerRuleset)(nil)).Elem()
}

func (o GerRulesetMapOutput) ToGerRulesetMapOutput() GerRulesetMapOutput {
	return o
}

func (o GerRulesetMapOutput) ToGerRulesetMapOutputWithContext(ctx context.Context) GerRulesetMapOutput {
	return o
}

func (o GerRulesetMapOutput) MapIndex(k pulumi.StringInput) GerRulesetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GerRuleset {
		return vs[0].(map[string]*GerRuleset)[vs[1].(string)]
	}).(GerRulesetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GerRulesetInput)(nil)).Elem(), &GerRuleset{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerRulesetArrayInput)(nil)).Elem(), GerRulesetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerRulesetMapInput)(nil)).Elem(), GerRulesetMap{})
	pulumi.RegisterOutputType(GerRulesetOutput{})
	pulumi.RegisterOutputType(GerRulesetArrayOutput{})
	pulumi.RegisterOutputType(GerRulesetMapOutput{})
}
