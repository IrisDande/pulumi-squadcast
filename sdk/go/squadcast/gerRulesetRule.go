// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GER Ruleset Rules are a set of conditions defined within a Global Event Ruleset. These rules have expressions, whose evaluation will determine the destination service for the incoming events.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTeam, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "Example Team",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleUser, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "john@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleService, err := squadcast.LookupService(ctx, &squadcast.LookupServiceArgs{
//				Name:   "Example Service",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleGer, err := squadcast.NewGer(ctx, "exampleGer", &squadcast.GerArgs{
//				Description: pulumi.String("Example GER Description"),
//				TeamId:      pulumi.String(exampleTeam.Id),
//				EntityOwner: &squadcast.GerEntityOwnerArgs{
//					Id:   pulumi.String(exampleUser.Id),
//					Type: pulumi.String("user"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleGerRuleset, err := squadcast.NewGerRuleset(ctx, "exampleGerRuleset", &squadcast.GerRulesetArgs{
//				GerId:       exampleGer.ID(),
//				AlertSource: pulumi.String("Prometheus"),
//				CatchAllAction: pulumi.StringMap{
//					"route_to": pulumi.String(exampleService.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.NewGerRulesetRule(ctx, "exampleGerRulesetRule", &squadcast.GerRulesetRuleArgs{
//				GerId:       exampleGer.ID(),
//				AlertSource: exampleGerRuleset.AlertSource,
//				Expression:  pulumi.String("alertname == \"DeploymentReplicasNotUpdated\""),
//				Description: pulumi.String("Example GER Ruleset Rule"),
//				Action: pulumi.StringMap{
//					"route_to": pulumi.String(exampleService.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// gerID:alertSourceName:ruleID
//
// ```sh
// $ pulumi import squadcast:index/gerRulesetRule:GerRulesetRule ger_ruleset_rule_import "50:Grafana:100"
// ```
type GerRulesetRule struct {
	pulumi.CustomResourceState

	// Rule Action refers to the designated destination service to which an event should be directed towards, whenever a rule expression is true.
	Action pulumi.StringMapOutput `pulumi:"action"`
	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource pulumi.StringOutput `pulumi:"alertSource"`
	// Shortname of the linked alert source.
	AlertSourceShortname pulumi.StringOutput `pulumi:"alertSourceShortname"`
	// Version of the linked alert source.
	AlertSourceVersion pulumi.StringOutput `pulumi:"alertSourceVersion"`
	// GER Ruleset Rule description.
	Description pulumi.StringOutput `pulumi:"description"`
	// An expression is a single condition or a set of conditions that must be met for the rule to take action, such as routing the incoming event to a specific service.
	Expression pulumi.StringOutput `pulumi:"expression"`
	// GER id.
	GerId pulumi.StringOutput `pulumi:"gerId"`
}

// NewGerRulesetRule registers a new resource with the given unique name, arguments, and options.
func NewGerRulesetRule(ctx *pulumi.Context,
	name string, args *GerRulesetRuleArgs, opts ...pulumi.ResourceOption) (*GerRulesetRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.AlertSource == nil {
		return nil, errors.New("invalid value for required argument 'AlertSource'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Expression == nil {
		return nil, errors.New("invalid value for required argument 'Expression'")
	}
	if args.GerId == nil {
		return nil, errors.New("invalid value for required argument 'GerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GerRulesetRule
	err := ctx.RegisterResource("squadcast:index/gerRulesetRule:GerRulesetRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGerRulesetRule gets an existing GerRulesetRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGerRulesetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GerRulesetRuleState, opts ...pulumi.ResourceOption) (*GerRulesetRule, error) {
	var resource GerRulesetRule
	err := ctx.ReadResource("squadcast:index/gerRulesetRule:GerRulesetRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GerRulesetRule resources.
type gerRulesetRuleState struct {
	// Rule Action refers to the designated destination service to which an event should be directed towards, whenever a rule expression is true.
	Action map[string]string `pulumi:"action"`
	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource *string `pulumi:"alertSource"`
	// Shortname of the linked alert source.
	AlertSourceShortname *string `pulumi:"alertSourceShortname"`
	// Version of the linked alert source.
	AlertSourceVersion *string `pulumi:"alertSourceVersion"`
	// GER Ruleset Rule description.
	Description *string `pulumi:"description"`
	// An expression is a single condition or a set of conditions that must be met for the rule to take action, such as routing the incoming event to a specific service.
	Expression *string `pulumi:"expression"`
	// GER id.
	GerId *string `pulumi:"gerId"`
}

type GerRulesetRuleState struct {
	// Rule Action refers to the designated destination service to which an event should be directed towards, whenever a rule expression is true.
	Action pulumi.StringMapInput
	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource pulumi.StringPtrInput
	// Shortname of the linked alert source.
	AlertSourceShortname pulumi.StringPtrInput
	// Version of the linked alert source.
	AlertSourceVersion pulumi.StringPtrInput
	// GER Ruleset Rule description.
	Description pulumi.StringPtrInput
	// An expression is a single condition or a set of conditions that must be met for the rule to take action, such as routing the incoming event to a specific service.
	Expression pulumi.StringPtrInput
	// GER id.
	GerId pulumi.StringPtrInput
}

func (GerRulesetRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*gerRulesetRuleState)(nil)).Elem()
}

type gerRulesetRuleArgs struct {
	// Rule Action refers to the designated destination service to which an event should be directed towards, whenever a rule expression is true.
	Action map[string]string `pulumi:"action"`
	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource string `pulumi:"alertSource"`
	// GER Ruleset Rule description.
	Description string `pulumi:"description"`
	// An expression is a single condition or a set of conditions that must be met for the rule to take action, such as routing the incoming event to a specific service.
	Expression string `pulumi:"expression"`
	// GER id.
	GerId string `pulumi:"gerId"`
}

// The set of arguments for constructing a GerRulesetRule resource.
type GerRulesetRuleArgs struct {
	// Rule Action refers to the designated destination service to which an event should be directed towards, whenever a rule expression is true.
	Action pulumi.StringMapInput
	// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
	AlertSource pulumi.StringInput
	// GER Ruleset Rule description.
	Description pulumi.StringInput
	// An expression is a single condition or a set of conditions that must be met for the rule to take action, such as routing the incoming event to a specific service.
	Expression pulumi.StringInput
	// GER id.
	GerId pulumi.StringInput
}

func (GerRulesetRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gerRulesetRuleArgs)(nil)).Elem()
}

type GerRulesetRuleInput interface {
	pulumi.Input

	ToGerRulesetRuleOutput() GerRulesetRuleOutput
	ToGerRulesetRuleOutputWithContext(ctx context.Context) GerRulesetRuleOutput
}

func (*GerRulesetRule) ElementType() reflect.Type {
	return reflect.TypeOf((**GerRulesetRule)(nil)).Elem()
}

func (i *GerRulesetRule) ToGerRulesetRuleOutput() GerRulesetRuleOutput {
	return i.ToGerRulesetRuleOutputWithContext(context.Background())
}

func (i *GerRulesetRule) ToGerRulesetRuleOutputWithContext(ctx context.Context) GerRulesetRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerRulesetRuleOutput)
}

// GerRulesetRuleArrayInput is an input type that accepts GerRulesetRuleArray and GerRulesetRuleArrayOutput values.
// You can construct a concrete instance of `GerRulesetRuleArrayInput` via:
//
//	GerRulesetRuleArray{ GerRulesetRuleArgs{...} }
type GerRulesetRuleArrayInput interface {
	pulumi.Input

	ToGerRulesetRuleArrayOutput() GerRulesetRuleArrayOutput
	ToGerRulesetRuleArrayOutputWithContext(context.Context) GerRulesetRuleArrayOutput
}

type GerRulesetRuleArray []GerRulesetRuleInput

func (GerRulesetRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GerRulesetRule)(nil)).Elem()
}

func (i GerRulesetRuleArray) ToGerRulesetRuleArrayOutput() GerRulesetRuleArrayOutput {
	return i.ToGerRulesetRuleArrayOutputWithContext(context.Background())
}

func (i GerRulesetRuleArray) ToGerRulesetRuleArrayOutputWithContext(ctx context.Context) GerRulesetRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerRulesetRuleArrayOutput)
}

// GerRulesetRuleMapInput is an input type that accepts GerRulesetRuleMap and GerRulesetRuleMapOutput values.
// You can construct a concrete instance of `GerRulesetRuleMapInput` via:
//
//	GerRulesetRuleMap{ "key": GerRulesetRuleArgs{...} }
type GerRulesetRuleMapInput interface {
	pulumi.Input

	ToGerRulesetRuleMapOutput() GerRulesetRuleMapOutput
	ToGerRulesetRuleMapOutputWithContext(context.Context) GerRulesetRuleMapOutput
}

type GerRulesetRuleMap map[string]GerRulesetRuleInput

func (GerRulesetRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GerRulesetRule)(nil)).Elem()
}

func (i GerRulesetRuleMap) ToGerRulesetRuleMapOutput() GerRulesetRuleMapOutput {
	return i.ToGerRulesetRuleMapOutputWithContext(context.Background())
}

func (i GerRulesetRuleMap) ToGerRulesetRuleMapOutputWithContext(ctx context.Context) GerRulesetRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerRulesetRuleMapOutput)
}

type GerRulesetRuleOutput struct{ *pulumi.OutputState }

func (GerRulesetRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GerRulesetRule)(nil)).Elem()
}

func (o GerRulesetRuleOutput) ToGerRulesetRuleOutput() GerRulesetRuleOutput {
	return o
}

func (o GerRulesetRuleOutput) ToGerRulesetRuleOutputWithContext(ctx context.Context) GerRulesetRuleOutput {
	return o
}

// Rule Action refers to the designated destination service to which an event should be directed towards, whenever a rule expression is true.
func (o GerRulesetRuleOutput) Action() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GerRulesetRule) pulumi.StringMapOutput { return v.Action }).(pulumi.StringMapOutput)
}

// An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
func (o GerRulesetRuleOutput) AlertSource() pulumi.StringOutput {
	return o.ApplyT(func(v *GerRulesetRule) pulumi.StringOutput { return v.AlertSource }).(pulumi.StringOutput)
}

// Shortname of the linked alert source.
func (o GerRulesetRuleOutput) AlertSourceShortname() pulumi.StringOutput {
	return o.ApplyT(func(v *GerRulesetRule) pulumi.StringOutput { return v.AlertSourceShortname }).(pulumi.StringOutput)
}

// Version of the linked alert source.
func (o GerRulesetRuleOutput) AlertSourceVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *GerRulesetRule) pulumi.StringOutput { return v.AlertSourceVersion }).(pulumi.StringOutput)
}

// GER Ruleset Rule description.
func (o GerRulesetRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *GerRulesetRule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// An expression is a single condition or a set of conditions that must be met for the rule to take action, such as routing the incoming event to a specific service.
func (o GerRulesetRuleOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v *GerRulesetRule) pulumi.StringOutput { return v.Expression }).(pulumi.StringOutput)
}

// GER id.
func (o GerRulesetRuleOutput) GerId() pulumi.StringOutput {
	return o.ApplyT(func(v *GerRulesetRule) pulumi.StringOutput { return v.GerId }).(pulumi.StringOutput)
}

type GerRulesetRuleArrayOutput struct{ *pulumi.OutputState }

func (GerRulesetRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GerRulesetRule)(nil)).Elem()
}

func (o GerRulesetRuleArrayOutput) ToGerRulesetRuleArrayOutput() GerRulesetRuleArrayOutput {
	return o
}

func (o GerRulesetRuleArrayOutput) ToGerRulesetRuleArrayOutputWithContext(ctx context.Context) GerRulesetRuleArrayOutput {
	return o
}

func (o GerRulesetRuleArrayOutput) Index(i pulumi.IntInput) GerRulesetRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GerRulesetRule {
		return vs[0].([]*GerRulesetRule)[vs[1].(int)]
	}).(GerRulesetRuleOutput)
}

type GerRulesetRuleMapOutput struct{ *pulumi.OutputState }

func (GerRulesetRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GerRulesetRule)(nil)).Elem()
}

func (o GerRulesetRuleMapOutput) ToGerRulesetRuleMapOutput() GerRulesetRuleMapOutput {
	return o
}

func (o GerRulesetRuleMapOutput) ToGerRulesetRuleMapOutputWithContext(ctx context.Context) GerRulesetRuleMapOutput {
	return o
}

func (o GerRulesetRuleMapOutput) MapIndex(k pulumi.StringInput) GerRulesetRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GerRulesetRule {
		return vs[0].(map[string]*GerRulesetRule)[vs[1].(string)]
	}).(GerRulesetRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GerRulesetRuleInput)(nil)).Elem(), &GerRulesetRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerRulesetRuleArrayInput)(nil)).Elem(), GerRulesetRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerRulesetRuleMapInput)(nil)).Elem(), GerRulesetRuleMap{})
	pulumi.RegisterOutputType(GerRulesetRuleOutput{})
	pulumi.RegisterOutputType(GerRulesetRuleArrayOutput{})
	pulumi.RegisterOutputType(GerRulesetRuleMapOutput{})
}
