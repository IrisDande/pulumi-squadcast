// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GerEntityOwner struct {
	// GER owner id.
	Id string `pulumi:"id"`
	// GER owner type. Supported values are 'user' or 'squad'.
	Type string `pulumi:"type"`
}

// GerEntityOwnerInput is an input type that accepts GerEntityOwnerArgs and GerEntityOwnerOutput values.
// You can construct a concrete instance of `GerEntityOwnerInput` via:
//
//	GerEntityOwnerArgs{...}
type GerEntityOwnerInput interface {
	pulumi.Input

	ToGerEntityOwnerOutput() GerEntityOwnerOutput
	ToGerEntityOwnerOutputWithContext(context.Context) GerEntityOwnerOutput
}

type GerEntityOwnerArgs struct {
	// GER owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// GER owner type. Supported values are 'user' or 'squad'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GerEntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GerEntityOwner)(nil)).Elem()
}

func (i GerEntityOwnerArgs) ToGerEntityOwnerOutput() GerEntityOwnerOutput {
	return i.ToGerEntityOwnerOutputWithContext(context.Background())
}

func (i GerEntityOwnerArgs) ToGerEntityOwnerOutputWithContext(ctx context.Context) GerEntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerEntityOwnerOutput)
}

func (i GerEntityOwnerArgs) ToGerEntityOwnerPtrOutput() GerEntityOwnerPtrOutput {
	return i.ToGerEntityOwnerPtrOutputWithContext(context.Background())
}

func (i GerEntityOwnerArgs) ToGerEntityOwnerPtrOutputWithContext(ctx context.Context) GerEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerEntityOwnerOutput).ToGerEntityOwnerPtrOutputWithContext(ctx)
}

// GerEntityOwnerPtrInput is an input type that accepts GerEntityOwnerArgs, GerEntityOwnerPtr and GerEntityOwnerPtrOutput values.
// You can construct a concrete instance of `GerEntityOwnerPtrInput` via:
//
//	        GerEntityOwnerArgs{...}
//
//	or:
//
//	        nil
type GerEntityOwnerPtrInput interface {
	pulumi.Input

	ToGerEntityOwnerPtrOutput() GerEntityOwnerPtrOutput
	ToGerEntityOwnerPtrOutputWithContext(context.Context) GerEntityOwnerPtrOutput
}

type gerEntityOwnerPtrType GerEntityOwnerArgs

func GerEntityOwnerPtr(v *GerEntityOwnerArgs) GerEntityOwnerPtrInput {
	return (*gerEntityOwnerPtrType)(v)
}

func (*gerEntityOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GerEntityOwner)(nil)).Elem()
}

func (i *gerEntityOwnerPtrType) ToGerEntityOwnerPtrOutput() GerEntityOwnerPtrOutput {
	return i.ToGerEntityOwnerPtrOutputWithContext(context.Background())
}

func (i *gerEntityOwnerPtrType) ToGerEntityOwnerPtrOutputWithContext(ctx context.Context) GerEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GerEntityOwnerPtrOutput)
}

type GerEntityOwnerOutput struct{ *pulumi.OutputState }

func (GerEntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GerEntityOwner)(nil)).Elem()
}

func (o GerEntityOwnerOutput) ToGerEntityOwnerOutput() GerEntityOwnerOutput {
	return o
}

func (o GerEntityOwnerOutput) ToGerEntityOwnerOutputWithContext(ctx context.Context) GerEntityOwnerOutput {
	return o
}

func (o GerEntityOwnerOutput) ToGerEntityOwnerPtrOutput() GerEntityOwnerPtrOutput {
	return o.ToGerEntityOwnerPtrOutputWithContext(context.Background())
}

func (o GerEntityOwnerOutput) ToGerEntityOwnerPtrOutputWithContext(ctx context.Context) GerEntityOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GerEntityOwner) *GerEntityOwner {
		return &v
	}).(GerEntityOwnerPtrOutput)
}

// GER owner id.
func (o GerEntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GerEntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// GER owner type. Supported values are 'user' or 'squad'.
func (o GerEntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GerEntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type GerEntityOwnerPtrOutput struct{ *pulumi.OutputState }

func (GerEntityOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GerEntityOwner)(nil)).Elem()
}

func (o GerEntityOwnerPtrOutput) ToGerEntityOwnerPtrOutput() GerEntityOwnerPtrOutput {
	return o
}

func (o GerEntityOwnerPtrOutput) ToGerEntityOwnerPtrOutputWithContext(ctx context.Context) GerEntityOwnerPtrOutput {
	return o
}

func (o GerEntityOwnerPtrOutput) Elem() GerEntityOwnerOutput {
	return o.ApplyT(func(v *GerEntityOwner) GerEntityOwner {
		if v != nil {
			return *v
		}
		var ret GerEntityOwner
		return ret
	}).(GerEntityOwnerOutput)
}

// GER owner id.
func (o GerEntityOwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// GER owner type. Supported values are 'user' or 'squad'.
func (o GerEntityOwnerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GerEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type RunbookEntityOwner struct {
	// Runbook owner id.
	Id string `pulumi:"id"`
	// Runbook owner type. Supported values are 'user' or 'squad'.
	Type string `pulumi:"type"`
}

// RunbookEntityOwnerInput is an input type that accepts RunbookEntityOwnerArgs and RunbookEntityOwnerOutput values.
// You can construct a concrete instance of `RunbookEntityOwnerInput` via:
//
//	RunbookEntityOwnerArgs{...}
type RunbookEntityOwnerInput interface {
	pulumi.Input

	ToRunbookEntityOwnerOutput() RunbookEntityOwnerOutput
	ToRunbookEntityOwnerOutputWithContext(context.Context) RunbookEntityOwnerOutput
}

type RunbookEntityOwnerArgs struct {
	// Runbook owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Runbook owner type. Supported values are 'user' or 'squad'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RunbookEntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunbookEntityOwner)(nil)).Elem()
}

func (i RunbookEntityOwnerArgs) ToRunbookEntityOwnerOutput() RunbookEntityOwnerOutput {
	return i.ToRunbookEntityOwnerOutputWithContext(context.Background())
}

func (i RunbookEntityOwnerArgs) ToRunbookEntityOwnerOutputWithContext(ctx context.Context) RunbookEntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunbookEntityOwnerOutput)
}

func (i RunbookEntityOwnerArgs) ToRunbookEntityOwnerPtrOutput() RunbookEntityOwnerPtrOutput {
	return i.ToRunbookEntityOwnerPtrOutputWithContext(context.Background())
}

func (i RunbookEntityOwnerArgs) ToRunbookEntityOwnerPtrOutputWithContext(ctx context.Context) RunbookEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunbookEntityOwnerOutput).ToRunbookEntityOwnerPtrOutputWithContext(ctx)
}

// RunbookEntityOwnerPtrInput is an input type that accepts RunbookEntityOwnerArgs, RunbookEntityOwnerPtr and RunbookEntityOwnerPtrOutput values.
// You can construct a concrete instance of `RunbookEntityOwnerPtrInput` via:
//
//	        RunbookEntityOwnerArgs{...}
//
//	or:
//
//	        nil
type RunbookEntityOwnerPtrInput interface {
	pulumi.Input

	ToRunbookEntityOwnerPtrOutput() RunbookEntityOwnerPtrOutput
	ToRunbookEntityOwnerPtrOutputWithContext(context.Context) RunbookEntityOwnerPtrOutput
}

type runbookEntityOwnerPtrType RunbookEntityOwnerArgs

func RunbookEntityOwnerPtr(v *RunbookEntityOwnerArgs) RunbookEntityOwnerPtrInput {
	return (*runbookEntityOwnerPtrType)(v)
}

func (*runbookEntityOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RunbookEntityOwner)(nil)).Elem()
}

func (i *runbookEntityOwnerPtrType) ToRunbookEntityOwnerPtrOutput() RunbookEntityOwnerPtrOutput {
	return i.ToRunbookEntityOwnerPtrOutputWithContext(context.Background())
}

func (i *runbookEntityOwnerPtrType) ToRunbookEntityOwnerPtrOutputWithContext(ctx context.Context) RunbookEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunbookEntityOwnerPtrOutput)
}

type RunbookEntityOwnerOutput struct{ *pulumi.OutputState }

func (RunbookEntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunbookEntityOwner)(nil)).Elem()
}

func (o RunbookEntityOwnerOutput) ToRunbookEntityOwnerOutput() RunbookEntityOwnerOutput {
	return o
}

func (o RunbookEntityOwnerOutput) ToRunbookEntityOwnerOutputWithContext(ctx context.Context) RunbookEntityOwnerOutput {
	return o
}

func (o RunbookEntityOwnerOutput) ToRunbookEntityOwnerPtrOutput() RunbookEntityOwnerPtrOutput {
	return o.ToRunbookEntityOwnerPtrOutputWithContext(context.Background())
}

func (o RunbookEntityOwnerOutput) ToRunbookEntityOwnerPtrOutputWithContext(ctx context.Context) RunbookEntityOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RunbookEntityOwner) *RunbookEntityOwner {
		return &v
	}).(RunbookEntityOwnerPtrOutput)
}

// Runbook owner id.
func (o RunbookEntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RunbookEntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Runbook owner type. Supported values are 'user' or 'squad'.
func (o RunbookEntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RunbookEntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type RunbookEntityOwnerPtrOutput struct{ *pulumi.OutputState }

func (RunbookEntityOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RunbookEntityOwner)(nil)).Elem()
}

func (o RunbookEntityOwnerPtrOutput) ToRunbookEntityOwnerPtrOutput() RunbookEntityOwnerPtrOutput {
	return o
}

func (o RunbookEntityOwnerPtrOutput) ToRunbookEntityOwnerPtrOutputWithContext(ctx context.Context) RunbookEntityOwnerPtrOutput {
	return o
}

func (o RunbookEntityOwnerPtrOutput) Elem() RunbookEntityOwnerOutput {
	return o.ApplyT(func(v *RunbookEntityOwner) RunbookEntityOwner {
		if v != nil {
			return *v
		}
		var ret RunbookEntityOwner
		return ret
	}).(RunbookEntityOwnerOutput)
}

// Runbook owner id.
func (o RunbookEntityOwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunbookEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Runbook owner type. Supported values are 'user' or 'squad'.
func (o RunbookEntityOwnerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RunbookEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type RunbookStep struct {
	Content string `pulumi:"content"`
}

// RunbookStepInput is an input type that accepts RunbookStepArgs and RunbookStepOutput values.
// You can construct a concrete instance of `RunbookStepInput` via:
//
//	RunbookStepArgs{...}
type RunbookStepInput interface {
	pulumi.Input

	ToRunbookStepOutput() RunbookStepOutput
	ToRunbookStepOutputWithContext(context.Context) RunbookStepOutput
}

type RunbookStepArgs struct {
	Content pulumi.StringInput `pulumi:"content"`
}

func (RunbookStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RunbookStep)(nil)).Elem()
}

func (i RunbookStepArgs) ToRunbookStepOutput() RunbookStepOutput {
	return i.ToRunbookStepOutputWithContext(context.Background())
}

func (i RunbookStepArgs) ToRunbookStepOutputWithContext(ctx context.Context) RunbookStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunbookStepOutput)
}

// RunbookStepArrayInput is an input type that accepts RunbookStepArray and RunbookStepArrayOutput values.
// You can construct a concrete instance of `RunbookStepArrayInput` via:
//
//	RunbookStepArray{ RunbookStepArgs{...} }
type RunbookStepArrayInput interface {
	pulumi.Input

	ToRunbookStepArrayOutput() RunbookStepArrayOutput
	ToRunbookStepArrayOutputWithContext(context.Context) RunbookStepArrayOutput
}

type RunbookStepArray []RunbookStepInput

func (RunbookStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RunbookStep)(nil)).Elem()
}

func (i RunbookStepArray) ToRunbookStepArrayOutput() RunbookStepArrayOutput {
	return i.ToRunbookStepArrayOutputWithContext(context.Background())
}

func (i RunbookStepArray) ToRunbookStepArrayOutputWithContext(ctx context.Context) RunbookStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RunbookStepArrayOutput)
}

type RunbookStepOutput struct{ *pulumi.OutputState }

func (RunbookStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RunbookStep)(nil)).Elem()
}

func (o RunbookStepOutput) ToRunbookStepOutput() RunbookStepOutput {
	return o
}

func (o RunbookStepOutput) ToRunbookStepOutputWithContext(ctx context.Context) RunbookStepOutput {
	return o
}

func (o RunbookStepOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v RunbookStep) string { return v.Content }).(pulumi.StringOutput)
}

type RunbookStepArrayOutput struct{ *pulumi.OutputState }

func (RunbookStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RunbookStep)(nil)).Elem()
}

func (o RunbookStepArrayOutput) ToRunbookStepArrayOutput() RunbookStepArrayOutput {
	return o
}

func (o RunbookStepArrayOutput) ToRunbookStepArrayOutputWithContext(ctx context.Context) RunbookStepArrayOutput {
	return o
}

func (o RunbookStepArrayOutput) Index(i pulumi.IntInput) RunbookStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RunbookStep {
		return vs[0].([]RunbookStep)[vs[1].(int)]
	}).(RunbookStepOutput)
}

type ServiceMaintainer struct {
	// The id of the maintainer.
	Id string `pulumi:"id"`
	// The type of the maintainer. Supported values are 'user' or 'squad'.
	Type string `pulumi:"type"`
}

// ServiceMaintainerInput is an input type that accepts ServiceMaintainerArgs and ServiceMaintainerOutput values.
// You can construct a concrete instance of `ServiceMaintainerInput` via:
//
//	ServiceMaintainerArgs{...}
type ServiceMaintainerInput interface {
	pulumi.Input

	ToServiceMaintainerOutput() ServiceMaintainerOutput
	ToServiceMaintainerOutputWithContext(context.Context) ServiceMaintainerOutput
}

type ServiceMaintainerArgs struct {
	// The id of the maintainer.
	Id pulumi.StringInput `pulumi:"id"`
	// The type of the maintainer. Supported values are 'user' or 'squad'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceMaintainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMaintainer)(nil)).Elem()
}

func (i ServiceMaintainerArgs) ToServiceMaintainerOutput() ServiceMaintainerOutput {
	return i.ToServiceMaintainerOutputWithContext(context.Background())
}

func (i ServiceMaintainerArgs) ToServiceMaintainerOutputWithContext(ctx context.Context) ServiceMaintainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMaintainerOutput)
}

func (i ServiceMaintainerArgs) ToServiceMaintainerPtrOutput() ServiceMaintainerPtrOutput {
	return i.ToServiceMaintainerPtrOutputWithContext(context.Background())
}

func (i ServiceMaintainerArgs) ToServiceMaintainerPtrOutputWithContext(ctx context.Context) ServiceMaintainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMaintainerOutput).ToServiceMaintainerPtrOutputWithContext(ctx)
}

// ServiceMaintainerPtrInput is an input type that accepts ServiceMaintainerArgs, ServiceMaintainerPtr and ServiceMaintainerPtrOutput values.
// You can construct a concrete instance of `ServiceMaintainerPtrInput` via:
//
//	        ServiceMaintainerArgs{...}
//
//	or:
//
//	        nil
type ServiceMaintainerPtrInput interface {
	pulumi.Input

	ToServiceMaintainerPtrOutput() ServiceMaintainerPtrOutput
	ToServiceMaintainerPtrOutputWithContext(context.Context) ServiceMaintainerPtrOutput
}

type serviceMaintainerPtrType ServiceMaintainerArgs

func ServiceMaintainerPtr(v *ServiceMaintainerArgs) ServiceMaintainerPtrInput {
	return (*serviceMaintainerPtrType)(v)
}

func (*serviceMaintainerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMaintainer)(nil)).Elem()
}

func (i *serviceMaintainerPtrType) ToServiceMaintainerPtrOutput() ServiceMaintainerPtrOutput {
	return i.ToServiceMaintainerPtrOutputWithContext(context.Background())
}

func (i *serviceMaintainerPtrType) ToServiceMaintainerPtrOutputWithContext(ctx context.Context) ServiceMaintainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMaintainerPtrOutput)
}

type ServiceMaintainerOutput struct{ *pulumi.OutputState }

func (ServiceMaintainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMaintainer)(nil)).Elem()
}

func (o ServiceMaintainerOutput) ToServiceMaintainerOutput() ServiceMaintainerOutput {
	return o
}

func (o ServiceMaintainerOutput) ToServiceMaintainerOutputWithContext(ctx context.Context) ServiceMaintainerOutput {
	return o
}

func (o ServiceMaintainerOutput) ToServiceMaintainerPtrOutput() ServiceMaintainerPtrOutput {
	return o.ToServiceMaintainerPtrOutputWithContext(context.Background())
}

func (o ServiceMaintainerOutput) ToServiceMaintainerPtrOutputWithContext(ctx context.Context) ServiceMaintainerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceMaintainer) *ServiceMaintainer {
		return &v
	}).(ServiceMaintainerPtrOutput)
}

// The id of the maintainer.
func (o ServiceMaintainerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMaintainer) string { return v.Id }).(pulumi.StringOutput)
}

// The type of the maintainer. Supported values are 'user' or 'squad'.
func (o ServiceMaintainerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMaintainer) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceMaintainerPtrOutput struct{ *pulumi.OutputState }

func (ServiceMaintainerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMaintainer)(nil)).Elem()
}

func (o ServiceMaintainerPtrOutput) ToServiceMaintainerPtrOutput() ServiceMaintainerPtrOutput {
	return o
}

func (o ServiceMaintainerPtrOutput) ToServiceMaintainerPtrOutputWithContext(ctx context.Context) ServiceMaintainerPtrOutput {
	return o
}

func (o ServiceMaintainerPtrOutput) Elem() ServiceMaintainerOutput {
	return o.ApplyT(func(v *ServiceMaintainer) ServiceMaintainer {
		if v != nil {
			return *v
		}
		var ret ServiceMaintainer
		return ret
	}).(ServiceMaintainerOutput)
}

// The id of the maintainer.
func (o ServiceMaintainerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceMaintainer) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// The type of the maintainer. Supported values are 'user' or 'squad'.
func (o ServiceMaintainerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceMaintainer) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type ServiceTag struct {
	// key
	Key string `pulumi:"key"`
	// value
	Value string `pulumi:"value"`
}

// ServiceTagInput is an input type that accepts ServiceTagArgs and ServiceTagOutput values.
// You can construct a concrete instance of `ServiceTagInput` via:
//
//	ServiceTagArgs{...}
type ServiceTagInput interface {
	pulumi.Input

	ToServiceTagOutput() ServiceTagOutput
	ToServiceTagOutputWithContext(context.Context) ServiceTagOutput
}

type ServiceTagArgs struct {
	// key
	Key pulumi.StringInput `pulumi:"key"`
	// value
	Value pulumi.StringInput `pulumi:"value"`
}

func (ServiceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTag)(nil)).Elem()
}

func (i ServiceTagArgs) ToServiceTagOutput() ServiceTagOutput {
	return i.ToServiceTagOutputWithContext(context.Background())
}

func (i ServiceTagArgs) ToServiceTagOutputWithContext(ctx context.Context) ServiceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagOutput)
}

// ServiceTagArrayInput is an input type that accepts ServiceTagArray and ServiceTagArrayOutput values.
// You can construct a concrete instance of `ServiceTagArrayInput` via:
//
//	ServiceTagArray{ ServiceTagArgs{...} }
type ServiceTagArrayInput interface {
	pulumi.Input

	ToServiceTagArrayOutput() ServiceTagArrayOutput
	ToServiceTagArrayOutputWithContext(context.Context) ServiceTagArrayOutput
}

type ServiceTagArray []ServiceTagInput

func (ServiceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTag)(nil)).Elem()
}

func (i ServiceTagArray) ToServiceTagArrayOutput() ServiceTagArrayOutput {
	return i.ToServiceTagArrayOutputWithContext(context.Background())
}

func (i ServiceTagArray) ToServiceTagArrayOutputWithContext(ctx context.Context) ServiceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTagArrayOutput)
}

type ServiceTagOutput struct{ *pulumi.OutputState }

func (ServiceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTag)(nil)).Elem()
}

func (o ServiceTagOutput) ToServiceTagOutput() ServiceTagOutput {
	return o
}

func (o ServiceTagOutput) ToServiceTagOutputWithContext(ctx context.Context) ServiceTagOutput {
	return o
}

// key
func (o ServiceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTag) string { return v.Key }).(pulumi.StringOutput)
}

// value
func (o ServiceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTag) string { return v.Value }).(pulumi.StringOutput)
}

type ServiceTagArrayOutput struct{ *pulumi.OutputState }

func (ServiceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTag)(nil)).Elem()
}

func (o ServiceTagArrayOutput) ToServiceTagArrayOutput() ServiceTagArrayOutput {
	return o
}

func (o ServiceTagArrayOutput) ToServiceTagArrayOutputWithContext(ctx context.Context) ServiceTagArrayOutput {
	return o
}

func (o ServiceTagArrayOutput) Index(i pulumi.IntInput) ServiceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTag {
		return vs[0].([]ServiceTag)[vs[1].(int)]
	}).(ServiceTagOutput)
}

type SloEntityOwner struct {
	// SLO owner id.
	Id string `pulumi:"id"`
	// SLO owner type. Supported values are 'user' or 'squad'.
	Type string `pulumi:"type"`
}

// SloEntityOwnerInput is an input type that accepts SloEntityOwnerArgs and SloEntityOwnerOutput values.
// You can construct a concrete instance of `SloEntityOwnerInput` via:
//
//	SloEntityOwnerArgs{...}
type SloEntityOwnerInput interface {
	pulumi.Input

	ToSloEntityOwnerOutput() SloEntityOwnerOutput
	ToSloEntityOwnerOutputWithContext(context.Context) SloEntityOwnerOutput
}

type SloEntityOwnerArgs struct {
	// SLO owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// SLO owner type. Supported values are 'user' or 'squad'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (SloEntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloEntityOwner)(nil)).Elem()
}

func (i SloEntityOwnerArgs) ToSloEntityOwnerOutput() SloEntityOwnerOutput {
	return i.ToSloEntityOwnerOutputWithContext(context.Background())
}

func (i SloEntityOwnerArgs) ToSloEntityOwnerOutputWithContext(ctx context.Context) SloEntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloEntityOwnerOutput)
}

func (i SloEntityOwnerArgs) ToSloEntityOwnerPtrOutput() SloEntityOwnerPtrOutput {
	return i.ToSloEntityOwnerPtrOutputWithContext(context.Background())
}

func (i SloEntityOwnerArgs) ToSloEntityOwnerPtrOutputWithContext(ctx context.Context) SloEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloEntityOwnerOutput).ToSloEntityOwnerPtrOutputWithContext(ctx)
}

// SloEntityOwnerPtrInput is an input type that accepts SloEntityOwnerArgs, SloEntityOwnerPtr and SloEntityOwnerPtrOutput values.
// You can construct a concrete instance of `SloEntityOwnerPtrInput` via:
//
//	        SloEntityOwnerArgs{...}
//
//	or:
//
//	        nil
type SloEntityOwnerPtrInput interface {
	pulumi.Input

	ToSloEntityOwnerPtrOutput() SloEntityOwnerPtrOutput
	ToSloEntityOwnerPtrOutputWithContext(context.Context) SloEntityOwnerPtrOutput
}

type sloEntityOwnerPtrType SloEntityOwnerArgs

func SloEntityOwnerPtr(v *SloEntityOwnerArgs) SloEntityOwnerPtrInput {
	return (*sloEntityOwnerPtrType)(v)
}

func (*sloEntityOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SloEntityOwner)(nil)).Elem()
}

func (i *sloEntityOwnerPtrType) ToSloEntityOwnerPtrOutput() SloEntityOwnerPtrOutput {
	return i.ToSloEntityOwnerPtrOutputWithContext(context.Background())
}

func (i *sloEntityOwnerPtrType) ToSloEntityOwnerPtrOutputWithContext(ctx context.Context) SloEntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloEntityOwnerPtrOutput)
}

type SloEntityOwnerOutput struct{ *pulumi.OutputState }

func (SloEntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloEntityOwner)(nil)).Elem()
}

func (o SloEntityOwnerOutput) ToSloEntityOwnerOutput() SloEntityOwnerOutput {
	return o
}

func (o SloEntityOwnerOutput) ToSloEntityOwnerOutputWithContext(ctx context.Context) SloEntityOwnerOutput {
	return o
}

func (o SloEntityOwnerOutput) ToSloEntityOwnerPtrOutput() SloEntityOwnerPtrOutput {
	return o.ToSloEntityOwnerPtrOutputWithContext(context.Background())
}

func (o SloEntityOwnerOutput) ToSloEntityOwnerPtrOutputWithContext(ctx context.Context) SloEntityOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SloEntityOwner) *SloEntityOwner {
		return &v
	}).(SloEntityOwnerPtrOutput)
}

// SLO owner id.
func (o SloEntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SloEntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// SLO owner type. Supported values are 'user' or 'squad'.
func (o SloEntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SloEntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type SloEntityOwnerPtrOutput struct{ *pulumi.OutputState }

func (SloEntityOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SloEntityOwner)(nil)).Elem()
}

func (o SloEntityOwnerPtrOutput) ToSloEntityOwnerPtrOutput() SloEntityOwnerPtrOutput {
	return o
}

func (o SloEntityOwnerPtrOutput) ToSloEntityOwnerPtrOutputWithContext(ctx context.Context) SloEntityOwnerPtrOutput {
	return o
}

func (o SloEntityOwnerPtrOutput) Elem() SloEntityOwnerOutput {
	return o.ApplyT(func(v *SloEntityOwner) SloEntityOwner {
		if v != nil {
			return *v
		}
		var ret SloEntityOwner
		return ret
	}).(SloEntityOwnerOutput)
}

// SLO owner id.
func (o SloEntityOwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// SLO owner type. Supported values are 'user' or 'squad'.
func (o SloEntityOwnerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloEntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type SloNotify struct {
	// The ID of the notification rule
	Id *int `pulumi:"id"`
	// The ID of the service in which the user want to create an incident
	ServiceId *string `pulumi:"serviceId"`
	// The ID of the SLO.
	SloId *int `pulumi:"sloId"`
	// List of Squad ID's who should be alerted via email.
	SquadIds []string `pulumi:"squadIds"`
	// List of user ID's who should be alerted via email.
	UserIds []string `pulumi:"userIds"`
}

// SloNotifyInput is an input type that accepts SloNotifyArgs and SloNotifyOutput values.
// You can construct a concrete instance of `SloNotifyInput` via:
//
//	SloNotifyArgs{...}
type SloNotifyInput interface {
	pulumi.Input

	ToSloNotifyOutput() SloNotifyOutput
	ToSloNotifyOutputWithContext(context.Context) SloNotifyOutput
}

type SloNotifyArgs struct {
	// The ID of the notification rule
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The ID of the service in which the user want to create an incident
	ServiceId pulumi.StringPtrInput `pulumi:"serviceId"`
	// The ID of the SLO.
	SloId pulumi.IntPtrInput `pulumi:"sloId"`
	// List of Squad ID's who should be alerted via email.
	SquadIds pulumi.StringArrayInput `pulumi:"squadIds"`
	// List of user ID's who should be alerted via email.
	UserIds pulumi.StringArrayInput `pulumi:"userIds"`
}

func (SloNotifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloNotify)(nil)).Elem()
}

func (i SloNotifyArgs) ToSloNotifyOutput() SloNotifyOutput {
	return i.ToSloNotifyOutputWithContext(context.Background())
}

func (i SloNotifyArgs) ToSloNotifyOutputWithContext(ctx context.Context) SloNotifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloNotifyOutput)
}

func (i SloNotifyArgs) ToSloNotifyPtrOutput() SloNotifyPtrOutput {
	return i.ToSloNotifyPtrOutputWithContext(context.Background())
}

func (i SloNotifyArgs) ToSloNotifyPtrOutputWithContext(ctx context.Context) SloNotifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloNotifyOutput).ToSloNotifyPtrOutputWithContext(ctx)
}

// SloNotifyPtrInput is an input type that accepts SloNotifyArgs, SloNotifyPtr and SloNotifyPtrOutput values.
// You can construct a concrete instance of `SloNotifyPtrInput` via:
//
//	        SloNotifyArgs{...}
//
//	or:
//
//	        nil
type SloNotifyPtrInput interface {
	pulumi.Input

	ToSloNotifyPtrOutput() SloNotifyPtrOutput
	ToSloNotifyPtrOutputWithContext(context.Context) SloNotifyPtrOutput
}

type sloNotifyPtrType SloNotifyArgs

func SloNotifyPtr(v *SloNotifyArgs) SloNotifyPtrInput {
	return (*sloNotifyPtrType)(v)
}

func (*sloNotifyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SloNotify)(nil)).Elem()
}

func (i *sloNotifyPtrType) ToSloNotifyPtrOutput() SloNotifyPtrOutput {
	return i.ToSloNotifyPtrOutputWithContext(context.Background())
}

func (i *sloNotifyPtrType) ToSloNotifyPtrOutputWithContext(ctx context.Context) SloNotifyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloNotifyPtrOutput)
}

type SloNotifyOutput struct{ *pulumi.OutputState }

func (SloNotifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloNotify)(nil)).Elem()
}

func (o SloNotifyOutput) ToSloNotifyOutput() SloNotifyOutput {
	return o
}

func (o SloNotifyOutput) ToSloNotifyOutputWithContext(ctx context.Context) SloNotifyOutput {
	return o
}

func (o SloNotifyOutput) ToSloNotifyPtrOutput() SloNotifyPtrOutput {
	return o.ToSloNotifyPtrOutputWithContext(context.Background())
}

func (o SloNotifyOutput) ToSloNotifyPtrOutputWithContext(ctx context.Context) SloNotifyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SloNotify) *SloNotify {
		return &v
	}).(SloNotifyPtrOutput)
}

// The ID of the notification rule
func (o SloNotifyOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SloNotify) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// The ID of the service in which the user want to create an incident
func (o SloNotifyOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SloNotify) *string { return v.ServiceId }).(pulumi.StringPtrOutput)
}

// The ID of the SLO.
func (o SloNotifyOutput) SloId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SloNotify) *int { return v.SloId }).(pulumi.IntPtrOutput)
}

// List of Squad ID's who should be alerted via email.
func (o SloNotifyOutput) SquadIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SloNotify) []string { return v.SquadIds }).(pulumi.StringArrayOutput)
}

// List of user ID's who should be alerted via email.
func (o SloNotifyOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SloNotify) []string { return v.UserIds }).(pulumi.StringArrayOutput)
}

type SloNotifyPtrOutput struct{ *pulumi.OutputState }

func (SloNotifyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SloNotify)(nil)).Elem()
}

func (o SloNotifyPtrOutput) ToSloNotifyPtrOutput() SloNotifyPtrOutput {
	return o
}

func (o SloNotifyPtrOutput) ToSloNotifyPtrOutputWithContext(ctx context.Context) SloNotifyPtrOutput {
	return o
}

func (o SloNotifyPtrOutput) Elem() SloNotifyOutput {
	return o.ApplyT(func(v *SloNotify) SloNotify {
		if v != nil {
			return *v
		}
		var ret SloNotify
		return ret
	}).(SloNotifyOutput)
}

// The ID of the notification rule
func (o SloNotifyPtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SloNotify) *int {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.IntPtrOutput)
}

// The ID of the service in which the user want to create an incident
func (o SloNotifyPtrOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SloNotify) *string {
		if v == nil {
			return nil
		}
		return v.ServiceId
	}).(pulumi.StringPtrOutput)
}

// The ID of the SLO.
func (o SloNotifyPtrOutput) SloId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SloNotify) *int {
		if v == nil {
			return nil
		}
		return v.SloId
	}).(pulumi.IntPtrOutput)
}

// List of Squad ID's who should be alerted via email.
func (o SloNotifyPtrOutput) SquadIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SloNotify) []string {
		if v == nil {
			return nil
		}
		return v.SquadIds
	}).(pulumi.StringArrayOutput)
}

// List of user ID's who should be alerted via email.
func (o SloNotifyPtrOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SloNotify) []string {
		if v == nil {
			return nil
		}
		return v.UserIds
	}).(pulumi.StringArrayOutput)
}

type SloRule struct {
	// The ID of the monitoring rule
	Id *int `pulumi:"id"`
	// Is checked?
	IsChecked *bool `pulumi:"isChecked"`
	// The name of monitoring check."Supported values are "breached*error*budget", "unhealthy*slo","increased*false*positives", "remaining*error_budget"
	Name string `pulumi:"name"`
	// The ID of the SLO
	SloId *int `pulumi:"sloId"`
	// Threshold for the monitoring checkOnly supported for rules name "increased*false*positives" and "remaining*error*budget"
	Threshold *int `pulumi:"threshold"`
}

// SloRuleInput is an input type that accepts SloRuleArgs and SloRuleOutput values.
// You can construct a concrete instance of `SloRuleInput` via:
//
//	SloRuleArgs{...}
type SloRuleInput interface {
	pulumi.Input

	ToSloRuleOutput() SloRuleOutput
	ToSloRuleOutputWithContext(context.Context) SloRuleOutput
}

type SloRuleArgs struct {
	// The ID of the monitoring rule
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Is checked?
	IsChecked pulumi.BoolPtrInput `pulumi:"isChecked"`
	// The name of monitoring check."Supported values are "breached*error*budget", "unhealthy*slo","increased*false*positives", "remaining*error_budget"
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the SLO
	SloId pulumi.IntPtrInput `pulumi:"sloId"`
	// Threshold for the monitoring checkOnly supported for rules name "increased*false*positives" and "remaining*error*budget"
	Threshold pulumi.IntPtrInput `pulumi:"threshold"`
}

func (SloRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SloRule)(nil)).Elem()
}

func (i SloRuleArgs) ToSloRuleOutput() SloRuleOutput {
	return i.ToSloRuleOutputWithContext(context.Background())
}

func (i SloRuleArgs) ToSloRuleOutputWithContext(ctx context.Context) SloRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloRuleOutput)
}

// SloRuleArrayInput is an input type that accepts SloRuleArray and SloRuleArrayOutput values.
// You can construct a concrete instance of `SloRuleArrayInput` via:
//
//	SloRuleArray{ SloRuleArgs{...} }
type SloRuleArrayInput interface {
	pulumi.Input

	ToSloRuleArrayOutput() SloRuleArrayOutput
	ToSloRuleArrayOutputWithContext(context.Context) SloRuleArrayOutput
}

type SloRuleArray []SloRuleInput

func (SloRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloRule)(nil)).Elem()
}

func (i SloRuleArray) ToSloRuleArrayOutput() SloRuleArrayOutput {
	return i.ToSloRuleArrayOutputWithContext(context.Background())
}

func (i SloRuleArray) ToSloRuleArrayOutputWithContext(ctx context.Context) SloRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloRuleArrayOutput)
}

type SloRuleOutput struct{ *pulumi.OutputState }

func (SloRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloRule)(nil)).Elem()
}

func (o SloRuleOutput) ToSloRuleOutput() SloRuleOutput {
	return o
}

func (o SloRuleOutput) ToSloRuleOutputWithContext(ctx context.Context) SloRuleOutput {
	return o
}

// The ID of the monitoring rule
func (o SloRuleOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SloRule) *int { return v.Id }).(pulumi.IntPtrOutput)
}

// Is checked?
func (o SloRuleOutput) IsChecked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SloRule) *bool { return v.IsChecked }).(pulumi.BoolPtrOutput)
}

// The name of monitoring check."Supported values are "breached*error*budget", "unhealthy*slo","increased*false*positives", "remaining*error_budget"
func (o SloRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SloRule) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the SLO
func (o SloRuleOutput) SloId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SloRule) *int { return v.SloId }).(pulumi.IntPtrOutput)
}

// Threshold for the monitoring checkOnly supported for rules name "increased*false*positives" and "remaining*error*budget"
func (o SloRuleOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SloRule) *int { return v.Threshold }).(pulumi.IntPtrOutput)
}

type SloRuleArrayOutput struct{ *pulumi.OutputState }

func (SloRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloRule)(nil)).Elem()
}

func (o SloRuleArrayOutput) ToSloRuleArrayOutput() SloRuleArrayOutput {
	return o
}

func (o SloRuleArrayOutput) ToSloRuleArrayOutputWithContext(ctx context.Context) SloRuleArrayOutput {
	return o
}

func (o SloRuleArrayOutput) Index(i pulumi.IntInput) SloRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SloRule {
		return vs[0].([]SloRule)[vs[1].(int)]
	}).(SloRuleOutput)
}

type WebformInputField struct {
	// Input field Label.
	Label *string `pulumi:"label"`
	// Input field options.
	Options []string `pulumi:"options"`
}

// WebformInputFieldInput is an input type that accepts WebformInputFieldArgs and WebformInputFieldOutput values.
// You can construct a concrete instance of `WebformInputFieldInput` via:
//
//	WebformInputFieldArgs{...}
type WebformInputFieldInput interface {
	pulumi.Input

	ToWebformInputFieldOutput() WebformInputFieldOutput
	ToWebformInputFieldOutputWithContext(context.Context) WebformInputFieldOutput
}

type WebformInputFieldArgs struct {
	// Input field Label.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// Input field options.
	Options pulumi.StringArrayInput `pulumi:"options"`
}

func (WebformInputFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebformInputField)(nil)).Elem()
}

func (i WebformInputFieldArgs) ToWebformInputFieldOutput() WebformInputFieldOutput {
	return i.ToWebformInputFieldOutputWithContext(context.Background())
}

func (i WebformInputFieldArgs) ToWebformInputFieldOutputWithContext(ctx context.Context) WebformInputFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebformInputFieldOutput)
}

// WebformInputFieldArrayInput is an input type that accepts WebformInputFieldArray and WebformInputFieldArrayOutput values.
// You can construct a concrete instance of `WebformInputFieldArrayInput` via:
//
//	WebformInputFieldArray{ WebformInputFieldArgs{...} }
type WebformInputFieldArrayInput interface {
	pulumi.Input

	ToWebformInputFieldArrayOutput() WebformInputFieldArrayOutput
	ToWebformInputFieldArrayOutputWithContext(context.Context) WebformInputFieldArrayOutput
}

type WebformInputFieldArray []WebformInputFieldInput

func (WebformInputFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebformInputField)(nil)).Elem()
}

func (i WebformInputFieldArray) ToWebformInputFieldArrayOutput() WebformInputFieldArrayOutput {
	return i.ToWebformInputFieldArrayOutputWithContext(context.Background())
}

func (i WebformInputFieldArray) ToWebformInputFieldArrayOutputWithContext(ctx context.Context) WebformInputFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebformInputFieldArrayOutput)
}

type WebformInputFieldOutput struct{ *pulumi.OutputState }

func (WebformInputFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebformInputField)(nil)).Elem()
}

func (o WebformInputFieldOutput) ToWebformInputFieldOutput() WebformInputFieldOutput {
	return o
}

func (o WebformInputFieldOutput) ToWebformInputFieldOutputWithContext(ctx context.Context) WebformInputFieldOutput {
	return o
}

// Input field Label.
func (o WebformInputFieldOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebformInputField) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// Input field options.
func (o WebformInputFieldOutput) Options() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WebformInputField) []string { return v.Options }).(pulumi.StringArrayOutput)
}

type WebformInputFieldArrayOutput struct{ *pulumi.OutputState }

func (WebformInputFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebformInputField)(nil)).Elem()
}

func (o WebformInputFieldArrayOutput) ToWebformInputFieldArrayOutput() WebformInputFieldArrayOutput {
	return o
}

func (o WebformInputFieldArrayOutput) ToWebformInputFieldArrayOutputWithContext(ctx context.Context) WebformInputFieldArrayOutput {
	return o
}

func (o WebformInputFieldArrayOutput) Index(i pulumi.IntInput) WebformInputFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebformInputField {
		return vs[0].([]WebformInputField)[vs[1].(int)]
	}).(WebformInputFieldOutput)
}

type WebformOwner struct {
	// Form owner id.
	Id string `pulumi:"id"`
	// Form owner name.
	Name *string `pulumi:"name"`
	// Form owner type Supported values are 'user' or 'squad'.
	Type string `pulumi:"type"`
}

// WebformOwnerInput is an input type that accepts WebformOwnerArgs and WebformOwnerOutput values.
// You can construct a concrete instance of `WebformOwnerInput` via:
//
//	WebformOwnerArgs{...}
type WebformOwnerInput interface {
	pulumi.Input

	ToWebformOwnerOutput() WebformOwnerOutput
	ToWebformOwnerOutputWithContext(context.Context) WebformOwnerOutput
}

type WebformOwnerArgs struct {
	// Form owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Form owner name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Form owner type Supported values are 'user' or 'squad'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebformOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebformOwner)(nil)).Elem()
}

func (i WebformOwnerArgs) ToWebformOwnerOutput() WebformOwnerOutput {
	return i.ToWebformOwnerOutputWithContext(context.Background())
}

func (i WebformOwnerArgs) ToWebformOwnerOutputWithContext(ctx context.Context) WebformOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebformOwnerOutput)
}

func (i WebformOwnerArgs) ToWebformOwnerPtrOutput() WebformOwnerPtrOutput {
	return i.ToWebformOwnerPtrOutputWithContext(context.Background())
}

func (i WebformOwnerArgs) ToWebformOwnerPtrOutputWithContext(ctx context.Context) WebformOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebformOwnerOutput).ToWebformOwnerPtrOutputWithContext(ctx)
}

// WebformOwnerPtrInput is an input type that accepts WebformOwnerArgs, WebformOwnerPtr and WebformOwnerPtrOutput values.
// You can construct a concrete instance of `WebformOwnerPtrInput` via:
//
//	        WebformOwnerArgs{...}
//
//	or:
//
//	        nil
type WebformOwnerPtrInput interface {
	pulumi.Input

	ToWebformOwnerPtrOutput() WebformOwnerPtrOutput
	ToWebformOwnerPtrOutputWithContext(context.Context) WebformOwnerPtrOutput
}

type webformOwnerPtrType WebformOwnerArgs

func WebformOwnerPtr(v *WebformOwnerArgs) WebformOwnerPtrInput {
	return (*webformOwnerPtrType)(v)
}

func (*webformOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebformOwner)(nil)).Elem()
}

func (i *webformOwnerPtrType) ToWebformOwnerPtrOutput() WebformOwnerPtrOutput {
	return i.ToWebformOwnerPtrOutputWithContext(context.Background())
}

func (i *webformOwnerPtrType) ToWebformOwnerPtrOutputWithContext(ctx context.Context) WebformOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebformOwnerPtrOutput)
}

type WebformOwnerOutput struct{ *pulumi.OutputState }

func (WebformOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebformOwner)(nil)).Elem()
}

func (o WebformOwnerOutput) ToWebformOwnerOutput() WebformOwnerOutput {
	return o
}

func (o WebformOwnerOutput) ToWebformOwnerOutputWithContext(ctx context.Context) WebformOwnerOutput {
	return o
}

func (o WebformOwnerOutput) ToWebformOwnerPtrOutput() WebformOwnerPtrOutput {
	return o.ToWebformOwnerPtrOutputWithContext(context.Background())
}

func (o WebformOwnerOutput) ToWebformOwnerPtrOutputWithContext(ctx context.Context) WebformOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebformOwner) *WebformOwner {
		return &v
	}).(WebformOwnerPtrOutput)
}

// Form owner id.
func (o WebformOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v WebformOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Form owner name.
func (o WebformOwnerOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebformOwner) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Form owner type Supported values are 'user' or 'squad'.
func (o WebformOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebformOwner) string { return v.Type }).(pulumi.StringOutput)
}

type WebformOwnerPtrOutput struct{ *pulumi.OutputState }

func (WebformOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebformOwner)(nil)).Elem()
}

func (o WebformOwnerPtrOutput) ToWebformOwnerPtrOutput() WebformOwnerPtrOutput {
	return o
}

func (o WebformOwnerPtrOutput) ToWebformOwnerPtrOutputWithContext(ctx context.Context) WebformOwnerPtrOutput {
	return o
}

func (o WebformOwnerPtrOutput) Elem() WebformOwnerOutput {
	return o.ApplyT(func(v *WebformOwner) WebformOwner {
		if v != nil {
			return *v
		}
		var ret WebformOwner
		return ret
	}).(WebformOwnerOutput)
}

// Form owner id.
func (o WebformOwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebformOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Form owner name.
func (o WebformOwnerPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebformOwner) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Form owner type Supported values are 'user' or 'squad'.
func (o WebformOwnerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebformOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type WebformService struct {
	// Service alias.
	Alias *string `pulumi:"alias"`
	// Service name.
	Name *string `pulumi:"name"`
	// Service ID.
	ServiceId string `pulumi:"serviceId"`
}

// WebformServiceInput is an input type that accepts WebformServiceArgs and WebformServiceOutput values.
// You can construct a concrete instance of `WebformServiceInput` via:
//
//	WebformServiceArgs{...}
type WebformServiceInput interface {
	pulumi.Input

	ToWebformServiceOutput() WebformServiceOutput
	ToWebformServiceOutputWithContext(context.Context) WebformServiceOutput
}

type WebformServiceArgs struct {
	// Service alias.
	Alias pulumi.StringPtrInput `pulumi:"alias"`
	// Service name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Service ID.
	ServiceId pulumi.StringInput `pulumi:"serviceId"`
}

func (WebformServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebformService)(nil)).Elem()
}

func (i WebformServiceArgs) ToWebformServiceOutput() WebformServiceOutput {
	return i.ToWebformServiceOutputWithContext(context.Background())
}

func (i WebformServiceArgs) ToWebformServiceOutputWithContext(ctx context.Context) WebformServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebformServiceOutput)
}

// WebformServiceArrayInput is an input type that accepts WebformServiceArray and WebformServiceArrayOutput values.
// You can construct a concrete instance of `WebformServiceArrayInput` via:
//
//	WebformServiceArray{ WebformServiceArgs{...} }
type WebformServiceArrayInput interface {
	pulumi.Input

	ToWebformServiceArrayOutput() WebformServiceArrayOutput
	ToWebformServiceArrayOutputWithContext(context.Context) WebformServiceArrayOutput
}

type WebformServiceArray []WebformServiceInput

func (WebformServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebformService)(nil)).Elem()
}

func (i WebformServiceArray) ToWebformServiceArrayOutput() WebformServiceArrayOutput {
	return i.ToWebformServiceArrayOutputWithContext(context.Background())
}

func (i WebformServiceArray) ToWebformServiceArrayOutputWithContext(ctx context.Context) WebformServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebformServiceArrayOutput)
}

type WebformServiceOutput struct{ *pulumi.OutputState }

func (WebformServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebformService)(nil)).Elem()
}

func (o WebformServiceOutput) ToWebformServiceOutput() WebformServiceOutput {
	return o
}

func (o WebformServiceOutput) ToWebformServiceOutputWithContext(ctx context.Context) WebformServiceOutput {
	return o
}

// Service alias.
func (o WebformServiceOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebformService) *string { return v.Alias }).(pulumi.StringPtrOutput)
}

// Service name.
func (o WebformServiceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebformService) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Service ID.
func (o WebformServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v WebformService) string { return v.ServiceId }).(pulumi.StringOutput)
}

type WebformServiceArrayOutput struct{ *pulumi.OutputState }

func (WebformServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebformService)(nil)).Elem()
}

func (o WebformServiceArrayOutput) ToWebformServiceArrayOutput() WebformServiceArrayOutput {
	return o
}

func (o WebformServiceArrayOutput) ToWebformServiceArrayOutputWithContext(ctx context.Context) WebformServiceArrayOutput {
	return o
}

func (o WebformServiceArrayOutput) Index(i pulumi.IntInput) WebformServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebformService {
		return vs[0].([]WebformService)[vs[1].(int)]
	}).(WebformServiceOutput)
}

type WebformSeverity struct {
	// Severity description.
	Description *string `pulumi:"description"`
	// Severity type.
	Type string `pulumi:"type"`
}

// WebformSeverityInput is an input type that accepts WebformSeverityArgs and WebformSeverityOutput values.
// You can construct a concrete instance of `WebformSeverityInput` via:
//
//	WebformSeverityArgs{...}
type WebformSeverityInput interface {
	pulumi.Input

	ToWebformSeverityOutput() WebformSeverityOutput
	ToWebformSeverityOutputWithContext(context.Context) WebformSeverityOutput
}

type WebformSeverityArgs struct {
	// Severity description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Severity type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (WebformSeverityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebformSeverity)(nil)).Elem()
}

func (i WebformSeverityArgs) ToWebformSeverityOutput() WebformSeverityOutput {
	return i.ToWebformSeverityOutputWithContext(context.Background())
}

func (i WebformSeverityArgs) ToWebformSeverityOutputWithContext(ctx context.Context) WebformSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebformSeverityOutput)
}

// WebformSeverityArrayInput is an input type that accepts WebformSeverityArray and WebformSeverityArrayOutput values.
// You can construct a concrete instance of `WebformSeverityArrayInput` via:
//
//	WebformSeverityArray{ WebformSeverityArgs{...} }
type WebformSeverityArrayInput interface {
	pulumi.Input

	ToWebformSeverityArrayOutput() WebformSeverityArrayOutput
	ToWebformSeverityArrayOutputWithContext(context.Context) WebformSeverityArrayOutput
}

type WebformSeverityArray []WebformSeverityInput

func (WebformSeverityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebformSeverity)(nil)).Elem()
}

func (i WebformSeverityArray) ToWebformSeverityArrayOutput() WebformSeverityArrayOutput {
	return i.ToWebformSeverityArrayOutputWithContext(context.Background())
}

func (i WebformSeverityArray) ToWebformSeverityArrayOutputWithContext(ctx context.Context) WebformSeverityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebformSeverityArrayOutput)
}

type WebformSeverityOutput struct{ *pulumi.OutputState }

func (WebformSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebformSeverity)(nil)).Elem()
}

func (o WebformSeverityOutput) ToWebformSeverityOutput() WebformSeverityOutput {
	return o
}

func (o WebformSeverityOutput) ToWebformSeverityOutputWithContext(ctx context.Context) WebformSeverityOutput {
	return o
}

// Severity description.
func (o WebformSeverityOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WebformSeverity) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Severity type.
func (o WebformSeverityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WebformSeverity) string { return v.Type }).(pulumi.StringOutput)
}

type WebformSeverityArrayOutput struct{ *pulumi.OutputState }

func (WebformSeverityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WebformSeverity)(nil)).Elem()
}

func (o WebformSeverityArrayOutput) ToWebformSeverityArrayOutput() WebformSeverityArrayOutput {
	return o
}

func (o WebformSeverityArrayOutput) ToWebformSeverityArrayOutputWithContext(ctx context.Context) WebformSeverityArrayOutput {
	return o
}

func (o WebformSeverityArrayOutput) Index(i pulumi.IntInput) WebformSeverityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WebformSeverity {
		return vs[0].([]WebformSeverity)[vs[1].(int)]
	}).(WebformSeverityOutput)
}

type WorkflowEntityOwner struct {
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Type string `pulumi:"type"`
}

// WorkflowEntityOwnerInput is an input type that accepts WorkflowEntityOwnerArgs and WorkflowEntityOwnerOutput values.
// You can construct a concrete instance of `WorkflowEntityOwnerInput` via:
//
//	WorkflowEntityOwnerArgs{...}
type WorkflowEntityOwnerInput interface {
	pulumi.Input

	ToWorkflowEntityOwnerOutput() WorkflowEntityOwnerOutput
	ToWorkflowEntityOwnerOutputWithContext(context.Context) WorkflowEntityOwnerOutput
}

type WorkflowEntityOwnerArgs struct {
	// The ID of this resource.
	Id   pulumi.StringInput `pulumi:"id"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (WorkflowEntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowEntityOwner)(nil)).Elem()
}

func (i WorkflowEntityOwnerArgs) ToWorkflowEntityOwnerOutput() WorkflowEntityOwnerOutput {
	return i.ToWorkflowEntityOwnerOutputWithContext(context.Background())
}

func (i WorkflowEntityOwnerArgs) ToWorkflowEntityOwnerOutputWithContext(ctx context.Context) WorkflowEntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowEntityOwnerOutput)
}

// WorkflowEntityOwnerArrayInput is an input type that accepts WorkflowEntityOwnerArray and WorkflowEntityOwnerArrayOutput values.
// You can construct a concrete instance of `WorkflowEntityOwnerArrayInput` via:
//
//	WorkflowEntityOwnerArray{ WorkflowEntityOwnerArgs{...} }
type WorkflowEntityOwnerArrayInput interface {
	pulumi.Input

	ToWorkflowEntityOwnerArrayOutput() WorkflowEntityOwnerArrayOutput
	ToWorkflowEntityOwnerArrayOutputWithContext(context.Context) WorkflowEntityOwnerArrayOutput
}

type WorkflowEntityOwnerArray []WorkflowEntityOwnerInput

func (WorkflowEntityOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkflowEntityOwner)(nil)).Elem()
}

func (i WorkflowEntityOwnerArray) ToWorkflowEntityOwnerArrayOutput() WorkflowEntityOwnerArrayOutput {
	return i.ToWorkflowEntityOwnerArrayOutputWithContext(context.Background())
}

func (i WorkflowEntityOwnerArray) ToWorkflowEntityOwnerArrayOutputWithContext(ctx context.Context) WorkflowEntityOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowEntityOwnerArrayOutput)
}

type WorkflowEntityOwnerOutput struct{ *pulumi.OutputState }

func (WorkflowEntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowEntityOwner)(nil)).Elem()
}

func (o WorkflowEntityOwnerOutput) ToWorkflowEntityOwnerOutput() WorkflowEntityOwnerOutput {
	return o
}

func (o WorkflowEntityOwnerOutput) ToWorkflowEntityOwnerOutputWithContext(ctx context.Context) WorkflowEntityOwnerOutput {
	return o
}

// The ID of this resource.
func (o WorkflowEntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v WorkflowEntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

func (o WorkflowEntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v WorkflowEntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type WorkflowEntityOwnerArrayOutput struct{ *pulumi.OutputState }

func (WorkflowEntityOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkflowEntityOwner)(nil)).Elem()
}

func (o WorkflowEntityOwnerArrayOutput) ToWorkflowEntityOwnerArrayOutput() WorkflowEntityOwnerArrayOutput {
	return o
}

func (o WorkflowEntityOwnerArrayOutput) ToWorkflowEntityOwnerArrayOutputWithContext(ctx context.Context) WorkflowEntityOwnerArrayOutput {
	return o
}

func (o WorkflowEntityOwnerArrayOutput) Index(i pulumi.IntInput) WorkflowEntityOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkflowEntityOwner {
		return vs[0].([]WorkflowEntityOwner)[vs[1].(int)]
	}).(WorkflowEntityOwnerOutput)
}

type WorkflowFilters struct {
	// Condition to be applied on the filters (and / or)
	Condition string                  `pulumi:"condition"`
	Filters   []WorkflowFiltersFilter `pulumi:"filters"`
}

// WorkflowFiltersInput is an input type that accepts WorkflowFiltersArgs and WorkflowFiltersOutput values.
// You can construct a concrete instance of `WorkflowFiltersInput` via:
//
//	WorkflowFiltersArgs{...}
type WorkflowFiltersInput interface {
	pulumi.Input

	ToWorkflowFiltersOutput() WorkflowFiltersOutput
	ToWorkflowFiltersOutputWithContext(context.Context) WorkflowFiltersOutput
}

type WorkflowFiltersArgs struct {
	// Condition to be applied on the filters (and / or)
	Condition pulumi.StringInput              `pulumi:"condition"`
	Filters   WorkflowFiltersFilterArrayInput `pulumi:"filters"`
}

func (WorkflowFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowFilters)(nil)).Elem()
}

func (i WorkflowFiltersArgs) ToWorkflowFiltersOutput() WorkflowFiltersOutput {
	return i.ToWorkflowFiltersOutputWithContext(context.Background())
}

func (i WorkflowFiltersArgs) ToWorkflowFiltersOutputWithContext(ctx context.Context) WorkflowFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowFiltersOutput)
}

func (i WorkflowFiltersArgs) ToWorkflowFiltersPtrOutput() WorkflowFiltersPtrOutput {
	return i.ToWorkflowFiltersPtrOutputWithContext(context.Background())
}

func (i WorkflowFiltersArgs) ToWorkflowFiltersPtrOutputWithContext(ctx context.Context) WorkflowFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowFiltersOutput).ToWorkflowFiltersPtrOutputWithContext(ctx)
}

// WorkflowFiltersPtrInput is an input type that accepts WorkflowFiltersArgs, WorkflowFiltersPtr and WorkflowFiltersPtrOutput values.
// You can construct a concrete instance of `WorkflowFiltersPtrInput` via:
//
//	        WorkflowFiltersArgs{...}
//
//	or:
//
//	        nil
type WorkflowFiltersPtrInput interface {
	pulumi.Input

	ToWorkflowFiltersPtrOutput() WorkflowFiltersPtrOutput
	ToWorkflowFiltersPtrOutputWithContext(context.Context) WorkflowFiltersPtrOutput
}

type workflowFiltersPtrType WorkflowFiltersArgs

func WorkflowFiltersPtr(v *WorkflowFiltersArgs) WorkflowFiltersPtrInput {
	return (*workflowFiltersPtrType)(v)
}

func (*workflowFiltersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowFilters)(nil)).Elem()
}

func (i *workflowFiltersPtrType) ToWorkflowFiltersPtrOutput() WorkflowFiltersPtrOutput {
	return i.ToWorkflowFiltersPtrOutputWithContext(context.Background())
}

func (i *workflowFiltersPtrType) ToWorkflowFiltersPtrOutputWithContext(ctx context.Context) WorkflowFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowFiltersPtrOutput)
}

type WorkflowFiltersOutput struct{ *pulumi.OutputState }

func (WorkflowFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowFilters)(nil)).Elem()
}

func (o WorkflowFiltersOutput) ToWorkflowFiltersOutput() WorkflowFiltersOutput {
	return o
}

func (o WorkflowFiltersOutput) ToWorkflowFiltersOutputWithContext(ctx context.Context) WorkflowFiltersOutput {
	return o
}

func (o WorkflowFiltersOutput) ToWorkflowFiltersPtrOutput() WorkflowFiltersPtrOutput {
	return o.ToWorkflowFiltersPtrOutputWithContext(context.Background())
}

func (o WorkflowFiltersOutput) ToWorkflowFiltersPtrOutputWithContext(ctx context.Context) WorkflowFiltersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkflowFilters) *WorkflowFilters {
		return &v
	}).(WorkflowFiltersPtrOutput)
}

// Condition to be applied on the filters (and / or)
func (o WorkflowFiltersOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v WorkflowFilters) string { return v.Condition }).(pulumi.StringOutput)
}

func (o WorkflowFiltersOutput) Filters() WorkflowFiltersFilterArrayOutput {
	return o.ApplyT(func(v WorkflowFilters) []WorkflowFiltersFilter { return v.Filters }).(WorkflowFiltersFilterArrayOutput)
}

type WorkflowFiltersPtrOutput struct{ *pulumi.OutputState }

func (WorkflowFiltersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowFilters)(nil)).Elem()
}

func (o WorkflowFiltersPtrOutput) ToWorkflowFiltersPtrOutput() WorkflowFiltersPtrOutput {
	return o
}

func (o WorkflowFiltersPtrOutput) ToWorkflowFiltersPtrOutputWithContext(ctx context.Context) WorkflowFiltersPtrOutput {
	return o
}

func (o WorkflowFiltersPtrOutput) Elem() WorkflowFiltersOutput {
	return o.ApplyT(func(v *WorkflowFilters) WorkflowFilters {
		if v != nil {
			return *v
		}
		var ret WorkflowFilters
		return ret
	}).(WorkflowFiltersOutput)
}

// Condition to be applied on the filters (and / or)
func (o WorkflowFiltersPtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowFilters) *string {
		if v == nil {
			return nil
		}
		return &v.Condition
	}).(pulumi.StringPtrOutput)
}

func (o WorkflowFiltersPtrOutput) Filters() WorkflowFiltersFilterArrayOutput {
	return o.ApplyT(func(v *WorkflowFilters) []WorkflowFiltersFilter {
		if v == nil {
			return nil
		}
		return v.Filters
	}).(WorkflowFiltersFilterArrayOutput)
}

type WorkflowFiltersFilter struct {
	// Condition to be applied on the filters (and / or)
	Condition *string                       `pulumi:"condition"`
	Filters   []WorkflowFiltersFilterFilter `pulumi:"filters"`
	Type      *string                       `pulumi:"type"`
	Value     *string                       `pulumi:"value"`
}

// WorkflowFiltersFilterInput is an input type that accepts WorkflowFiltersFilterArgs and WorkflowFiltersFilterOutput values.
// You can construct a concrete instance of `WorkflowFiltersFilterInput` via:
//
//	WorkflowFiltersFilterArgs{...}
type WorkflowFiltersFilterInput interface {
	pulumi.Input

	ToWorkflowFiltersFilterOutput() WorkflowFiltersFilterOutput
	ToWorkflowFiltersFilterOutputWithContext(context.Context) WorkflowFiltersFilterOutput
}

type WorkflowFiltersFilterArgs struct {
	// Condition to be applied on the filters (and / or)
	Condition pulumi.StringPtrInput                 `pulumi:"condition"`
	Filters   WorkflowFiltersFilterFilterArrayInput `pulumi:"filters"`
	Type      pulumi.StringPtrInput                 `pulumi:"type"`
	Value     pulumi.StringPtrInput                 `pulumi:"value"`
}

func (WorkflowFiltersFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowFiltersFilter)(nil)).Elem()
}

func (i WorkflowFiltersFilterArgs) ToWorkflowFiltersFilterOutput() WorkflowFiltersFilterOutput {
	return i.ToWorkflowFiltersFilterOutputWithContext(context.Background())
}

func (i WorkflowFiltersFilterArgs) ToWorkflowFiltersFilterOutputWithContext(ctx context.Context) WorkflowFiltersFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowFiltersFilterOutput)
}

// WorkflowFiltersFilterArrayInput is an input type that accepts WorkflowFiltersFilterArray and WorkflowFiltersFilterArrayOutput values.
// You can construct a concrete instance of `WorkflowFiltersFilterArrayInput` via:
//
//	WorkflowFiltersFilterArray{ WorkflowFiltersFilterArgs{...} }
type WorkflowFiltersFilterArrayInput interface {
	pulumi.Input

	ToWorkflowFiltersFilterArrayOutput() WorkflowFiltersFilterArrayOutput
	ToWorkflowFiltersFilterArrayOutputWithContext(context.Context) WorkflowFiltersFilterArrayOutput
}

type WorkflowFiltersFilterArray []WorkflowFiltersFilterInput

func (WorkflowFiltersFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkflowFiltersFilter)(nil)).Elem()
}

func (i WorkflowFiltersFilterArray) ToWorkflowFiltersFilterArrayOutput() WorkflowFiltersFilterArrayOutput {
	return i.ToWorkflowFiltersFilterArrayOutputWithContext(context.Background())
}

func (i WorkflowFiltersFilterArray) ToWorkflowFiltersFilterArrayOutputWithContext(ctx context.Context) WorkflowFiltersFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowFiltersFilterArrayOutput)
}

type WorkflowFiltersFilterOutput struct{ *pulumi.OutputState }

func (WorkflowFiltersFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowFiltersFilter)(nil)).Elem()
}

func (o WorkflowFiltersFilterOutput) ToWorkflowFiltersFilterOutput() WorkflowFiltersFilterOutput {
	return o
}

func (o WorkflowFiltersFilterOutput) ToWorkflowFiltersFilterOutputWithContext(ctx context.Context) WorkflowFiltersFilterOutput {
	return o
}

// Condition to be applied on the filters (and / or)
func (o WorkflowFiltersFilterOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowFiltersFilter) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

func (o WorkflowFiltersFilterOutput) Filters() WorkflowFiltersFilterFilterArrayOutput {
	return o.ApplyT(func(v WorkflowFiltersFilter) []WorkflowFiltersFilterFilter { return v.Filters }).(WorkflowFiltersFilterFilterArrayOutput)
}

func (o WorkflowFiltersFilterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowFiltersFilter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o WorkflowFiltersFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowFiltersFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type WorkflowFiltersFilterArrayOutput struct{ *pulumi.OutputState }

func (WorkflowFiltersFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkflowFiltersFilter)(nil)).Elem()
}

func (o WorkflowFiltersFilterArrayOutput) ToWorkflowFiltersFilterArrayOutput() WorkflowFiltersFilterArrayOutput {
	return o
}

func (o WorkflowFiltersFilterArrayOutput) ToWorkflowFiltersFilterArrayOutputWithContext(ctx context.Context) WorkflowFiltersFilterArrayOutput {
	return o
}

func (o WorkflowFiltersFilterArrayOutput) Index(i pulumi.IntInput) WorkflowFiltersFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkflowFiltersFilter {
		return vs[0].([]WorkflowFiltersFilter)[vs[1].(int)]
	}).(WorkflowFiltersFilterOutput)
}

type WorkflowFiltersFilterFilter struct {
	Key   *string `pulumi:"key"`
	Type  *string `pulumi:"type"`
	Value *string `pulumi:"value"`
}

// WorkflowFiltersFilterFilterInput is an input type that accepts WorkflowFiltersFilterFilterArgs and WorkflowFiltersFilterFilterOutput values.
// You can construct a concrete instance of `WorkflowFiltersFilterFilterInput` via:
//
//	WorkflowFiltersFilterFilterArgs{...}
type WorkflowFiltersFilterFilterInput interface {
	pulumi.Input

	ToWorkflowFiltersFilterFilterOutput() WorkflowFiltersFilterFilterOutput
	ToWorkflowFiltersFilterFilterOutputWithContext(context.Context) WorkflowFiltersFilterFilterOutput
}

type WorkflowFiltersFilterFilterArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Type  pulumi.StringPtrInput `pulumi:"type"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (WorkflowFiltersFilterFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowFiltersFilterFilter)(nil)).Elem()
}

func (i WorkflowFiltersFilterFilterArgs) ToWorkflowFiltersFilterFilterOutput() WorkflowFiltersFilterFilterOutput {
	return i.ToWorkflowFiltersFilterFilterOutputWithContext(context.Background())
}

func (i WorkflowFiltersFilterFilterArgs) ToWorkflowFiltersFilterFilterOutputWithContext(ctx context.Context) WorkflowFiltersFilterFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowFiltersFilterFilterOutput)
}

// WorkflowFiltersFilterFilterArrayInput is an input type that accepts WorkflowFiltersFilterFilterArray and WorkflowFiltersFilterFilterArrayOutput values.
// You can construct a concrete instance of `WorkflowFiltersFilterFilterArrayInput` via:
//
//	WorkflowFiltersFilterFilterArray{ WorkflowFiltersFilterFilterArgs{...} }
type WorkflowFiltersFilterFilterArrayInput interface {
	pulumi.Input

	ToWorkflowFiltersFilterFilterArrayOutput() WorkflowFiltersFilterFilterArrayOutput
	ToWorkflowFiltersFilterFilterArrayOutputWithContext(context.Context) WorkflowFiltersFilterFilterArrayOutput
}

type WorkflowFiltersFilterFilterArray []WorkflowFiltersFilterFilterInput

func (WorkflowFiltersFilterFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkflowFiltersFilterFilter)(nil)).Elem()
}

func (i WorkflowFiltersFilterFilterArray) ToWorkflowFiltersFilterFilterArrayOutput() WorkflowFiltersFilterFilterArrayOutput {
	return i.ToWorkflowFiltersFilterFilterArrayOutputWithContext(context.Background())
}

func (i WorkflowFiltersFilterFilterArray) ToWorkflowFiltersFilterFilterArrayOutputWithContext(ctx context.Context) WorkflowFiltersFilterFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowFiltersFilterFilterArrayOutput)
}

type WorkflowFiltersFilterFilterOutput struct{ *pulumi.OutputState }

func (WorkflowFiltersFilterFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowFiltersFilterFilter)(nil)).Elem()
}

func (o WorkflowFiltersFilterFilterOutput) ToWorkflowFiltersFilterFilterOutput() WorkflowFiltersFilterFilterOutput {
	return o
}

func (o WorkflowFiltersFilterFilterOutput) ToWorkflowFiltersFilterFilterOutputWithContext(ctx context.Context) WorkflowFiltersFilterFilterOutput {
	return o
}

func (o WorkflowFiltersFilterFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowFiltersFilterFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o WorkflowFiltersFilterFilterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowFiltersFilterFilter) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o WorkflowFiltersFilterFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkflowFiltersFilterFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type WorkflowFiltersFilterFilterArrayOutput struct{ *pulumi.OutputState }

func (WorkflowFiltersFilterFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkflowFiltersFilterFilter)(nil)).Elem()
}

func (o WorkflowFiltersFilterFilterArrayOutput) ToWorkflowFiltersFilterFilterArrayOutput() WorkflowFiltersFilterFilterArrayOutput {
	return o
}

func (o WorkflowFiltersFilterFilterArrayOutput) ToWorkflowFiltersFilterFilterArrayOutputWithContext(ctx context.Context) WorkflowFiltersFilterFilterArrayOutput {
	return o
}

func (o WorkflowFiltersFilterFilterArrayOutput) Index(i pulumi.IntInput) WorkflowFiltersFilterFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkflowFiltersFilterFilter {
		return vs[0].([]WorkflowFiltersFilterFilter)[vs[1].(int)]
	}).(WorkflowFiltersFilterFilterOutput)
}

type WorkflowTag struct {
	Color string `pulumi:"color"`
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// WorkflowTagInput is an input type that accepts WorkflowTagArgs and WorkflowTagOutput values.
// You can construct a concrete instance of `WorkflowTagInput` via:
//
//	WorkflowTagArgs{...}
type WorkflowTagInput interface {
	pulumi.Input

	ToWorkflowTagOutput() WorkflowTagOutput
	ToWorkflowTagOutputWithContext(context.Context) WorkflowTagOutput
}

type WorkflowTagArgs struct {
	Color pulumi.StringInput `pulumi:"color"`
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (WorkflowTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowTag)(nil)).Elem()
}

func (i WorkflowTagArgs) ToWorkflowTagOutput() WorkflowTagOutput {
	return i.ToWorkflowTagOutputWithContext(context.Background())
}

func (i WorkflowTagArgs) ToWorkflowTagOutputWithContext(ctx context.Context) WorkflowTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTagOutput)
}

// WorkflowTagArrayInput is an input type that accepts WorkflowTagArray and WorkflowTagArrayOutput values.
// You can construct a concrete instance of `WorkflowTagArrayInput` via:
//
//	WorkflowTagArray{ WorkflowTagArgs{...} }
type WorkflowTagArrayInput interface {
	pulumi.Input

	ToWorkflowTagArrayOutput() WorkflowTagArrayOutput
	ToWorkflowTagArrayOutputWithContext(context.Context) WorkflowTagArrayOutput
}

type WorkflowTagArray []WorkflowTagInput

func (WorkflowTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkflowTag)(nil)).Elem()
}

func (i WorkflowTagArray) ToWorkflowTagArrayOutput() WorkflowTagArrayOutput {
	return i.ToWorkflowTagArrayOutputWithContext(context.Background())
}

func (i WorkflowTagArray) ToWorkflowTagArrayOutputWithContext(ctx context.Context) WorkflowTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTagArrayOutput)
}

type WorkflowTagOutput struct{ *pulumi.OutputState }

func (WorkflowTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkflowTag)(nil)).Elem()
}

func (o WorkflowTagOutput) ToWorkflowTagOutput() WorkflowTagOutput {
	return o
}

func (o WorkflowTagOutput) ToWorkflowTagOutputWithContext(ctx context.Context) WorkflowTagOutput {
	return o
}

func (o WorkflowTagOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v WorkflowTag) string { return v.Color }).(pulumi.StringOutput)
}

func (o WorkflowTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v WorkflowTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o WorkflowTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v WorkflowTag) string { return v.Value }).(pulumi.StringOutput)
}

type WorkflowTagArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkflowTag)(nil)).Elem()
}

func (o WorkflowTagArrayOutput) ToWorkflowTagArrayOutput() WorkflowTagArrayOutput {
	return o
}

func (o WorkflowTagArrayOutput) ToWorkflowTagArrayOutputWithContext(ctx context.Context) WorkflowTagArrayOutput {
	return o
}

func (o WorkflowTagArrayOutput) Index(i pulumi.IntInput) WorkflowTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkflowTag {
		return vs[0].([]WorkflowTag)[vs[1].(int)]
	}).(WorkflowTagOutput)
}

type GetRunbookEntityOwner struct {
	// Runbook owner id.
	Id string `pulumi:"id"`
	// Runbook owner type. (user or squad or team)
	Type string `pulumi:"type"`
}

// GetRunbookEntityOwnerInput is an input type that accepts GetRunbookEntityOwnerArgs and GetRunbookEntityOwnerOutput values.
// You can construct a concrete instance of `GetRunbookEntityOwnerInput` via:
//
//	GetRunbookEntityOwnerArgs{...}
type GetRunbookEntityOwnerInput interface {
	pulumi.Input

	ToGetRunbookEntityOwnerOutput() GetRunbookEntityOwnerOutput
	ToGetRunbookEntityOwnerOutputWithContext(context.Context) GetRunbookEntityOwnerOutput
}

type GetRunbookEntityOwnerArgs struct {
	// Runbook owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Runbook owner type. (user or squad or team)
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetRunbookEntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRunbookEntityOwner)(nil)).Elem()
}

func (i GetRunbookEntityOwnerArgs) ToGetRunbookEntityOwnerOutput() GetRunbookEntityOwnerOutput {
	return i.ToGetRunbookEntityOwnerOutputWithContext(context.Background())
}

func (i GetRunbookEntityOwnerArgs) ToGetRunbookEntityOwnerOutputWithContext(ctx context.Context) GetRunbookEntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRunbookEntityOwnerOutput)
}

// GetRunbookEntityOwnerArrayInput is an input type that accepts GetRunbookEntityOwnerArray and GetRunbookEntityOwnerArrayOutput values.
// You can construct a concrete instance of `GetRunbookEntityOwnerArrayInput` via:
//
//	GetRunbookEntityOwnerArray{ GetRunbookEntityOwnerArgs{...} }
type GetRunbookEntityOwnerArrayInput interface {
	pulumi.Input

	ToGetRunbookEntityOwnerArrayOutput() GetRunbookEntityOwnerArrayOutput
	ToGetRunbookEntityOwnerArrayOutputWithContext(context.Context) GetRunbookEntityOwnerArrayOutput
}

type GetRunbookEntityOwnerArray []GetRunbookEntityOwnerInput

func (GetRunbookEntityOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRunbookEntityOwner)(nil)).Elem()
}

func (i GetRunbookEntityOwnerArray) ToGetRunbookEntityOwnerArrayOutput() GetRunbookEntityOwnerArrayOutput {
	return i.ToGetRunbookEntityOwnerArrayOutputWithContext(context.Background())
}

func (i GetRunbookEntityOwnerArray) ToGetRunbookEntityOwnerArrayOutputWithContext(ctx context.Context) GetRunbookEntityOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRunbookEntityOwnerArrayOutput)
}

type GetRunbookEntityOwnerOutput struct{ *pulumi.OutputState }

func (GetRunbookEntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRunbookEntityOwner)(nil)).Elem()
}

func (o GetRunbookEntityOwnerOutput) ToGetRunbookEntityOwnerOutput() GetRunbookEntityOwnerOutput {
	return o
}

func (o GetRunbookEntityOwnerOutput) ToGetRunbookEntityOwnerOutputWithContext(ctx context.Context) GetRunbookEntityOwnerOutput {
	return o
}

// Runbook owner id.
func (o GetRunbookEntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRunbookEntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Runbook owner type. (user or squad or team)
func (o GetRunbookEntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRunbookEntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type GetRunbookEntityOwnerArrayOutput struct{ *pulumi.OutputState }

func (GetRunbookEntityOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRunbookEntityOwner)(nil)).Elem()
}

func (o GetRunbookEntityOwnerArrayOutput) ToGetRunbookEntityOwnerArrayOutput() GetRunbookEntityOwnerArrayOutput {
	return o
}

func (o GetRunbookEntityOwnerArrayOutput) ToGetRunbookEntityOwnerArrayOutputWithContext(ctx context.Context) GetRunbookEntityOwnerArrayOutput {
	return o
}

func (o GetRunbookEntityOwnerArrayOutput) Index(i pulumi.IntInput) GetRunbookEntityOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRunbookEntityOwner {
		return vs[0].([]GetRunbookEntityOwner)[vs[1].(int)]
	}).(GetRunbookEntityOwnerOutput)
}

type GetRunbookStep struct {
	Content string `pulumi:"content"`
}

// GetRunbookStepInput is an input type that accepts GetRunbookStepArgs and GetRunbookStepOutput values.
// You can construct a concrete instance of `GetRunbookStepInput` via:
//
//	GetRunbookStepArgs{...}
type GetRunbookStepInput interface {
	pulumi.Input

	ToGetRunbookStepOutput() GetRunbookStepOutput
	ToGetRunbookStepOutputWithContext(context.Context) GetRunbookStepOutput
}

type GetRunbookStepArgs struct {
	Content pulumi.StringInput `pulumi:"content"`
}

func (GetRunbookStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRunbookStep)(nil)).Elem()
}

func (i GetRunbookStepArgs) ToGetRunbookStepOutput() GetRunbookStepOutput {
	return i.ToGetRunbookStepOutputWithContext(context.Background())
}

func (i GetRunbookStepArgs) ToGetRunbookStepOutputWithContext(ctx context.Context) GetRunbookStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRunbookStepOutput)
}

// GetRunbookStepArrayInput is an input type that accepts GetRunbookStepArray and GetRunbookStepArrayOutput values.
// You can construct a concrete instance of `GetRunbookStepArrayInput` via:
//
//	GetRunbookStepArray{ GetRunbookStepArgs{...} }
type GetRunbookStepArrayInput interface {
	pulumi.Input

	ToGetRunbookStepArrayOutput() GetRunbookStepArrayOutput
	ToGetRunbookStepArrayOutputWithContext(context.Context) GetRunbookStepArrayOutput
}

type GetRunbookStepArray []GetRunbookStepInput

func (GetRunbookStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRunbookStep)(nil)).Elem()
}

func (i GetRunbookStepArray) ToGetRunbookStepArrayOutput() GetRunbookStepArrayOutput {
	return i.ToGetRunbookStepArrayOutputWithContext(context.Background())
}

func (i GetRunbookStepArray) ToGetRunbookStepArrayOutputWithContext(ctx context.Context) GetRunbookStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRunbookStepArrayOutput)
}

type GetRunbookStepOutput struct{ *pulumi.OutputState }

func (GetRunbookStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRunbookStep)(nil)).Elem()
}

func (o GetRunbookStepOutput) ToGetRunbookStepOutput() GetRunbookStepOutput {
	return o
}

func (o GetRunbookStepOutput) ToGetRunbookStepOutputWithContext(ctx context.Context) GetRunbookStepOutput {
	return o
}

func (o GetRunbookStepOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v GetRunbookStep) string { return v.Content }).(pulumi.StringOutput)
}

type GetRunbookStepArrayOutput struct{ *pulumi.OutputState }

func (GetRunbookStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRunbookStep)(nil)).Elem()
}

func (o GetRunbookStepArrayOutput) ToGetRunbookStepArrayOutput() GetRunbookStepArrayOutput {
	return o
}

func (o GetRunbookStepArrayOutput) ToGetRunbookStepArrayOutputWithContext(ctx context.Context) GetRunbookStepArrayOutput {
	return o
}

func (o GetRunbookStepArrayOutput) Index(i pulumi.IntInput) GetRunbookStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRunbookStep {
		return vs[0].([]GetRunbookStep)[vs[1].(int)]
	}).(GetRunbookStepOutput)
}

type GetServiceMaintainer struct {
	// The id of the maintainer.
	Id string `pulumi:"id"`
	// The type of the maintainer. (user, team or squad)
	Type string `pulumi:"type"`
}

// GetServiceMaintainerInput is an input type that accepts GetServiceMaintainerArgs and GetServiceMaintainerOutput values.
// You can construct a concrete instance of `GetServiceMaintainerInput` via:
//
//	GetServiceMaintainerArgs{...}
type GetServiceMaintainerInput interface {
	pulumi.Input

	ToGetServiceMaintainerOutput() GetServiceMaintainerOutput
	ToGetServiceMaintainerOutputWithContext(context.Context) GetServiceMaintainerOutput
}

type GetServiceMaintainerArgs struct {
	// The id of the maintainer.
	Id pulumi.StringInput `pulumi:"id"`
	// The type of the maintainer. (user, team or squad)
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetServiceMaintainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceMaintainer)(nil)).Elem()
}

func (i GetServiceMaintainerArgs) ToGetServiceMaintainerOutput() GetServiceMaintainerOutput {
	return i.ToGetServiceMaintainerOutputWithContext(context.Background())
}

func (i GetServiceMaintainerArgs) ToGetServiceMaintainerOutputWithContext(ctx context.Context) GetServiceMaintainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceMaintainerOutput)
}

// GetServiceMaintainerArrayInput is an input type that accepts GetServiceMaintainerArray and GetServiceMaintainerArrayOutput values.
// You can construct a concrete instance of `GetServiceMaintainerArrayInput` via:
//
//	GetServiceMaintainerArray{ GetServiceMaintainerArgs{...} }
type GetServiceMaintainerArrayInput interface {
	pulumi.Input

	ToGetServiceMaintainerArrayOutput() GetServiceMaintainerArrayOutput
	ToGetServiceMaintainerArrayOutputWithContext(context.Context) GetServiceMaintainerArrayOutput
}

type GetServiceMaintainerArray []GetServiceMaintainerInput

func (GetServiceMaintainerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceMaintainer)(nil)).Elem()
}

func (i GetServiceMaintainerArray) ToGetServiceMaintainerArrayOutput() GetServiceMaintainerArrayOutput {
	return i.ToGetServiceMaintainerArrayOutputWithContext(context.Background())
}

func (i GetServiceMaintainerArray) ToGetServiceMaintainerArrayOutputWithContext(ctx context.Context) GetServiceMaintainerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceMaintainerArrayOutput)
}

type GetServiceMaintainerOutput struct{ *pulumi.OutputState }

func (GetServiceMaintainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceMaintainer)(nil)).Elem()
}

func (o GetServiceMaintainerOutput) ToGetServiceMaintainerOutput() GetServiceMaintainerOutput {
	return o
}

func (o GetServiceMaintainerOutput) ToGetServiceMaintainerOutputWithContext(ctx context.Context) GetServiceMaintainerOutput {
	return o
}

// The id of the maintainer.
func (o GetServiceMaintainerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceMaintainer) string { return v.Id }).(pulumi.StringOutput)
}

// The type of the maintainer. (user, team or squad)
func (o GetServiceMaintainerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceMaintainer) string { return v.Type }).(pulumi.StringOutput)
}

type GetServiceMaintainerArrayOutput struct{ *pulumi.OutputState }

func (GetServiceMaintainerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceMaintainer)(nil)).Elem()
}

func (o GetServiceMaintainerArrayOutput) ToGetServiceMaintainerArrayOutput() GetServiceMaintainerArrayOutput {
	return o
}

func (o GetServiceMaintainerArrayOutput) ToGetServiceMaintainerArrayOutputWithContext(ctx context.Context) GetServiceMaintainerArrayOutput {
	return o
}

func (o GetServiceMaintainerArrayOutput) Index(i pulumi.IntInput) GetServiceMaintainerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceMaintainer {
		return vs[0].([]GetServiceMaintainer)[vs[1].(int)]
	}).(GetServiceMaintainerOutput)
}

type GetServiceTag struct {
	// key
	Key string `pulumi:"key"`
	// value
	Value string `pulumi:"value"`
}

// GetServiceTagInput is an input type that accepts GetServiceTagArgs and GetServiceTagOutput values.
// You can construct a concrete instance of `GetServiceTagInput` via:
//
//	GetServiceTagArgs{...}
type GetServiceTagInput interface {
	pulumi.Input

	ToGetServiceTagOutput() GetServiceTagOutput
	ToGetServiceTagOutputWithContext(context.Context) GetServiceTagOutput
}

type GetServiceTagArgs struct {
	// key
	Key pulumi.StringInput `pulumi:"key"`
	// value
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetServiceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTag)(nil)).Elem()
}

func (i GetServiceTagArgs) ToGetServiceTagOutput() GetServiceTagOutput {
	return i.ToGetServiceTagOutputWithContext(context.Background())
}

func (i GetServiceTagArgs) ToGetServiceTagOutputWithContext(ctx context.Context) GetServiceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTagOutput)
}

// GetServiceTagArrayInput is an input type that accepts GetServiceTagArray and GetServiceTagArrayOutput values.
// You can construct a concrete instance of `GetServiceTagArrayInput` via:
//
//	GetServiceTagArray{ GetServiceTagArgs{...} }
type GetServiceTagArrayInput interface {
	pulumi.Input

	ToGetServiceTagArrayOutput() GetServiceTagArrayOutput
	ToGetServiceTagArrayOutputWithContext(context.Context) GetServiceTagArrayOutput
}

type GetServiceTagArray []GetServiceTagInput

func (GetServiceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTag)(nil)).Elem()
}

func (i GetServiceTagArray) ToGetServiceTagArrayOutput() GetServiceTagArrayOutput {
	return i.ToGetServiceTagArrayOutputWithContext(context.Background())
}

func (i GetServiceTagArray) ToGetServiceTagArrayOutputWithContext(ctx context.Context) GetServiceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTagArrayOutput)
}

type GetServiceTagOutput struct{ *pulumi.OutputState }

func (GetServiceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTag)(nil)).Elem()
}

func (o GetServiceTagOutput) ToGetServiceTagOutput() GetServiceTagOutput {
	return o
}

func (o GetServiceTagOutput) ToGetServiceTagOutputWithContext(ctx context.Context) GetServiceTagOutput {
	return o
}

// key
func (o GetServiceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTag) string { return v.Key }).(pulumi.StringOutput)
}

// value
func (o GetServiceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetServiceTagArrayOutput struct{ *pulumi.OutputState }

func (GetServiceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTag)(nil)).Elem()
}

func (o GetServiceTagArrayOutput) ToGetServiceTagArrayOutput() GetServiceTagArrayOutput {
	return o
}

func (o GetServiceTagArrayOutput) ToGetServiceTagArrayOutputWithContext(ctx context.Context) GetServiceTagArrayOutput {
	return o
}

func (o GetServiceTagArrayOutput) Index(i pulumi.IntInput) GetServiceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceTag {
		return vs[0].([]GetServiceTag)[vs[1].(int)]
	}).(GetServiceTagOutput)
}

type GetTeamMember struct {
	RoleIds []string `pulumi:"roleIds"`
	// User id.
	UserId string `pulumi:"userId"`
}

// GetTeamMemberInput is an input type that accepts GetTeamMemberArgs and GetTeamMemberOutput values.
// You can construct a concrete instance of `GetTeamMemberInput` via:
//
//	GetTeamMemberArgs{...}
type GetTeamMemberInput interface {
	pulumi.Input

	ToGetTeamMemberOutput() GetTeamMemberOutput
	ToGetTeamMemberOutputWithContext(context.Context) GetTeamMemberOutput
}

type GetTeamMemberArgs struct {
	RoleIds pulumi.StringArrayInput `pulumi:"roleIds"`
	// User id.
	UserId pulumi.StringInput `pulumi:"userId"`
}

func (GetTeamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamMember)(nil)).Elem()
}

func (i GetTeamMemberArgs) ToGetTeamMemberOutput() GetTeamMemberOutput {
	return i.ToGetTeamMemberOutputWithContext(context.Background())
}

func (i GetTeamMemberArgs) ToGetTeamMemberOutputWithContext(ctx context.Context) GetTeamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamMemberOutput)
}

// GetTeamMemberArrayInput is an input type that accepts GetTeamMemberArray and GetTeamMemberArrayOutput values.
// You can construct a concrete instance of `GetTeamMemberArrayInput` via:
//
//	GetTeamMemberArray{ GetTeamMemberArgs{...} }
type GetTeamMemberArrayInput interface {
	pulumi.Input

	ToGetTeamMemberArrayOutput() GetTeamMemberArrayOutput
	ToGetTeamMemberArrayOutputWithContext(context.Context) GetTeamMemberArrayOutput
}

type GetTeamMemberArray []GetTeamMemberInput

func (GetTeamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamMember)(nil)).Elem()
}

func (i GetTeamMemberArray) ToGetTeamMemberArrayOutput() GetTeamMemberArrayOutput {
	return i.ToGetTeamMemberArrayOutputWithContext(context.Background())
}

func (i GetTeamMemberArray) ToGetTeamMemberArrayOutputWithContext(ctx context.Context) GetTeamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamMemberArrayOutput)
}

type GetTeamMemberOutput struct{ *pulumi.OutputState }

func (GetTeamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamMember)(nil)).Elem()
}

func (o GetTeamMemberOutput) ToGetTeamMemberOutput() GetTeamMemberOutput {
	return o
}

func (o GetTeamMemberOutput) ToGetTeamMemberOutputWithContext(ctx context.Context) GetTeamMemberOutput {
	return o
}

func (o GetTeamMemberOutput) RoleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTeamMember) []string { return v.RoleIds }).(pulumi.StringArrayOutput)
}

// User id.
func (o GetTeamMemberOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamMember) string { return v.UserId }).(pulumi.StringOutput)
}

type GetTeamMemberArrayOutput struct{ *pulumi.OutputState }

func (GetTeamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamMember)(nil)).Elem()
}

func (o GetTeamMemberArrayOutput) ToGetTeamMemberArrayOutput() GetTeamMemberArrayOutput {
	return o
}

func (o GetTeamMemberArrayOutput) ToGetTeamMemberArrayOutputWithContext(ctx context.Context) GetTeamMemberArrayOutput {
	return o
}

func (o GetTeamMemberArrayOutput) Index(i pulumi.IntInput) GetTeamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTeamMember {
		return vs[0].([]GetTeamMember)[vs[1].(int)]
	}).(GetTeamMemberOutput)
}

type GetTeamRole struct {
	Abilities []string `pulumi:"abilities"`
	// Role is default.
	Default bool `pulumi:"default"`
	// Role id.
	Id string `pulumi:"id"`
	// Role name.
	Name string `pulumi:"name"`
}

// GetTeamRoleInput is an input type that accepts GetTeamRoleArgs and GetTeamRoleOutput values.
// You can construct a concrete instance of `GetTeamRoleInput` via:
//
//	GetTeamRoleArgs{...}
type GetTeamRoleInput interface {
	pulumi.Input

	ToGetTeamRoleOutput() GetTeamRoleOutput
	ToGetTeamRoleOutputWithContext(context.Context) GetTeamRoleOutput
}

type GetTeamRoleArgs struct {
	Abilities pulumi.StringArrayInput `pulumi:"abilities"`
	// Role is default.
	Default pulumi.BoolInput `pulumi:"default"`
	// Role id.
	Id pulumi.StringInput `pulumi:"id"`
	// Role name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetTeamRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamRole)(nil)).Elem()
}

func (i GetTeamRoleArgs) ToGetTeamRoleOutput() GetTeamRoleOutput {
	return i.ToGetTeamRoleOutputWithContext(context.Background())
}

func (i GetTeamRoleArgs) ToGetTeamRoleOutputWithContext(ctx context.Context) GetTeamRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamRoleOutput)
}

// GetTeamRoleArrayInput is an input type that accepts GetTeamRoleArray and GetTeamRoleArrayOutput values.
// You can construct a concrete instance of `GetTeamRoleArrayInput` via:
//
//	GetTeamRoleArray{ GetTeamRoleArgs{...} }
type GetTeamRoleArrayInput interface {
	pulumi.Input

	ToGetTeamRoleArrayOutput() GetTeamRoleArrayOutput
	ToGetTeamRoleArrayOutputWithContext(context.Context) GetTeamRoleArrayOutput
}

type GetTeamRoleArray []GetTeamRoleInput

func (GetTeamRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamRole)(nil)).Elem()
}

func (i GetTeamRoleArray) ToGetTeamRoleArrayOutput() GetTeamRoleArrayOutput {
	return i.ToGetTeamRoleArrayOutputWithContext(context.Background())
}

func (i GetTeamRoleArray) ToGetTeamRoleArrayOutputWithContext(ctx context.Context) GetTeamRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamRoleArrayOutput)
}

type GetTeamRoleOutput struct{ *pulumi.OutputState }

func (GetTeamRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamRole)(nil)).Elem()
}

func (o GetTeamRoleOutput) ToGetTeamRoleOutput() GetTeamRoleOutput {
	return o
}

func (o GetTeamRoleOutput) ToGetTeamRoleOutputWithContext(ctx context.Context) GetTeamRoleOutput {
	return o
}

func (o GetTeamRoleOutput) Abilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTeamRole) []string { return v.Abilities }).(pulumi.StringArrayOutput)
}

// Role is default.
func (o GetTeamRoleOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTeamRole) bool { return v.Default }).(pulumi.BoolOutput)
}

// Role id.
func (o GetTeamRoleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamRole) string { return v.Id }).(pulumi.StringOutput)
}

// Role name.
func (o GetTeamRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamRole) string { return v.Name }).(pulumi.StringOutput)
}

type GetTeamRoleArrayOutput struct{ *pulumi.OutputState }

func (GetTeamRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamRole)(nil)).Elem()
}

func (o GetTeamRoleArrayOutput) ToGetTeamRoleArrayOutput() GetTeamRoleArrayOutput {
	return o
}

func (o GetTeamRoleArrayOutput) ToGetTeamRoleArrayOutputWithContext(ctx context.Context) GetTeamRoleArrayOutput {
	return o
}

func (o GetTeamRoleArrayOutput) Index(i pulumi.IntInput) GetTeamRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTeamRole {
		return vs[0].([]GetTeamRole)[vs[1].(int)]
	}).(GetTeamRoleOutput)
}

type GetUserNotificationRule struct {
	// notification rule delay_minutes, (to be deprecated).
	DelayMinutes int `pulumi:"delayMinutes"`
	// Personal notification rule type.
	Type string `pulumi:"type"`
}

// GetUserNotificationRuleInput is an input type that accepts GetUserNotificationRuleArgs and GetUserNotificationRuleOutput values.
// You can construct a concrete instance of `GetUserNotificationRuleInput` via:
//
//	GetUserNotificationRuleArgs{...}
type GetUserNotificationRuleInput interface {
	pulumi.Input

	ToGetUserNotificationRuleOutput() GetUserNotificationRuleOutput
	ToGetUserNotificationRuleOutputWithContext(context.Context) GetUserNotificationRuleOutput
}

type GetUserNotificationRuleArgs struct {
	// notification rule delay_minutes, (to be deprecated).
	DelayMinutes pulumi.IntInput `pulumi:"delayMinutes"`
	// Personal notification rule type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetUserNotificationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserNotificationRule)(nil)).Elem()
}

func (i GetUserNotificationRuleArgs) ToGetUserNotificationRuleOutput() GetUserNotificationRuleOutput {
	return i.ToGetUserNotificationRuleOutputWithContext(context.Background())
}

func (i GetUserNotificationRuleArgs) ToGetUserNotificationRuleOutputWithContext(ctx context.Context) GetUserNotificationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserNotificationRuleOutput)
}

// GetUserNotificationRuleArrayInput is an input type that accepts GetUserNotificationRuleArray and GetUserNotificationRuleArrayOutput values.
// You can construct a concrete instance of `GetUserNotificationRuleArrayInput` via:
//
//	GetUserNotificationRuleArray{ GetUserNotificationRuleArgs{...} }
type GetUserNotificationRuleArrayInput interface {
	pulumi.Input

	ToGetUserNotificationRuleArrayOutput() GetUserNotificationRuleArrayOutput
	ToGetUserNotificationRuleArrayOutputWithContext(context.Context) GetUserNotificationRuleArrayOutput
}

type GetUserNotificationRuleArray []GetUserNotificationRuleInput

func (GetUserNotificationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserNotificationRule)(nil)).Elem()
}

func (i GetUserNotificationRuleArray) ToGetUserNotificationRuleArrayOutput() GetUserNotificationRuleArrayOutput {
	return i.ToGetUserNotificationRuleArrayOutputWithContext(context.Background())
}

func (i GetUserNotificationRuleArray) ToGetUserNotificationRuleArrayOutputWithContext(ctx context.Context) GetUserNotificationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserNotificationRuleArrayOutput)
}

type GetUserNotificationRuleOutput struct{ *pulumi.OutputState }

func (GetUserNotificationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserNotificationRule)(nil)).Elem()
}

func (o GetUserNotificationRuleOutput) ToGetUserNotificationRuleOutput() GetUserNotificationRuleOutput {
	return o
}

func (o GetUserNotificationRuleOutput) ToGetUserNotificationRuleOutputWithContext(ctx context.Context) GetUserNotificationRuleOutput {
	return o
}

// notification rule delay_minutes, (to be deprecated).
func (o GetUserNotificationRuleOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetUserNotificationRule) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

// Personal notification rule type.
func (o GetUserNotificationRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserNotificationRule) string { return v.Type }).(pulumi.StringOutput)
}

type GetUserNotificationRuleArrayOutput struct{ *pulumi.OutputState }

func (GetUserNotificationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserNotificationRule)(nil)).Elem()
}

func (o GetUserNotificationRuleArrayOutput) ToGetUserNotificationRuleArrayOutput() GetUserNotificationRuleArrayOutput {
	return o
}

func (o GetUserNotificationRuleArrayOutput) ToGetUserNotificationRuleArrayOutputWithContext(ctx context.Context) GetUserNotificationRuleArrayOutput {
	return o
}

func (o GetUserNotificationRuleArrayOutput) Index(i pulumi.IntInput) GetUserNotificationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserNotificationRule {
		return vs[0].([]GetUserNotificationRule)[vs[1].(int)]
	}).(GetUserNotificationRuleOutput)
}

type GetUserOncallReminderRule struct {
	// oncall reminder rule delay_minutes.
	DelayMinutes int `pulumi:"delayMinutes"`
	// oncall reminder rule type.
	Type string `pulumi:"type"`
}

// GetUserOncallReminderRuleInput is an input type that accepts GetUserOncallReminderRuleArgs and GetUserOncallReminderRuleOutput values.
// You can construct a concrete instance of `GetUserOncallReminderRuleInput` via:
//
//	GetUserOncallReminderRuleArgs{...}
type GetUserOncallReminderRuleInput interface {
	pulumi.Input

	ToGetUserOncallReminderRuleOutput() GetUserOncallReminderRuleOutput
	ToGetUserOncallReminderRuleOutputWithContext(context.Context) GetUserOncallReminderRuleOutput
}

type GetUserOncallReminderRuleArgs struct {
	// oncall reminder rule delay_minutes.
	DelayMinutes pulumi.IntInput `pulumi:"delayMinutes"`
	// oncall reminder rule type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetUserOncallReminderRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserOncallReminderRule)(nil)).Elem()
}

func (i GetUserOncallReminderRuleArgs) ToGetUserOncallReminderRuleOutput() GetUserOncallReminderRuleOutput {
	return i.ToGetUserOncallReminderRuleOutputWithContext(context.Background())
}

func (i GetUserOncallReminderRuleArgs) ToGetUserOncallReminderRuleOutputWithContext(ctx context.Context) GetUserOncallReminderRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserOncallReminderRuleOutput)
}

// GetUserOncallReminderRuleArrayInput is an input type that accepts GetUserOncallReminderRuleArray and GetUserOncallReminderRuleArrayOutput values.
// You can construct a concrete instance of `GetUserOncallReminderRuleArrayInput` via:
//
//	GetUserOncallReminderRuleArray{ GetUserOncallReminderRuleArgs{...} }
type GetUserOncallReminderRuleArrayInput interface {
	pulumi.Input

	ToGetUserOncallReminderRuleArrayOutput() GetUserOncallReminderRuleArrayOutput
	ToGetUserOncallReminderRuleArrayOutputWithContext(context.Context) GetUserOncallReminderRuleArrayOutput
}

type GetUserOncallReminderRuleArray []GetUserOncallReminderRuleInput

func (GetUserOncallReminderRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserOncallReminderRule)(nil)).Elem()
}

func (i GetUserOncallReminderRuleArray) ToGetUserOncallReminderRuleArrayOutput() GetUserOncallReminderRuleArrayOutput {
	return i.ToGetUserOncallReminderRuleArrayOutputWithContext(context.Background())
}

func (i GetUserOncallReminderRuleArray) ToGetUserOncallReminderRuleArrayOutputWithContext(ctx context.Context) GetUserOncallReminderRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserOncallReminderRuleArrayOutput)
}

type GetUserOncallReminderRuleOutput struct{ *pulumi.OutputState }

func (GetUserOncallReminderRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserOncallReminderRule)(nil)).Elem()
}

func (o GetUserOncallReminderRuleOutput) ToGetUserOncallReminderRuleOutput() GetUserOncallReminderRuleOutput {
	return o
}

func (o GetUserOncallReminderRuleOutput) ToGetUserOncallReminderRuleOutputWithContext(ctx context.Context) GetUserOncallReminderRuleOutput {
	return o
}

// oncall reminder rule delay_minutes.
func (o GetUserOncallReminderRuleOutput) DelayMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetUserOncallReminderRule) int { return v.DelayMinutes }).(pulumi.IntOutput)
}

// oncall reminder rule type.
func (o GetUserOncallReminderRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserOncallReminderRule) string { return v.Type }).(pulumi.StringOutput)
}

type GetUserOncallReminderRuleArrayOutput struct{ *pulumi.OutputState }

func (GetUserOncallReminderRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserOncallReminderRule)(nil)).Elem()
}

func (o GetUserOncallReminderRuleArrayOutput) ToGetUserOncallReminderRuleArrayOutput() GetUserOncallReminderRuleArrayOutput {
	return o
}

func (o GetUserOncallReminderRuleArrayOutput) ToGetUserOncallReminderRuleArrayOutputWithContext(ctx context.Context) GetUserOncallReminderRuleArrayOutput {
	return o
}

func (o GetUserOncallReminderRuleArrayOutput) Index(i pulumi.IntInput) GetUserOncallReminderRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserOncallReminderRule {
		return vs[0].([]GetUserOncallReminderRule)[vs[1].(int)]
	}).(GetUserOncallReminderRuleOutput)
}

type GetWebformInputField struct {
	// Input field Label.
	Label string `pulumi:"label"`
	// Input field options.
	Options []string `pulumi:"options"`
}

// GetWebformInputFieldInput is an input type that accepts GetWebformInputFieldArgs and GetWebformInputFieldOutput values.
// You can construct a concrete instance of `GetWebformInputFieldInput` via:
//
//	GetWebformInputFieldArgs{...}
type GetWebformInputFieldInput interface {
	pulumi.Input

	ToGetWebformInputFieldOutput() GetWebformInputFieldOutput
	ToGetWebformInputFieldOutputWithContext(context.Context) GetWebformInputFieldOutput
}

type GetWebformInputFieldArgs struct {
	// Input field Label.
	Label pulumi.StringInput `pulumi:"label"`
	// Input field options.
	Options pulumi.StringArrayInput `pulumi:"options"`
}

func (GetWebformInputFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformInputField)(nil)).Elem()
}

func (i GetWebformInputFieldArgs) ToGetWebformInputFieldOutput() GetWebformInputFieldOutput {
	return i.ToGetWebformInputFieldOutputWithContext(context.Background())
}

func (i GetWebformInputFieldArgs) ToGetWebformInputFieldOutputWithContext(ctx context.Context) GetWebformInputFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformInputFieldOutput)
}

// GetWebformInputFieldArrayInput is an input type that accepts GetWebformInputFieldArray and GetWebformInputFieldArrayOutput values.
// You can construct a concrete instance of `GetWebformInputFieldArrayInput` via:
//
//	GetWebformInputFieldArray{ GetWebformInputFieldArgs{...} }
type GetWebformInputFieldArrayInput interface {
	pulumi.Input

	ToGetWebformInputFieldArrayOutput() GetWebformInputFieldArrayOutput
	ToGetWebformInputFieldArrayOutputWithContext(context.Context) GetWebformInputFieldArrayOutput
}

type GetWebformInputFieldArray []GetWebformInputFieldInput

func (GetWebformInputFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformInputField)(nil)).Elem()
}

func (i GetWebformInputFieldArray) ToGetWebformInputFieldArrayOutput() GetWebformInputFieldArrayOutput {
	return i.ToGetWebformInputFieldArrayOutputWithContext(context.Background())
}

func (i GetWebformInputFieldArray) ToGetWebformInputFieldArrayOutputWithContext(ctx context.Context) GetWebformInputFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformInputFieldArrayOutput)
}

type GetWebformInputFieldOutput struct{ *pulumi.OutputState }

func (GetWebformInputFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformInputField)(nil)).Elem()
}

func (o GetWebformInputFieldOutput) ToGetWebformInputFieldOutput() GetWebformInputFieldOutput {
	return o
}

func (o GetWebformInputFieldOutput) ToGetWebformInputFieldOutputWithContext(ctx context.Context) GetWebformInputFieldOutput {
	return o
}

// Input field Label.
func (o GetWebformInputFieldOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformInputField) string { return v.Label }).(pulumi.StringOutput)
}

// Input field options.
func (o GetWebformInputFieldOutput) Options() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWebformInputField) []string { return v.Options }).(pulumi.StringArrayOutput)
}

type GetWebformInputFieldArrayOutput struct{ *pulumi.OutputState }

func (GetWebformInputFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformInputField)(nil)).Elem()
}

func (o GetWebformInputFieldArrayOutput) ToGetWebformInputFieldArrayOutput() GetWebformInputFieldArrayOutput {
	return o
}

func (o GetWebformInputFieldArrayOutput) ToGetWebformInputFieldArrayOutputWithContext(ctx context.Context) GetWebformInputFieldArrayOutput {
	return o
}

func (o GetWebformInputFieldArrayOutput) Index(i pulumi.IntInput) GetWebformInputFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWebformInputField {
		return vs[0].([]GetWebformInputField)[vs[1].(int)]
	}).(GetWebformInputFieldOutput)
}

type GetWebformOwner struct {
	// Form owner id.
	Id string `pulumi:"id"`
	// Form owner name.
	Name string `pulumi:"name"`
	// Form owner type (user, team, squad).
	Type string `pulumi:"type"`
}

// GetWebformOwnerInput is an input type that accepts GetWebformOwnerArgs and GetWebformOwnerOutput values.
// You can construct a concrete instance of `GetWebformOwnerInput` via:
//
//	GetWebformOwnerArgs{...}
type GetWebformOwnerInput interface {
	pulumi.Input

	ToGetWebformOwnerOutput() GetWebformOwnerOutput
	ToGetWebformOwnerOutputWithContext(context.Context) GetWebformOwnerOutput
}

type GetWebformOwnerArgs struct {
	// Form owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Form owner name.
	Name pulumi.StringInput `pulumi:"name"`
	// Form owner type (user, team, squad).
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetWebformOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformOwner)(nil)).Elem()
}

func (i GetWebformOwnerArgs) ToGetWebformOwnerOutput() GetWebformOwnerOutput {
	return i.ToGetWebformOwnerOutputWithContext(context.Background())
}

func (i GetWebformOwnerArgs) ToGetWebformOwnerOutputWithContext(ctx context.Context) GetWebformOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformOwnerOutput)
}

// GetWebformOwnerArrayInput is an input type that accepts GetWebformOwnerArray and GetWebformOwnerArrayOutput values.
// You can construct a concrete instance of `GetWebformOwnerArrayInput` via:
//
//	GetWebformOwnerArray{ GetWebformOwnerArgs{...} }
type GetWebformOwnerArrayInput interface {
	pulumi.Input

	ToGetWebformOwnerArrayOutput() GetWebformOwnerArrayOutput
	ToGetWebformOwnerArrayOutputWithContext(context.Context) GetWebformOwnerArrayOutput
}

type GetWebformOwnerArray []GetWebformOwnerInput

func (GetWebformOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformOwner)(nil)).Elem()
}

func (i GetWebformOwnerArray) ToGetWebformOwnerArrayOutput() GetWebformOwnerArrayOutput {
	return i.ToGetWebformOwnerArrayOutputWithContext(context.Background())
}

func (i GetWebformOwnerArray) ToGetWebformOwnerArrayOutputWithContext(ctx context.Context) GetWebformOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformOwnerArrayOutput)
}

type GetWebformOwnerOutput struct{ *pulumi.OutputState }

func (GetWebformOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformOwner)(nil)).Elem()
}

func (o GetWebformOwnerOutput) ToGetWebformOwnerOutput() GetWebformOwnerOutput {
	return o
}

func (o GetWebformOwnerOutput) ToGetWebformOwnerOutputWithContext(ctx context.Context) GetWebformOwnerOutput {
	return o
}

// Form owner id.
func (o GetWebformOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Form owner name.
func (o GetWebformOwnerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformOwner) string { return v.Name }).(pulumi.StringOutput)
}

// Form owner type (user, team, squad).
func (o GetWebformOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformOwner) string { return v.Type }).(pulumi.StringOutput)
}

type GetWebformOwnerArrayOutput struct{ *pulumi.OutputState }

func (GetWebformOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformOwner)(nil)).Elem()
}

func (o GetWebformOwnerArrayOutput) ToGetWebformOwnerArrayOutput() GetWebformOwnerArrayOutput {
	return o
}

func (o GetWebformOwnerArrayOutput) ToGetWebformOwnerArrayOutputWithContext(ctx context.Context) GetWebformOwnerArrayOutput {
	return o
}

func (o GetWebformOwnerArrayOutput) Index(i pulumi.IntInput) GetWebformOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWebformOwner {
		return vs[0].([]GetWebformOwner)[vs[1].(int)]
	}).(GetWebformOwnerOutput)
}

type GetWebformService struct {
	// Service alias.
	Alias string `pulumi:"alias"`
	// Service name.
	Name string `pulumi:"name"`
	// Service ID.
	ServiceId string `pulumi:"serviceId"`
}

// GetWebformServiceInput is an input type that accepts GetWebformServiceArgs and GetWebformServiceOutput values.
// You can construct a concrete instance of `GetWebformServiceInput` via:
//
//	GetWebformServiceArgs{...}
type GetWebformServiceInput interface {
	pulumi.Input

	ToGetWebformServiceOutput() GetWebformServiceOutput
	ToGetWebformServiceOutputWithContext(context.Context) GetWebformServiceOutput
}

type GetWebformServiceArgs struct {
	// Service alias.
	Alias pulumi.StringInput `pulumi:"alias"`
	// Service name.
	Name pulumi.StringInput `pulumi:"name"`
	// Service ID.
	ServiceId pulumi.StringInput `pulumi:"serviceId"`
}

func (GetWebformServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformService)(nil)).Elem()
}

func (i GetWebformServiceArgs) ToGetWebformServiceOutput() GetWebformServiceOutput {
	return i.ToGetWebformServiceOutputWithContext(context.Background())
}

func (i GetWebformServiceArgs) ToGetWebformServiceOutputWithContext(ctx context.Context) GetWebformServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformServiceOutput)
}

// GetWebformServiceArrayInput is an input type that accepts GetWebformServiceArray and GetWebformServiceArrayOutput values.
// You can construct a concrete instance of `GetWebformServiceArrayInput` via:
//
//	GetWebformServiceArray{ GetWebformServiceArgs{...} }
type GetWebformServiceArrayInput interface {
	pulumi.Input

	ToGetWebformServiceArrayOutput() GetWebformServiceArrayOutput
	ToGetWebformServiceArrayOutputWithContext(context.Context) GetWebformServiceArrayOutput
}

type GetWebformServiceArray []GetWebformServiceInput

func (GetWebformServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformService)(nil)).Elem()
}

func (i GetWebformServiceArray) ToGetWebformServiceArrayOutput() GetWebformServiceArrayOutput {
	return i.ToGetWebformServiceArrayOutputWithContext(context.Background())
}

func (i GetWebformServiceArray) ToGetWebformServiceArrayOutputWithContext(ctx context.Context) GetWebformServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformServiceArrayOutput)
}

type GetWebformServiceOutput struct{ *pulumi.OutputState }

func (GetWebformServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformService)(nil)).Elem()
}

func (o GetWebformServiceOutput) ToGetWebformServiceOutput() GetWebformServiceOutput {
	return o
}

func (o GetWebformServiceOutput) ToGetWebformServiceOutputWithContext(ctx context.Context) GetWebformServiceOutput {
	return o
}

// Service alias.
func (o GetWebformServiceOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformService) string { return v.Alias }).(pulumi.StringOutput)
}

// Service name.
func (o GetWebformServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformService) string { return v.Name }).(pulumi.StringOutput)
}

// Service ID.
func (o GetWebformServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformService) string { return v.ServiceId }).(pulumi.StringOutput)
}

type GetWebformServiceArrayOutput struct{ *pulumi.OutputState }

func (GetWebformServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformService)(nil)).Elem()
}

func (o GetWebformServiceArrayOutput) ToGetWebformServiceArrayOutput() GetWebformServiceArrayOutput {
	return o
}

func (o GetWebformServiceArrayOutput) ToGetWebformServiceArrayOutputWithContext(ctx context.Context) GetWebformServiceArrayOutput {
	return o
}

func (o GetWebformServiceArrayOutput) Index(i pulumi.IntInput) GetWebformServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWebformService {
		return vs[0].([]GetWebformService)[vs[1].(int)]
	}).(GetWebformServiceOutput)
}

type GetWebformSeverity struct {
	// Severity description.
	Description string `pulumi:"description"`
	// Severity type.
	Type string `pulumi:"type"`
}

// GetWebformSeverityInput is an input type that accepts GetWebformSeverityArgs and GetWebformSeverityOutput values.
// You can construct a concrete instance of `GetWebformSeverityInput` via:
//
//	GetWebformSeverityArgs{...}
type GetWebformSeverityInput interface {
	pulumi.Input

	ToGetWebformSeverityOutput() GetWebformSeverityOutput
	ToGetWebformSeverityOutputWithContext(context.Context) GetWebformSeverityOutput
}

type GetWebformSeverityArgs struct {
	// Severity description.
	Description pulumi.StringInput `pulumi:"description"`
	// Severity type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetWebformSeverityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformSeverity)(nil)).Elem()
}

func (i GetWebformSeverityArgs) ToGetWebformSeverityOutput() GetWebformSeverityOutput {
	return i.ToGetWebformSeverityOutputWithContext(context.Background())
}

func (i GetWebformSeverityArgs) ToGetWebformSeverityOutputWithContext(ctx context.Context) GetWebformSeverityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformSeverityOutput)
}

// GetWebformSeverityArrayInput is an input type that accepts GetWebformSeverityArray and GetWebformSeverityArrayOutput values.
// You can construct a concrete instance of `GetWebformSeverityArrayInput` via:
//
//	GetWebformSeverityArray{ GetWebformSeverityArgs{...} }
type GetWebformSeverityArrayInput interface {
	pulumi.Input

	ToGetWebformSeverityArrayOutput() GetWebformSeverityArrayOutput
	ToGetWebformSeverityArrayOutputWithContext(context.Context) GetWebformSeverityArrayOutput
}

type GetWebformSeverityArray []GetWebformSeverityInput

func (GetWebformSeverityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformSeverity)(nil)).Elem()
}

func (i GetWebformSeverityArray) ToGetWebformSeverityArrayOutput() GetWebformSeverityArrayOutput {
	return i.ToGetWebformSeverityArrayOutputWithContext(context.Background())
}

func (i GetWebformSeverityArray) ToGetWebformSeverityArrayOutputWithContext(ctx context.Context) GetWebformSeverityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWebformSeverityArrayOutput)
}

type GetWebformSeverityOutput struct{ *pulumi.OutputState }

func (GetWebformSeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWebformSeverity)(nil)).Elem()
}

func (o GetWebformSeverityOutput) ToGetWebformSeverityOutput() GetWebformSeverityOutput {
	return o
}

func (o GetWebformSeverityOutput) ToGetWebformSeverityOutputWithContext(ctx context.Context) GetWebformSeverityOutput {
	return o
}

// Severity description.
func (o GetWebformSeverityOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformSeverity) string { return v.Description }).(pulumi.StringOutput)
}

// Severity type.
func (o GetWebformSeverityOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetWebformSeverity) string { return v.Type }).(pulumi.StringOutput)
}

type GetWebformSeverityArrayOutput struct{ *pulumi.OutputState }

func (GetWebformSeverityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWebformSeverity)(nil)).Elem()
}

func (o GetWebformSeverityArrayOutput) ToGetWebformSeverityArrayOutput() GetWebformSeverityArrayOutput {
	return o
}

func (o GetWebformSeverityArrayOutput) ToGetWebformSeverityArrayOutputWithContext(ctx context.Context) GetWebformSeverityArrayOutput {
	return o
}

func (o GetWebformSeverityArrayOutput) Index(i pulumi.IntInput) GetWebformSeverityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWebformSeverity {
		return vs[0].([]GetWebformSeverity)[vs[1].(int)]
	}).(GetWebformSeverityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GerEntityOwnerInput)(nil)).Elem(), GerEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GerEntityOwnerPtrInput)(nil)).Elem(), GerEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunbookEntityOwnerInput)(nil)).Elem(), RunbookEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunbookEntityOwnerPtrInput)(nil)).Elem(), RunbookEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunbookStepInput)(nil)).Elem(), RunbookStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RunbookStepArrayInput)(nil)).Elem(), RunbookStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMaintainerInput)(nil)).Elem(), ServiceMaintainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMaintainerPtrInput)(nil)).Elem(), ServiceMaintainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTagInput)(nil)).Elem(), ServiceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTagArrayInput)(nil)).Elem(), ServiceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloEntityOwnerInput)(nil)).Elem(), SloEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloEntityOwnerPtrInput)(nil)).Elem(), SloEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloNotifyInput)(nil)).Elem(), SloNotifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloNotifyPtrInput)(nil)).Elem(), SloNotifyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloRuleInput)(nil)).Elem(), SloRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SloRuleArrayInput)(nil)).Elem(), SloRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebformInputFieldInput)(nil)).Elem(), WebformInputFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebformInputFieldArrayInput)(nil)).Elem(), WebformInputFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebformOwnerInput)(nil)).Elem(), WebformOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebformOwnerPtrInput)(nil)).Elem(), WebformOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebformServiceInput)(nil)).Elem(), WebformServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebformServiceArrayInput)(nil)).Elem(), WebformServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebformSeverityInput)(nil)).Elem(), WebformSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebformSeverityArrayInput)(nil)).Elem(), WebformSeverityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowEntityOwnerInput)(nil)).Elem(), WorkflowEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowEntityOwnerArrayInput)(nil)).Elem(), WorkflowEntityOwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowFiltersInput)(nil)).Elem(), WorkflowFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowFiltersPtrInput)(nil)).Elem(), WorkflowFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowFiltersFilterInput)(nil)).Elem(), WorkflowFiltersFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowFiltersFilterArrayInput)(nil)).Elem(), WorkflowFiltersFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowFiltersFilterFilterInput)(nil)).Elem(), WorkflowFiltersFilterFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowFiltersFilterFilterArrayInput)(nil)).Elem(), WorkflowFiltersFilterFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTagInput)(nil)).Elem(), WorkflowTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTagArrayInput)(nil)).Elem(), WorkflowTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRunbookEntityOwnerInput)(nil)).Elem(), GetRunbookEntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRunbookEntityOwnerArrayInput)(nil)).Elem(), GetRunbookEntityOwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRunbookStepInput)(nil)).Elem(), GetRunbookStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRunbookStepArrayInput)(nil)).Elem(), GetRunbookStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceMaintainerInput)(nil)).Elem(), GetServiceMaintainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceMaintainerArrayInput)(nil)).Elem(), GetServiceMaintainerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTagInput)(nil)).Elem(), GetServiceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTagArrayInput)(nil)).Elem(), GetServiceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamMemberInput)(nil)).Elem(), GetTeamMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamMemberArrayInput)(nil)).Elem(), GetTeamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamRoleInput)(nil)).Elem(), GetTeamRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamRoleArrayInput)(nil)).Elem(), GetTeamRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserNotificationRuleInput)(nil)).Elem(), GetUserNotificationRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserNotificationRuleArrayInput)(nil)).Elem(), GetUserNotificationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserOncallReminderRuleInput)(nil)).Elem(), GetUserOncallReminderRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserOncallReminderRuleArrayInput)(nil)).Elem(), GetUserOncallReminderRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformInputFieldInput)(nil)).Elem(), GetWebformInputFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformInputFieldArrayInput)(nil)).Elem(), GetWebformInputFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformOwnerInput)(nil)).Elem(), GetWebformOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformOwnerArrayInput)(nil)).Elem(), GetWebformOwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformServiceInput)(nil)).Elem(), GetWebformServiceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformServiceArrayInput)(nil)).Elem(), GetWebformServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformSeverityInput)(nil)).Elem(), GetWebformSeverityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWebformSeverityArrayInput)(nil)).Elem(), GetWebformSeverityArray{})
	pulumi.RegisterOutputType(GerEntityOwnerOutput{})
	pulumi.RegisterOutputType(GerEntityOwnerPtrOutput{})
	pulumi.RegisterOutputType(RunbookEntityOwnerOutput{})
	pulumi.RegisterOutputType(RunbookEntityOwnerPtrOutput{})
	pulumi.RegisterOutputType(RunbookStepOutput{})
	pulumi.RegisterOutputType(RunbookStepArrayOutput{})
	pulumi.RegisterOutputType(ServiceMaintainerOutput{})
	pulumi.RegisterOutputType(ServiceMaintainerPtrOutput{})
	pulumi.RegisterOutputType(ServiceTagOutput{})
	pulumi.RegisterOutputType(ServiceTagArrayOutput{})
	pulumi.RegisterOutputType(SloEntityOwnerOutput{})
	pulumi.RegisterOutputType(SloEntityOwnerPtrOutput{})
	pulumi.RegisterOutputType(SloNotifyOutput{})
	pulumi.RegisterOutputType(SloNotifyPtrOutput{})
	pulumi.RegisterOutputType(SloRuleOutput{})
	pulumi.RegisterOutputType(SloRuleArrayOutput{})
	pulumi.RegisterOutputType(WebformInputFieldOutput{})
	pulumi.RegisterOutputType(WebformInputFieldArrayOutput{})
	pulumi.RegisterOutputType(WebformOwnerOutput{})
	pulumi.RegisterOutputType(WebformOwnerPtrOutput{})
	pulumi.RegisterOutputType(WebformServiceOutput{})
	pulumi.RegisterOutputType(WebformServiceArrayOutput{})
	pulumi.RegisterOutputType(WebformSeverityOutput{})
	pulumi.RegisterOutputType(WebformSeverityArrayOutput{})
	pulumi.RegisterOutputType(WorkflowEntityOwnerOutput{})
	pulumi.RegisterOutputType(WorkflowEntityOwnerArrayOutput{})
	pulumi.RegisterOutputType(WorkflowFiltersOutput{})
	pulumi.RegisterOutputType(WorkflowFiltersPtrOutput{})
	pulumi.RegisterOutputType(WorkflowFiltersFilterOutput{})
	pulumi.RegisterOutputType(WorkflowFiltersFilterArrayOutput{})
	pulumi.RegisterOutputType(WorkflowFiltersFilterFilterOutput{})
	pulumi.RegisterOutputType(WorkflowFiltersFilterFilterArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTagOutput{})
	pulumi.RegisterOutputType(WorkflowTagArrayOutput{})
	pulumi.RegisterOutputType(GetRunbookEntityOwnerOutput{})
	pulumi.RegisterOutputType(GetRunbookEntityOwnerArrayOutput{})
	pulumi.RegisterOutputType(GetRunbookStepOutput{})
	pulumi.RegisterOutputType(GetRunbookStepArrayOutput{})
	pulumi.RegisterOutputType(GetServiceMaintainerOutput{})
	pulumi.RegisterOutputType(GetServiceMaintainerArrayOutput{})
	pulumi.RegisterOutputType(GetServiceTagOutput{})
	pulumi.RegisterOutputType(GetServiceTagArrayOutput{})
	pulumi.RegisterOutputType(GetTeamMemberOutput{})
	pulumi.RegisterOutputType(GetTeamMemberArrayOutput{})
	pulumi.RegisterOutputType(GetTeamRoleOutput{})
	pulumi.RegisterOutputType(GetTeamRoleArrayOutput{})
	pulumi.RegisterOutputType(GetUserNotificationRuleOutput{})
	pulumi.RegisterOutputType(GetUserNotificationRuleArrayOutput{})
	pulumi.RegisterOutputType(GetUserOncallReminderRuleOutput{})
	pulumi.RegisterOutputType(GetUserOncallReminderRuleArrayOutput{})
	pulumi.RegisterOutputType(GetWebformInputFieldOutput{})
	pulumi.RegisterOutputType(GetWebformInputFieldArrayOutput{})
	pulumi.RegisterOutputType(GetWebformOwnerOutput{})
	pulumi.RegisterOutputType(GetWebformOwnerArrayOutput{})
	pulumi.RegisterOutputType(GetWebformServiceOutput{})
	pulumi.RegisterOutputType(GetWebformServiceArrayOutput{})
	pulumi.RegisterOutputType(GetWebformSeverityOutput{})
	pulumi.RegisterOutputType(GetWebformSeverityArrayOutput{})
}
