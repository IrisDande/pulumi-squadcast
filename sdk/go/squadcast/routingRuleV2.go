// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [Routing rules](https://support.squadcast.com/docs/alert-routing) allows you to ensure that alerts are routed to the right responder with the help of `event tags` attached to them.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTeam, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "example team name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleUser, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "test@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleService, err := squadcast.LookupService(ctx, &squadcast.LookupServiceArgs{
//				Name:   "example service name",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.LookupEscalationPolicy(ctx, &squadcast.LookupEscalationPolicyArgs{
//				Name:   "example escalation policy name",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.LookupSquad(ctx, &squadcast.LookupSquadArgs{
//				Name:   "example squad name",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.NewRoutingRuleV2(ctx, "exampleRoutingRules", &squadcast.RoutingRuleV2Args{
//				ServiceId:   pulumi.String(exampleService.Id),
//				IsBasic:     pulumi.Bool(false),
//				Expression:  pulumi.String("payload[\"event_id\"] == 40"),
//				RouteToId:   pulumi.String(exampleUser.Id),
//				RouteToType: pulumi.String("user"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.NewRoutingRuleV2(ctx, "exampleRoutingRulesBasic", &squadcast.RoutingRuleV2Args{
//				ServiceId: pulumi.String(exampleService.Id),
//				IsBasic:   pulumi.Bool(true),
//				BasicExpressions: squadcast.RoutingRuleV2BasicExpressionArray{
//					&squadcast.RoutingRuleV2BasicExpressionArgs{
//						Lhs: pulumi.String("payload[\"foo\"]"),
//						Rhs: pulumi.String("bar"),
//					},
//				},
//				RouteToId:   pulumi.Any(data.Squadcast_user.Example_escalaion_policy.Id),
//				RouteToType: pulumi.String("escalationpolicy"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// serviceID:ruleID
//
// ```sh
// $ pulumi import squadcast:index/routingRuleV2:RoutingRuleV2 test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
// ```
type RoutingRuleV2 struct {
	pulumi.CustomResourceState

	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions RoutingRuleV2BasicExpressionArrayOutput `pulumi:"basicExpressions"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression pulumi.StringPtrOutput `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic pulumi.BoolOutput `pulumi:"isBasic"`
	// The id of the entity (user, escalation policy, squad) for which we are routing this incident.
	RouteToId pulumi.StringOutput `pulumi:"routeToId"`
	// Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
	RouteToType pulumi.StringOutput `pulumi:"routeToType"`
	// Service id.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewRoutingRuleV2 registers a new resource with the given unique name, arguments, and options.
func NewRoutingRuleV2(ctx *pulumi.Context,
	name string, args *RoutingRuleV2Args, opts ...pulumi.ResourceOption) (*RoutingRuleV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IsBasic == nil {
		return nil, errors.New("invalid value for required argument 'IsBasic'")
	}
	if args.RouteToId == nil {
		return nil, errors.New("invalid value for required argument 'RouteToId'")
	}
	if args.RouteToType == nil {
		return nil, errors.New("invalid value for required argument 'RouteToType'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoutingRuleV2
	err := ctx.RegisterResource("squadcast:index/routingRuleV2:RoutingRuleV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutingRuleV2 gets an existing RoutingRuleV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutingRuleV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutingRuleV2State, opts ...pulumi.ResourceOption) (*RoutingRuleV2, error) {
	var resource RoutingRuleV2
	err := ctx.ReadResource("squadcast:index/routingRuleV2:RoutingRuleV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoutingRuleV2 resources.
type routingRuleV2State struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions []RoutingRuleV2BasicExpression `pulumi:"basicExpressions"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression *string `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic *bool `pulumi:"isBasic"`
	// The id of the entity (user, escalation policy, squad) for which we are routing this incident.
	RouteToId *string `pulumi:"routeToId"`
	// Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
	RouteToType *string `pulumi:"routeToType"`
	// Service id.
	ServiceId *string `pulumi:"serviceId"`
}

type RoutingRuleV2State struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions RoutingRuleV2BasicExpressionArrayInput
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression pulumi.StringPtrInput
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic pulumi.BoolPtrInput
	// The id of the entity (user, escalation policy, squad) for which we are routing this incident.
	RouteToId pulumi.StringPtrInput
	// Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
	RouteToType pulumi.StringPtrInput
	// Service id.
	ServiceId pulumi.StringPtrInput
}

func (RoutingRuleV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*routingRuleV2State)(nil)).Elem()
}

type routingRuleV2Args struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions []RoutingRuleV2BasicExpression `pulumi:"basicExpressions"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression *string `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic bool `pulumi:"isBasic"`
	// The id of the entity (user, escalation policy, squad) for which we are routing this incident.
	RouteToId string `pulumi:"routeToId"`
	// Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
	RouteToType string `pulumi:"routeToType"`
	// Service id.
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a RoutingRuleV2 resource.
type RoutingRuleV2Args struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions RoutingRuleV2BasicExpressionArrayInput
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression pulumi.StringPtrInput
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic pulumi.BoolInput
	// The id of the entity (user, escalation policy, squad) for which we are routing this incident.
	RouteToId pulumi.StringInput
	// Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
	RouteToType pulumi.StringInput
	// Service id.
	ServiceId pulumi.StringInput
}

func (RoutingRuleV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*routingRuleV2Args)(nil)).Elem()
}

type RoutingRuleV2Input interface {
	pulumi.Input

	ToRoutingRuleV2Output() RoutingRuleV2Output
	ToRoutingRuleV2OutputWithContext(ctx context.Context) RoutingRuleV2Output
}

func (*RoutingRuleV2) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingRuleV2)(nil)).Elem()
}

func (i *RoutingRuleV2) ToRoutingRuleV2Output() RoutingRuleV2Output {
	return i.ToRoutingRuleV2OutputWithContext(context.Background())
}

func (i *RoutingRuleV2) ToRoutingRuleV2OutputWithContext(ctx context.Context) RoutingRuleV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRuleV2Output)
}

// RoutingRuleV2ArrayInput is an input type that accepts RoutingRuleV2Array and RoutingRuleV2ArrayOutput values.
// You can construct a concrete instance of `RoutingRuleV2ArrayInput` via:
//
//	RoutingRuleV2Array{ RoutingRuleV2Args{...} }
type RoutingRuleV2ArrayInput interface {
	pulumi.Input

	ToRoutingRuleV2ArrayOutput() RoutingRuleV2ArrayOutput
	ToRoutingRuleV2ArrayOutputWithContext(context.Context) RoutingRuleV2ArrayOutput
}

type RoutingRuleV2Array []RoutingRuleV2Input

func (RoutingRuleV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutingRuleV2)(nil)).Elem()
}

func (i RoutingRuleV2Array) ToRoutingRuleV2ArrayOutput() RoutingRuleV2ArrayOutput {
	return i.ToRoutingRuleV2ArrayOutputWithContext(context.Background())
}

func (i RoutingRuleV2Array) ToRoutingRuleV2ArrayOutputWithContext(ctx context.Context) RoutingRuleV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRuleV2ArrayOutput)
}

// RoutingRuleV2MapInput is an input type that accepts RoutingRuleV2Map and RoutingRuleV2MapOutput values.
// You can construct a concrete instance of `RoutingRuleV2MapInput` via:
//
//	RoutingRuleV2Map{ "key": RoutingRuleV2Args{...} }
type RoutingRuleV2MapInput interface {
	pulumi.Input

	ToRoutingRuleV2MapOutput() RoutingRuleV2MapOutput
	ToRoutingRuleV2MapOutputWithContext(context.Context) RoutingRuleV2MapOutput
}

type RoutingRuleV2Map map[string]RoutingRuleV2Input

func (RoutingRuleV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutingRuleV2)(nil)).Elem()
}

func (i RoutingRuleV2Map) ToRoutingRuleV2MapOutput() RoutingRuleV2MapOutput {
	return i.ToRoutingRuleV2MapOutputWithContext(context.Background())
}

func (i RoutingRuleV2Map) ToRoutingRuleV2MapOutputWithContext(ctx context.Context) RoutingRuleV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutingRuleV2MapOutput)
}

type RoutingRuleV2Output struct{ *pulumi.OutputState }

func (RoutingRuleV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutingRuleV2)(nil)).Elem()
}

func (o RoutingRuleV2Output) ToRoutingRuleV2Output() RoutingRuleV2Output {
	return o
}

func (o RoutingRuleV2Output) ToRoutingRuleV2OutputWithContext(ctx context.Context) RoutingRuleV2Output {
	return o
}

// The basic expression which needs to be evaluated to be true for this rule to apply.
func (o RoutingRuleV2Output) BasicExpressions() RoutingRuleV2BasicExpressionArrayOutput {
	return o.ApplyT(func(v *RoutingRuleV2) RoutingRuleV2BasicExpressionArrayOutput { return v.BasicExpressions }).(RoutingRuleV2BasicExpressionArrayOutput)
}

// The expression which needs to be evaluated to be true for this rule to apply.
func (o RoutingRuleV2Output) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutingRuleV2) pulumi.StringPtrOutput { return v.Expression }).(pulumi.StringPtrOutput)
}

// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
func (o RoutingRuleV2Output) IsBasic() pulumi.BoolOutput {
	return o.ApplyT(func(v *RoutingRuleV2) pulumi.BoolOutput { return v.IsBasic }).(pulumi.BoolOutput)
}

// The id of the entity (user, escalation policy, squad) for which we are routing this incident.
func (o RoutingRuleV2Output) RouteToId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingRuleV2) pulumi.StringOutput { return v.RouteToId }).(pulumi.StringOutput)
}

// Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
func (o RoutingRuleV2Output) RouteToType() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingRuleV2) pulumi.StringOutput { return v.RouteToType }).(pulumi.StringOutput)
}

// Service id.
func (o RoutingRuleV2Output) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutingRuleV2) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type RoutingRuleV2ArrayOutput struct{ *pulumi.OutputState }

func (RoutingRuleV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutingRuleV2)(nil)).Elem()
}

func (o RoutingRuleV2ArrayOutput) ToRoutingRuleV2ArrayOutput() RoutingRuleV2ArrayOutput {
	return o
}

func (o RoutingRuleV2ArrayOutput) ToRoutingRuleV2ArrayOutputWithContext(ctx context.Context) RoutingRuleV2ArrayOutput {
	return o
}

func (o RoutingRuleV2ArrayOutput) Index(i pulumi.IntInput) RoutingRuleV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoutingRuleV2 {
		return vs[0].([]*RoutingRuleV2)[vs[1].(int)]
	}).(RoutingRuleV2Output)
}

type RoutingRuleV2MapOutput struct{ *pulumi.OutputState }

func (RoutingRuleV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutingRuleV2)(nil)).Elem()
}

func (o RoutingRuleV2MapOutput) ToRoutingRuleV2MapOutput() RoutingRuleV2MapOutput {
	return o
}

func (o RoutingRuleV2MapOutput) ToRoutingRuleV2MapOutputWithContext(ctx context.Context) RoutingRuleV2MapOutput {
	return o
}

func (o RoutingRuleV2MapOutput) MapIndex(k pulumi.StringInput) RoutingRuleV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoutingRuleV2 {
		return vs[0].(map[string]*RoutingRuleV2)[vs[1].(string)]
	}).(RoutingRuleV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingRuleV2Input)(nil)).Elem(), &RoutingRuleV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingRuleV2ArrayInput)(nil)).Elem(), RoutingRuleV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutingRuleV2MapInput)(nil)).Elem(), RoutingRuleV2Map{})
	pulumi.RegisterOutputType(RoutingRuleV2Output{})
	pulumi.RegisterOutputType(RoutingRuleV2ArrayOutput{})
	pulumi.RegisterOutputType(RoutingRuleV2MapOutput{})
}
