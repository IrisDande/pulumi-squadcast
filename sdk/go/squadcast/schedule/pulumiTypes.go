// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package schedule

import (
	"context"
	"reflect"

	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type V2EntityOwner struct {
	// Schedule owner id.
	Id string `pulumi:"id"`
	// Schedule owner type. Supported values are 'user' or 'squad'.
	Type string `pulumi:"type"`
}

// V2EntityOwnerInput is an input type that accepts V2EntityOwnerArgs and V2EntityOwnerOutput values.
// You can construct a concrete instance of `V2EntityOwnerInput` via:
//
//	V2EntityOwnerArgs{...}
type V2EntityOwnerInput interface {
	pulumi.Input

	ToV2EntityOwnerOutput() V2EntityOwnerOutput
	ToV2EntityOwnerOutputWithContext(context.Context) V2EntityOwnerOutput
}

type V2EntityOwnerArgs struct {
	// Schedule owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Schedule owner type. Supported values are 'user' or 'squad'.
	Type pulumi.StringInput `pulumi:"type"`
}

func (V2EntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*V2EntityOwner)(nil)).Elem()
}

func (i V2EntityOwnerArgs) ToV2EntityOwnerOutput() V2EntityOwnerOutput {
	return i.ToV2EntityOwnerOutputWithContext(context.Background())
}

func (i V2EntityOwnerArgs) ToV2EntityOwnerOutputWithContext(ctx context.Context) V2EntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2EntityOwnerOutput)
}

func (i V2EntityOwnerArgs) ToV2EntityOwnerPtrOutput() V2EntityOwnerPtrOutput {
	return i.ToV2EntityOwnerPtrOutputWithContext(context.Background())
}

func (i V2EntityOwnerArgs) ToV2EntityOwnerPtrOutputWithContext(ctx context.Context) V2EntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2EntityOwnerOutput).ToV2EntityOwnerPtrOutputWithContext(ctx)
}

// V2EntityOwnerPtrInput is an input type that accepts V2EntityOwnerArgs, V2EntityOwnerPtr and V2EntityOwnerPtrOutput values.
// You can construct a concrete instance of `V2EntityOwnerPtrInput` via:
//
//	        V2EntityOwnerArgs{...}
//
//	or:
//
//	        nil
type V2EntityOwnerPtrInput interface {
	pulumi.Input

	ToV2EntityOwnerPtrOutput() V2EntityOwnerPtrOutput
	ToV2EntityOwnerPtrOutputWithContext(context.Context) V2EntityOwnerPtrOutput
}

type v2entityOwnerPtrType V2EntityOwnerArgs

func V2EntityOwnerPtr(v *V2EntityOwnerArgs) V2EntityOwnerPtrInput {
	return (*v2entityOwnerPtrType)(v)
}

func (*v2entityOwnerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**V2EntityOwner)(nil)).Elem()
}

func (i *v2entityOwnerPtrType) ToV2EntityOwnerPtrOutput() V2EntityOwnerPtrOutput {
	return i.ToV2EntityOwnerPtrOutputWithContext(context.Background())
}

func (i *v2entityOwnerPtrType) ToV2EntityOwnerPtrOutputWithContext(ctx context.Context) V2EntityOwnerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2EntityOwnerPtrOutput)
}

type V2EntityOwnerOutput struct{ *pulumi.OutputState }

func (V2EntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*V2EntityOwner)(nil)).Elem()
}

func (o V2EntityOwnerOutput) ToV2EntityOwnerOutput() V2EntityOwnerOutput {
	return o
}

func (o V2EntityOwnerOutput) ToV2EntityOwnerOutputWithContext(ctx context.Context) V2EntityOwnerOutput {
	return o
}

func (o V2EntityOwnerOutput) ToV2EntityOwnerPtrOutput() V2EntityOwnerPtrOutput {
	return o.ToV2EntityOwnerPtrOutputWithContext(context.Background())
}

func (o V2EntityOwnerOutput) ToV2EntityOwnerPtrOutputWithContext(ctx context.Context) V2EntityOwnerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v V2EntityOwner) *V2EntityOwner {
		return &v
	}).(V2EntityOwnerPtrOutput)
}

// Schedule owner id.
func (o V2EntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v V2EntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Schedule owner type. Supported values are 'user' or 'squad'.
func (o V2EntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v V2EntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type V2EntityOwnerPtrOutput struct{ *pulumi.OutputState }

func (V2EntityOwnerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**V2EntityOwner)(nil)).Elem()
}

func (o V2EntityOwnerPtrOutput) ToV2EntityOwnerPtrOutput() V2EntityOwnerPtrOutput {
	return o
}

func (o V2EntityOwnerPtrOutput) ToV2EntityOwnerPtrOutputWithContext(ctx context.Context) V2EntityOwnerPtrOutput {
	return o
}

func (o V2EntityOwnerPtrOutput) Elem() V2EntityOwnerOutput {
	return o.ApplyT(func(v *V2EntityOwner) V2EntityOwner {
		if v != nil {
			return *v
		}
		var ret V2EntityOwner
		return ret
	}).(V2EntityOwnerOutput)
}

// Schedule owner id.
func (o V2EntityOwnerPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2EntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.StringPtrOutput)
}

// Schedule owner type. Supported values are 'user' or 'squad'.
func (o V2EntityOwnerPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2EntityOwner) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type V2Tag struct {
	// Schedule tag color.
	Color *string `pulumi:"color"`
	// Schedule tag key.
	Key string `pulumi:"key"`
	// Schedule tag value.
	Value string `pulumi:"value"`
}

// V2TagInput is an input type that accepts V2TagArgs and V2TagOutput values.
// You can construct a concrete instance of `V2TagInput` via:
//
//	V2TagArgs{...}
type V2TagInput interface {
	pulumi.Input

	ToV2TagOutput() V2TagOutput
	ToV2TagOutputWithContext(context.Context) V2TagOutput
}

type V2TagArgs struct {
	// Schedule tag color.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Schedule tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// Schedule tag value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (V2TagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*V2Tag)(nil)).Elem()
}

func (i V2TagArgs) ToV2TagOutput() V2TagOutput {
	return i.ToV2TagOutputWithContext(context.Background())
}

func (i V2TagArgs) ToV2TagOutputWithContext(ctx context.Context) V2TagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2TagOutput)
}

// V2TagArrayInput is an input type that accepts V2TagArray and V2TagArrayOutput values.
// You can construct a concrete instance of `V2TagArrayInput` via:
//
//	V2TagArray{ V2TagArgs{...} }
type V2TagArrayInput interface {
	pulumi.Input

	ToV2TagArrayOutput() V2TagArrayOutput
	ToV2TagArrayOutputWithContext(context.Context) V2TagArrayOutput
}

type V2TagArray []V2TagInput

func (V2TagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]V2Tag)(nil)).Elem()
}

func (i V2TagArray) ToV2TagArrayOutput() V2TagArrayOutput {
	return i.ToV2TagArrayOutputWithContext(context.Background())
}

func (i V2TagArray) ToV2TagArrayOutputWithContext(ctx context.Context) V2TagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2TagArrayOutput)
}

type V2TagOutput struct{ *pulumi.OutputState }

func (V2TagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*V2Tag)(nil)).Elem()
}

func (o V2TagOutput) ToV2TagOutput() V2TagOutput {
	return o
}

func (o V2TagOutput) ToV2TagOutputWithContext(ctx context.Context) V2TagOutput {
	return o
}

// Schedule tag color.
func (o V2TagOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v V2Tag) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Schedule tag key.
func (o V2TagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v V2Tag) string { return v.Key }).(pulumi.StringOutput)
}

// Schedule tag value.
func (o V2TagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v V2Tag) string { return v.Value }).(pulumi.StringOutput)
}

type V2TagArrayOutput struct{ *pulumi.OutputState }

func (V2TagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]V2Tag)(nil)).Elem()
}

func (o V2TagArrayOutput) ToV2TagArrayOutput() V2TagArrayOutput {
	return o
}

func (o V2TagArrayOutput) ToV2TagArrayOutputWithContext(ctx context.Context) V2TagArrayOutput {
	return o
}

func (o V2TagArrayOutput) Index(i pulumi.IntInput) V2TagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) V2Tag {
		return vs[0].([]V2Tag)[vs[1].(int)]
	}).(V2TagOutput)
}

type GetV2EntityOwner struct {
	// Schedule owner id.
	Id string `pulumi:"id"`
	// Schedule owner type (user, team, squad).
	Type string `pulumi:"type"`
}

// GetV2EntityOwnerInput is an input type that accepts GetV2EntityOwnerArgs and GetV2EntityOwnerOutput values.
// You can construct a concrete instance of `GetV2EntityOwnerInput` via:
//
//	GetV2EntityOwnerArgs{...}
type GetV2EntityOwnerInput interface {
	pulumi.Input

	ToGetV2EntityOwnerOutput() GetV2EntityOwnerOutput
	ToGetV2EntityOwnerOutputWithContext(context.Context) GetV2EntityOwnerOutput
}

type GetV2EntityOwnerArgs struct {
	// Schedule owner id.
	Id pulumi.StringInput `pulumi:"id"`
	// Schedule owner type (user, team, squad).
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetV2EntityOwnerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetV2EntityOwner)(nil)).Elem()
}

func (i GetV2EntityOwnerArgs) ToGetV2EntityOwnerOutput() GetV2EntityOwnerOutput {
	return i.ToGetV2EntityOwnerOutputWithContext(context.Background())
}

func (i GetV2EntityOwnerArgs) ToGetV2EntityOwnerOutputWithContext(ctx context.Context) GetV2EntityOwnerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetV2EntityOwnerOutput)
}

// GetV2EntityOwnerArrayInput is an input type that accepts GetV2EntityOwnerArray and GetV2EntityOwnerArrayOutput values.
// You can construct a concrete instance of `GetV2EntityOwnerArrayInput` via:
//
//	GetV2EntityOwnerArray{ GetV2EntityOwnerArgs{...} }
type GetV2EntityOwnerArrayInput interface {
	pulumi.Input

	ToGetV2EntityOwnerArrayOutput() GetV2EntityOwnerArrayOutput
	ToGetV2EntityOwnerArrayOutputWithContext(context.Context) GetV2EntityOwnerArrayOutput
}

type GetV2EntityOwnerArray []GetV2EntityOwnerInput

func (GetV2EntityOwnerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetV2EntityOwner)(nil)).Elem()
}

func (i GetV2EntityOwnerArray) ToGetV2EntityOwnerArrayOutput() GetV2EntityOwnerArrayOutput {
	return i.ToGetV2EntityOwnerArrayOutputWithContext(context.Background())
}

func (i GetV2EntityOwnerArray) ToGetV2EntityOwnerArrayOutputWithContext(ctx context.Context) GetV2EntityOwnerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetV2EntityOwnerArrayOutput)
}

type GetV2EntityOwnerOutput struct{ *pulumi.OutputState }

func (GetV2EntityOwnerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetV2EntityOwner)(nil)).Elem()
}

func (o GetV2EntityOwnerOutput) ToGetV2EntityOwnerOutput() GetV2EntityOwnerOutput {
	return o
}

func (o GetV2EntityOwnerOutput) ToGetV2EntityOwnerOutputWithContext(ctx context.Context) GetV2EntityOwnerOutput {
	return o
}

// Schedule owner id.
func (o GetV2EntityOwnerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetV2EntityOwner) string { return v.Id }).(pulumi.StringOutput)
}

// Schedule owner type (user, team, squad).
func (o GetV2EntityOwnerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetV2EntityOwner) string { return v.Type }).(pulumi.StringOutput)
}

type GetV2EntityOwnerArrayOutput struct{ *pulumi.OutputState }

func (GetV2EntityOwnerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetV2EntityOwner)(nil)).Elem()
}

func (o GetV2EntityOwnerArrayOutput) ToGetV2EntityOwnerArrayOutput() GetV2EntityOwnerArrayOutput {
	return o
}

func (o GetV2EntityOwnerArrayOutput) ToGetV2EntityOwnerArrayOutputWithContext(ctx context.Context) GetV2EntityOwnerArrayOutput {
	return o
}

func (o GetV2EntityOwnerArrayOutput) Index(i pulumi.IntInput) GetV2EntityOwnerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetV2EntityOwner {
		return vs[0].([]GetV2EntityOwner)[vs[1].(int)]
	}).(GetV2EntityOwnerOutput)
}

type GetV2Tag struct {
	// Schedule tag color.
	Color string `pulumi:"color"`
	// Schedule tag key.
	Key string `pulumi:"key"`
	// Schedule tag value.
	Value string `pulumi:"value"`
}

// GetV2TagInput is an input type that accepts GetV2TagArgs and GetV2TagOutput values.
// You can construct a concrete instance of `GetV2TagInput` via:
//
//	GetV2TagArgs{...}
type GetV2TagInput interface {
	pulumi.Input

	ToGetV2TagOutput() GetV2TagOutput
	ToGetV2TagOutputWithContext(context.Context) GetV2TagOutput
}

type GetV2TagArgs struct {
	// Schedule tag color.
	Color pulumi.StringInput `pulumi:"color"`
	// Schedule tag key.
	Key pulumi.StringInput `pulumi:"key"`
	// Schedule tag value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetV2TagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetV2Tag)(nil)).Elem()
}

func (i GetV2TagArgs) ToGetV2TagOutput() GetV2TagOutput {
	return i.ToGetV2TagOutputWithContext(context.Background())
}

func (i GetV2TagArgs) ToGetV2TagOutputWithContext(ctx context.Context) GetV2TagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetV2TagOutput)
}

// GetV2TagArrayInput is an input type that accepts GetV2TagArray and GetV2TagArrayOutput values.
// You can construct a concrete instance of `GetV2TagArrayInput` via:
//
//	GetV2TagArray{ GetV2TagArgs{...} }
type GetV2TagArrayInput interface {
	pulumi.Input

	ToGetV2TagArrayOutput() GetV2TagArrayOutput
	ToGetV2TagArrayOutputWithContext(context.Context) GetV2TagArrayOutput
}

type GetV2TagArray []GetV2TagInput

func (GetV2TagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetV2Tag)(nil)).Elem()
}

func (i GetV2TagArray) ToGetV2TagArrayOutput() GetV2TagArrayOutput {
	return i.ToGetV2TagArrayOutputWithContext(context.Background())
}

func (i GetV2TagArray) ToGetV2TagArrayOutputWithContext(ctx context.Context) GetV2TagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetV2TagArrayOutput)
}

type GetV2TagOutput struct{ *pulumi.OutputState }

func (GetV2TagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetV2Tag)(nil)).Elem()
}

func (o GetV2TagOutput) ToGetV2TagOutput() GetV2TagOutput {
	return o
}

func (o GetV2TagOutput) ToGetV2TagOutputWithContext(ctx context.Context) GetV2TagOutput {
	return o
}

// Schedule tag color.
func (o GetV2TagOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v GetV2Tag) string { return v.Color }).(pulumi.StringOutput)
}

// Schedule tag key.
func (o GetV2TagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetV2Tag) string { return v.Key }).(pulumi.StringOutput)
}

// Schedule tag value.
func (o GetV2TagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetV2Tag) string { return v.Value }).(pulumi.StringOutput)
}

type GetV2TagArrayOutput struct{ *pulumi.OutputState }

func (GetV2TagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetV2Tag)(nil)).Elem()
}

func (o GetV2TagArrayOutput) ToGetV2TagArrayOutput() GetV2TagArrayOutput {
	return o
}

func (o GetV2TagArrayOutput) ToGetV2TagArrayOutputWithContext(ctx context.Context) GetV2TagArrayOutput {
	return o
}

func (o GetV2TagArrayOutput) Index(i pulumi.IntInput) GetV2TagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetV2Tag {
		return vs[0].([]GetV2Tag)[vs[1].(int)]
	}).(GetV2TagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2EntityOwnerInput)(nil)).Elem(), V2EntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2EntityOwnerPtrInput)(nil)).Elem(), V2EntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2TagInput)(nil)).Elem(), V2TagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2TagArrayInput)(nil)).Elem(), V2TagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetV2EntityOwnerInput)(nil)).Elem(), GetV2EntityOwnerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetV2EntityOwnerArrayInput)(nil)).Elem(), GetV2EntityOwnerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetV2TagInput)(nil)).Elem(), GetV2TagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetV2TagArrayInput)(nil)).Elem(), GetV2TagArray{})
	pulumi.RegisterOutputType(V2EntityOwnerOutput{})
	pulumi.RegisterOutputType(V2EntityOwnerPtrOutput{})
	pulumi.RegisterOutputType(V2TagOutput{})
	pulumi.RegisterOutputType(V2TagArrayOutput{})
	pulumi.RegisterOutputType(GetV2EntityOwnerOutput{})
	pulumi.RegisterOutputType(GetV2EntityOwnerArrayOutput{})
	pulumi.RegisterOutputType(GetV2TagOutput{})
	pulumi.RegisterOutputType(GetV2TagArrayOutput{})
}
