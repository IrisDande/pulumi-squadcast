// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rotation

import (
	"context"
	"reflect"

	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type V2ParticipantGroup struct {
	// Group participants.
	Participants []V2ParticipantGroupParticipant `pulumi:"participants"`
}

// V2ParticipantGroupInput is an input type that accepts V2ParticipantGroupArgs and V2ParticipantGroupOutput values.
// You can construct a concrete instance of `V2ParticipantGroupInput` via:
//
//	V2ParticipantGroupArgs{...}
type V2ParticipantGroupInput interface {
	pulumi.Input

	ToV2ParticipantGroupOutput() V2ParticipantGroupOutput
	ToV2ParticipantGroupOutputWithContext(context.Context) V2ParticipantGroupOutput
}

type V2ParticipantGroupArgs struct {
	// Group participants.
	Participants V2ParticipantGroupParticipantArrayInput `pulumi:"participants"`
}

func (V2ParticipantGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*V2ParticipantGroup)(nil)).Elem()
}

func (i V2ParticipantGroupArgs) ToV2ParticipantGroupOutput() V2ParticipantGroupOutput {
	return i.ToV2ParticipantGroupOutputWithContext(context.Background())
}

func (i V2ParticipantGroupArgs) ToV2ParticipantGroupOutputWithContext(ctx context.Context) V2ParticipantGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ParticipantGroupOutput)
}

// V2ParticipantGroupArrayInput is an input type that accepts V2ParticipantGroupArray and V2ParticipantGroupArrayOutput values.
// You can construct a concrete instance of `V2ParticipantGroupArrayInput` via:
//
//	V2ParticipantGroupArray{ V2ParticipantGroupArgs{...} }
type V2ParticipantGroupArrayInput interface {
	pulumi.Input

	ToV2ParticipantGroupArrayOutput() V2ParticipantGroupArrayOutput
	ToV2ParticipantGroupArrayOutputWithContext(context.Context) V2ParticipantGroupArrayOutput
}

type V2ParticipantGroupArray []V2ParticipantGroupInput

func (V2ParticipantGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]V2ParticipantGroup)(nil)).Elem()
}

func (i V2ParticipantGroupArray) ToV2ParticipantGroupArrayOutput() V2ParticipantGroupArrayOutput {
	return i.ToV2ParticipantGroupArrayOutputWithContext(context.Background())
}

func (i V2ParticipantGroupArray) ToV2ParticipantGroupArrayOutputWithContext(ctx context.Context) V2ParticipantGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ParticipantGroupArrayOutput)
}

type V2ParticipantGroupOutput struct{ *pulumi.OutputState }

func (V2ParticipantGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*V2ParticipantGroup)(nil)).Elem()
}

func (o V2ParticipantGroupOutput) ToV2ParticipantGroupOutput() V2ParticipantGroupOutput {
	return o
}

func (o V2ParticipantGroupOutput) ToV2ParticipantGroupOutputWithContext(ctx context.Context) V2ParticipantGroupOutput {
	return o
}

// Group participants.
func (o V2ParticipantGroupOutput) Participants() V2ParticipantGroupParticipantArrayOutput {
	return o.ApplyT(func(v V2ParticipantGroup) []V2ParticipantGroupParticipant { return v.Participants }).(V2ParticipantGroupParticipantArrayOutput)
}

type V2ParticipantGroupArrayOutput struct{ *pulumi.OutputState }

func (V2ParticipantGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]V2ParticipantGroup)(nil)).Elem()
}

func (o V2ParticipantGroupArrayOutput) ToV2ParticipantGroupArrayOutput() V2ParticipantGroupArrayOutput {
	return o
}

func (o V2ParticipantGroupArrayOutput) ToV2ParticipantGroupArrayOutputWithContext(ctx context.Context) V2ParticipantGroupArrayOutput {
	return o
}

func (o V2ParticipantGroupArrayOutput) Index(i pulumi.IntInput) V2ParticipantGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) V2ParticipantGroup {
		return vs[0].([]V2ParticipantGroup)[vs[1].(int)]
	}).(V2ParticipantGroupOutput)
}

type V2ParticipantGroupParticipant struct {
	// Participant id.
	Id string `pulumi:"id"`
	// Participant type (user, team, squad).
	Type string `pulumi:"type"`
}

// V2ParticipantGroupParticipantInput is an input type that accepts V2ParticipantGroupParticipantArgs and V2ParticipantGroupParticipantOutput values.
// You can construct a concrete instance of `V2ParticipantGroupParticipantInput` via:
//
//	V2ParticipantGroupParticipantArgs{...}
type V2ParticipantGroupParticipantInput interface {
	pulumi.Input

	ToV2ParticipantGroupParticipantOutput() V2ParticipantGroupParticipantOutput
	ToV2ParticipantGroupParticipantOutputWithContext(context.Context) V2ParticipantGroupParticipantOutput
}

type V2ParticipantGroupParticipantArgs struct {
	// Participant id.
	Id pulumi.StringInput `pulumi:"id"`
	// Participant type (user, team, squad).
	Type pulumi.StringInput `pulumi:"type"`
}

func (V2ParticipantGroupParticipantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*V2ParticipantGroupParticipant)(nil)).Elem()
}

func (i V2ParticipantGroupParticipantArgs) ToV2ParticipantGroupParticipantOutput() V2ParticipantGroupParticipantOutput {
	return i.ToV2ParticipantGroupParticipantOutputWithContext(context.Background())
}

func (i V2ParticipantGroupParticipantArgs) ToV2ParticipantGroupParticipantOutputWithContext(ctx context.Context) V2ParticipantGroupParticipantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ParticipantGroupParticipantOutput)
}

// V2ParticipantGroupParticipantArrayInput is an input type that accepts V2ParticipantGroupParticipantArray and V2ParticipantGroupParticipantArrayOutput values.
// You can construct a concrete instance of `V2ParticipantGroupParticipantArrayInput` via:
//
//	V2ParticipantGroupParticipantArray{ V2ParticipantGroupParticipantArgs{...} }
type V2ParticipantGroupParticipantArrayInput interface {
	pulumi.Input

	ToV2ParticipantGroupParticipantArrayOutput() V2ParticipantGroupParticipantArrayOutput
	ToV2ParticipantGroupParticipantArrayOutputWithContext(context.Context) V2ParticipantGroupParticipantArrayOutput
}

type V2ParticipantGroupParticipantArray []V2ParticipantGroupParticipantInput

func (V2ParticipantGroupParticipantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]V2ParticipantGroupParticipant)(nil)).Elem()
}

func (i V2ParticipantGroupParticipantArray) ToV2ParticipantGroupParticipantArrayOutput() V2ParticipantGroupParticipantArrayOutput {
	return i.ToV2ParticipantGroupParticipantArrayOutputWithContext(context.Background())
}

func (i V2ParticipantGroupParticipantArray) ToV2ParticipantGroupParticipantArrayOutputWithContext(ctx context.Context) V2ParticipantGroupParticipantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ParticipantGroupParticipantArrayOutput)
}

type V2ParticipantGroupParticipantOutput struct{ *pulumi.OutputState }

func (V2ParticipantGroupParticipantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*V2ParticipantGroupParticipant)(nil)).Elem()
}

func (o V2ParticipantGroupParticipantOutput) ToV2ParticipantGroupParticipantOutput() V2ParticipantGroupParticipantOutput {
	return o
}

func (o V2ParticipantGroupParticipantOutput) ToV2ParticipantGroupParticipantOutputWithContext(ctx context.Context) V2ParticipantGroupParticipantOutput {
	return o
}

// Participant id.
func (o V2ParticipantGroupParticipantOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v V2ParticipantGroupParticipant) string { return v.Id }).(pulumi.StringOutput)
}

// Participant type (user, team, squad).
func (o V2ParticipantGroupParticipantOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v V2ParticipantGroupParticipant) string { return v.Type }).(pulumi.StringOutput)
}

type V2ParticipantGroupParticipantArrayOutput struct{ *pulumi.OutputState }

func (V2ParticipantGroupParticipantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]V2ParticipantGroupParticipant)(nil)).Elem()
}

func (o V2ParticipantGroupParticipantArrayOutput) ToV2ParticipantGroupParticipantArrayOutput() V2ParticipantGroupParticipantArrayOutput {
	return o
}

func (o V2ParticipantGroupParticipantArrayOutput) ToV2ParticipantGroupParticipantArrayOutputWithContext(ctx context.Context) V2ParticipantGroupParticipantArrayOutput {
	return o
}

func (o V2ParticipantGroupParticipantArrayOutput) Index(i pulumi.IntInput) V2ParticipantGroupParticipantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) V2ParticipantGroupParticipant {
		return vs[0].([]V2ParticipantGroupParticipant)[vs[1].(int)]
	}).(V2ParticipantGroupParticipantOutput)
}

type V2ShiftTimeslot struct {
	// Defines the day of the week for the shift. If not specified, the timeslot is active on all days of the week.
	DayOfWeek *string `pulumi:"dayOfWeek"`
	// Defines the duration of each shift. (in minutes)
	Duration int `pulumi:"duration"`
	// Defines the start hour of the each shift in the schedule timezone.
	StartHour int `pulumi:"startHour"`
	// Defines the start minute of the each shift in the schedule timezone.
	StartMinute int `pulumi:"startMinute"`
}

// V2ShiftTimeslotInput is an input type that accepts V2ShiftTimeslotArgs and V2ShiftTimeslotOutput values.
// You can construct a concrete instance of `V2ShiftTimeslotInput` via:
//
//	V2ShiftTimeslotArgs{...}
type V2ShiftTimeslotInput interface {
	pulumi.Input

	ToV2ShiftTimeslotOutput() V2ShiftTimeslotOutput
	ToV2ShiftTimeslotOutputWithContext(context.Context) V2ShiftTimeslotOutput
}

type V2ShiftTimeslotArgs struct {
	// Defines the day of the week for the shift. If not specified, the timeslot is active on all days of the week.
	DayOfWeek pulumi.StringPtrInput `pulumi:"dayOfWeek"`
	// Defines the duration of each shift. (in minutes)
	Duration pulumi.IntInput `pulumi:"duration"`
	// Defines the start hour of the each shift in the schedule timezone.
	StartHour pulumi.IntInput `pulumi:"startHour"`
	// Defines the start minute of the each shift in the schedule timezone.
	StartMinute pulumi.IntInput `pulumi:"startMinute"`
}

func (V2ShiftTimeslotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*V2ShiftTimeslot)(nil)).Elem()
}

func (i V2ShiftTimeslotArgs) ToV2ShiftTimeslotOutput() V2ShiftTimeslotOutput {
	return i.ToV2ShiftTimeslotOutputWithContext(context.Background())
}

func (i V2ShiftTimeslotArgs) ToV2ShiftTimeslotOutputWithContext(ctx context.Context) V2ShiftTimeslotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ShiftTimeslotOutput)
}

// V2ShiftTimeslotArrayInput is an input type that accepts V2ShiftTimeslotArray and V2ShiftTimeslotArrayOutput values.
// You can construct a concrete instance of `V2ShiftTimeslotArrayInput` via:
//
//	V2ShiftTimeslotArray{ V2ShiftTimeslotArgs{...} }
type V2ShiftTimeslotArrayInput interface {
	pulumi.Input

	ToV2ShiftTimeslotArrayOutput() V2ShiftTimeslotArrayOutput
	ToV2ShiftTimeslotArrayOutputWithContext(context.Context) V2ShiftTimeslotArrayOutput
}

type V2ShiftTimeslotArray []V2ShiftTimeslotInput

func (V2ShiftTimeslotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]V2ShiftTimeslot)(nil)).Elem()
}

func (i V2ShiftTimeslotArray) ToV2ShiftTimeslotArrayOutput() V2ShiftTimeslotArrayOutput {
	return i.ToV2ShiftTimeslotArrayOutputWithContext(context.Background())
}

func (i V2ShiftTimeslotArray) ToV2ShiftTimeslotArrayOutputWithContext(ctx context.Context) V2ShiftTimeslotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ShiftTimeslotArrayOutput)
}

type V2ShiftTimeslotOutput struct{ *pulumi.OutputState }

func (V2ShiftTimeslotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*V2ShiftTimeslot)(nil)).Elem()
}

func (o V2ShiftTimeslotOutput) ToV2ShiftTimeslotOutput() V2ShiftTimeslotOutput {
	return o
}

func (o V2ShiftTimeslotOutput) ToV2ShiftTimeslotOutputWithContext(ctx context.Context) V2ShiftTimeslotOutput {
	return o
}

// Defines the day of the week for the shift. If not specified, the timeslot is active on all days of the week.
func (o V2ShiftTimeslotOutput) DayOfWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v V2ShiftTimeslot) *string { return v.DayOfWeek }).(pulumi.StringPtrOutput)
}

// Defines the duration of each shift. (in minutes)
func (o V2ShiftTimeslotOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v V2ShiftTimeslot) int { return v.Duration }).(pulumi.IntOutput)
}

// Defines the start hour of the each shift in the schedule timezone.
func (o V2ShiftTimeslotOutput) StartHour() pulumi.IntOutput {
	return o.ApplyT(func(v V2ShiftTimeslot) int { return v.StartHour }).(pulumi.IntOutput)
}

// Defines the start minute of the each shift in the schedule timezone.
func (o V2ShiftTimeslotOutput) StartMinute() pulumi.IntOutput {
	return o.ApplyT(func(v V2ShiftTimeslot) int { return v.StartMinute }).(pulumi.IntOutput)
}

type V2ShiftTimeslotArrayOutput struct{ *pulumi.OutputState }

func (V2ShiftTimeslotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]V2ShiftTimeslot)(nil)).Elem()
}

func (o V2ShiftTimeslotArrayOutput) ToV2ShiftTimeslotArrayOutput() V2ShiftTimeslotArrayOutput {
	return o
}

func (o V2ShiftTimeslotArrayOutput) ToV2ShiftTimeslotArrayOutputWithContext(ctx context.Context) V2ShiftTimeslotArrayOutput {
	return o
}

func (o V2ShiftTimeslotArrayOutput) Index(i pulumi.IntInput) V2ShiftTimeslotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) V2ShiftTimeslot {
		return vs[0].([]V2ShiftTimeslot)[vs[1].(int)]
	}).(V2ShiftTimeslotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2ParticipantGroupInput)(nil)).Elem(), V2ParticipantGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2ParticipantGroupArrayInput)(nil)).Elem(), V2ParticipantGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2ParticipantGroupParticipantInput)(nil)).Elem(), V2ParticipantGroupParticipantArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2ParticipantGroupParticipantArrayInput)(nil)).Elem(), V2ParticipantGroupParticipantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2ShiftTimeslotInput)(nil)).Elem(), V2ShiftTimeslotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2ShiftTimeslotArrayInput)(nil)).Elem(), V2ShiftTimeslotArray{})
	pulumi.RegisterOutputType(V2ParticipantGroupOutput{})
	pulumi.RegisterOutputType(V2ParticipantGroupArrayOutput{})
	pulumi.RegisterOutputType(V2ParticipantGroupParticipantOutput{})
	pulumi.RegisterOutputType(V2ParticipantGroupParticipantArrayOutput{})
	pulumi.RegisterOutputType(V2ShiftTimeslotOutput{})
	pulumi.RegisterOutputType(V2ShiftTimeslotArrayOutput{})
}
