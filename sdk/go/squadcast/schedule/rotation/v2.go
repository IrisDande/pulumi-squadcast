// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rotation

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [Schedule rotations](https://support.squadcast.com/schedules/schedules-new/adding-a-schedule#2.-choose-a-rotation-pattern) are used to manage on-call scheduling & determine who will be notified when an incident is triggered. The name of the Rotation must be unique within a Schedule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast"
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/schedule"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTeam, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "example team name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleUser, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "test@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleUser2, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "test2@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			getSchedule, err := schedule.LookupV2(ctx, &schedule.LookupV2Args{
//				Name:   "Test Schedule",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Create a rotation with weekly period
//			_, err = schedule.NewV2(ctx, "rotationsWithWeeklyPeriod", &schedule.V2Args{
//				ScheduleId: pulumi.String(getSchedule.Id),
//				StartDate:  pulumi.String("2023-07-01T00:00:00Z"),
//				Period:     pulumi.String("weekly"),
//				ShiftTimeslots: rotation.V2ShiftTimeslotArray{
//					&rotation.V2ShiftTimeslotArgs{
//						StartHour:   pulumi.Int(10),
//						StartMinute: pulumi.Int(30),
//						Duration:    pulumi.Int(720),
//					},
//				},
//				ChangeParticipantsFrequency: pulumi.Int(1),
//				ChangeParticipantsUnit:      pulumi.String("rotation"),
//				ParticipantGroups: rotation.V2ParticipantGroupArray{
//					&rotation.V2ParticipantGroupArgs{
//						Participants: rotation.V2ParticipantGroupParticipantArray{
//							&rotation.V2ParticipantGroupParticipantArgs{
//								Id:   pulumi.String(exampleUser.Id),
//								Type: pulumi.String("user"),
//							},
//							&rotation.V2ParticipantGroupParticipantArgs{
//								Id:   pulumi.String(exampleUser2.Id),
//								Type: pulumi.String("user"),
//							},
//						},
//					},
//				},
//				EndsAfterIterations: pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			// Create a rotation with custom period
//			_, err = schedule.NewV2(ctx, "rotationsWithCustomPeriod", &schedule.V2Args{
//				ScheduleId: pulumi.String(getSchedule.Id),
//				StartDate:  pulumi.String("2023-06-13T00:00:00Z"),
//				Period:     pulumi.String("custom"),
//				ShiftTimeslots: rotation.V2ShiftTimeslotArray{
//					&rotation.V2ShiftTimeslotArgs{
//						StartHour:   pulumi.Int(10),
//						StartMinute: pulumi.Int(0),
//						Duration:    pulumi.Int(1440),
//						DayOfWeek:   pulumi.String("saturday"),
//					},
//					&rotation.V2ShiftTimeslotArgs{
//						StartHour:   pulumi.Int(12),
//						StartMinute: pulumi.Int(30),
//						Duration:    pulumi.Int(720),
//						DayOfWeek:   pulumi.String("sunday"),
//					},
//				},
//				ChangeParticipantsFrequency: pulumi.Int(1),
//				ChangeParticipantsUnit:      pulumi.String("rotation"),
//				CustomPeriodFrequency:       pulumi.Int(1),
//				CustomPeriodUnit:            pulumi.String("week"),
//				ParticipantGroups: rotation.V2ParticipantGroupArray{
//					&rotation.V2ParticipantGroupArgs{
//						Participants: rotation.V2ParticipantGroupParticipantArray{
//							&rotation.V2ParticipantGroupParticipantArgs{
//								Id:   pulumi.String(exampleUser.Id),
//								Type: pulumi.String("user"),
//							},
//						},
//					},
//					&rotation.V2ParticipantGroupArgs{
//						Participants: rotation.V2ParticipantGroupParticipantArray{
//							&rotation.V2ParticipantGroupParticipantArgs{
//								Id:   pulumi.String(exampleUser2.Id),
//								Type: pulumi.String("user"),
//							},
//						},
//					},
//				},
//				EndDate: pulumi.String("2023-08-31T00:00:00Z"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// teamID:scheduleName:rotationName
//
// ```sh
// $ pulumi import squadcast:schedule/rotation/v2:V2 rotation "62d2fe23a57381088224d726:Example Schedule:Example Rotation"
// ```
type V2 struct {
	pulumi.CustomResourceState

	// Frequency with which participants change in the rotation.
	ChangeParticipantsFrequency pulumi.IntOutput `pulumi:"changeParticipantsFrequency"`
	// Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
	ChangeParticipantsUnit pulumi.StringOutput `pulumi:"changeParticipantsUnit"`
	// Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
	CustomPeriodFrequency pulumi.IntPtrOutput `pulumi:"customPeriodFrequency"`
	// Unit of the custom rotation repeat pattern (day, week). Only applicable if period is set to custom.
	CustomPeriodUnit pulumi.StringPtrOutput `pulumi:"customPeriodUnit"`
	// Defines the end date of the schedule rotation.
	EndDate pulumi.StringPtrOutput `pulumi:"endDate"`
	// Defines the number of iterations of the schedule rotation.
	EndsAfterIterations pulumi.IntPtrOutput `pulumi:"endsAfterIterations"`
	// Rotation name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
	ParticipantGroups V2ParticipantGroupArrayOutput `pulumi:"participantGroups"`
	// Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
	Period pulumi.StringOutput `pulumi:"period"`
	// id of the schedule that the rotation belongs to.
	ScheduleId pulumi.IntOutput `pulumi:"scheduleId"`
	// Timeslots where the rotation is active.
	ShiftTimeslots V2ShiftTimeslotArrayOutput `pulumi:"shiftTimeslots"`
	// Defines the start date of the rotation.
	StartDate pulumi.StringOutput `pulumi:"startDate"`
}

// NewV2 registers a new resource with the given unique name, arguments, and options.
func NewV2(ctx *pulumi.Context,
	name string, args *V2Args, opts ...pulumi.ResourceOption) (*V2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChangeParticipantsFrequency == nil {
		return nil, errors.New("invalid value for required argument 'ChangeParticipantsFrequency'")
	}
	if args.ChangeParticipantsUnit == nil {
		return nil, errors.New("invalid value for required argument 'ChangeParticipantsUnit'")
	}
	if args.Period == nil {
		return nil, errors.New("invalid value for required argument 'Period'")
	}
	if args.ScheduleId == nil {
		return nil, errors.New("invalid value for required argument 'ScheduleId'")
	}
	if args.ShiftTimeslots == nil {
		return nil, errors.New("invalid value for required argument 'ShiftTimeslots'")
	}
	if args.StartDate == nil {
		return nil, errors.New("invalid value for required argument 'StartDate'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2
	err := ctx.RegisterResource("squadcast:schedule/rotation/v2:V2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2 gets an existing V2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2State, opts ...pulumi.ResourceOption) (*V2, error) {
	var resource V2
	err := ctx.ReadResource("squadcast:schedule/rotation/v2:V2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2 resources.
type v2State struct {
	// Frequency with which participants change in the rotation.
	ChangeParticipantsFrequency *int `pulumi:"changeParticipantsFrequency"`
	// Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
	ChangeParticipantsUnit *string `pulumi:"changeParticipantsUnit"`
	// Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
	CustomPeriodFrequency *int `pulumi:"customPeriodFrequency"`
	// Unit of the custom rotation repeat pattern (day, week). Only applicable if period is set to custom.
	CustomPeriodUnit *string `pulumi:"customPeriodUnit"`
	// Defines the end date of the schedule rotation.
	EndDate *string `pulumi:"endDate"`
	// Defines the number of iterations of the schedule rotation.
	EndsAfterIterations *int `pulumi:"endsAfterIterations"`
	// Rotation name.
	Name *string `pulumi:"name"`
	// Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
	ParticipantGroups []V2ParticipantGroup `pulumi:"participantGroups"`
	// Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
	Period *string `pulumi:"period"`
	// id of the schedule that the rotation belongs to.
	ScheduleId *int `pulumi:"scheduleId"`
	// Timeslots where the rotation is active.
	ShiftTimeslots []V2ShiftTimeslot `pulumi:"shiftTimeslots"`
	// Defines the start date of the rotation.
	StartDate *string `pulumi:"startDate"`
}

type V2State struct {
	// Frequency with which participants change in the rotation.
	ChangeParticipantsFrequency pulumi.IntPtrInput
	// Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
	ChangeParticipantsUnit pulumi.StringPtrInput
	// Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
	CustomPeriodFrequency pulumi.IntPtrInput
	// Unit of the custom rotation repeat pattern (day, week). Only applicable if period is set to custom.
	CustomPeriodUnit pulumi.StringPtrInput
	// Defines the end date of the schedule rotation.
	EndDate pulumi.StringPtrInput
	// Defines the number of iterations of the schedule rotation.
	EndsAfterIterations pulumi.IntPtrInput
	// Rotation name.
	Name pulumi.StringPtrInput
	// Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
	ParticipantGroups V2ParticipantGroupArrayInput
	// Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
	Period pulumi.StringPtrInput
	// id of the schedule that the rotation belongs to.
	ScheduleId pulumi.IntPtrInput
	// Timeslots where the rotation is active.
	ShiftTimeslots V2ShiftTimeslotArrayInput
	// Defines the start date of the rotation.
	StartDate pulumi.StringPtrInput
}

func (V2State) ElementType() reflect.Type {
	return reflect.TypeOf((*v2State)(nil)).Elem()
}

type v2Args struct {
	// Frequency with which participants change in the rotation.
	ChangeParticipantsFrequency int `pulumi:"changeParticipantsFrequency"`
	// Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
	ChangeParticipantsUnit string `pulumi:"changeParticipantsUnit"`
	// Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
	CustomPeriodFrequency *int `pulumi:"customPeriodFrequency"`
	// Unit of the custom rotation repeat pattern (day, week). Only applicable if period is set to custom.
	CustomPeriodUnit *string `pulumi:"customPeriodUnit"`
	// Defines the end date of the schedule rotation.
	EndDate *string `pulumi:"endDate"`
	// Defines the number of iterations of the schedule rotation.
	EndsAfterIterations *int `pulumi:"endsAfterIterations"`
	// Rotation name.
	Name *string `pulumi:"name"`
	// Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
	ParticipantGroups []V2ParticipantGroup `pulumi:"participantGroups"`
	// Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
	Period string `pulumi:"period"`
	// id of the schedule that the rotation belongs to.
	ScheduleId int `pulumi:"scheduleId"`
	// Timeslots where the rotation is active.
	ShiftTimeslots []V2ShiftTimeslot `pulumi:"shiftTimeslots"`
	// Defines the start date of the rotation.
	StartDate string `pulumi:"startDate"`
}

// The set of arguments for constructing a V2 resource.
type V2Args struct {
	// Frequency with which participants change in the rotation.
	ChangeParticipantsFrequency pulumi.IntInput
	// Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
	ChangeParticipantsUnit pulumi.StringInput
	// Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
	CustomPeriodFrequency pulumi.IntPtrInput
	// Unit of the custom rotation repeat pattern (day, week). Only applicable if period is set to custom.
	CustomPeriodUnit pulumi.StringPtrInput
	// Defines the end date of the schedule rotation.
	EndDate pulumi.StringPtrInput
	// Defines the number of iterations of the schedule rotation.
	EndsAfterIterations pulumi.IntPtrInput
	// Rotation name.
	Name pulumi.StringPtrInput
	// Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
	ParticipantGroups V2ParticipantGroupArrayInput
	// Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
	Period pulumi.StringInput
	// id of the schedule that the rotation belongs to.
	ScheduleId pulumi.IntInput
	// Timeslots where the rotation is active.
	ShiftTimeslots V2ShiftTimeslotArrayInput
	// Defines the start date of the rotation.
	StartDate pulumi.StringInput
}

func (V2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*v2Args)(nil)).Elem()
}

type V2Input interface {
	pulumi.Input

	ToV2Output() V2Output
	ToV2OutputWithContext(ctx context.Context) V2Output
}

func (*V2) ElementType() reflect.Type {
	return reflect.TypeOf((**V2)(nil)).Elem()
}

func (i *V2) ToV2Output() V2Output {
	return i.ToV2OutputWithContext(context.Background())
}

func (i *V2) ToV2OutputWithContext(ctx context.Context) V2Output {
	return pulumi.ToOutputWithContext(ctx, i).(V2Output)
}

// V2ArrayInput is an input type that accepts V2Array and V2ArrayOutput values.
// You can construct a concrete instance of `V2ArrayInput` via:
//
//	V2Array{ V2Args{...} }
type V2ArrayInput interface {
	pulumi.Input

	ToV2ArrayOutput() V2ArrayOutput
	ToV2ArrayOutputWithContext(context.Context) V2ArrayOutput
}

type V2Array []V2Input

func (V2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2)(nil)).Elem()
}

func (i V2Array) ToV2ArrayOutput() V2ArrayOutput {
	return i.ToV2ArrayOutputWithContext(context.Background())
}

func (i V2Array) ToV2ArrayOutputWithContext(ctx context.Context) V2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ArrayOutput)
}

// V2MapInput is an input type that accepts V2Map and V2MapOutput values.
// You can construct a concrete instance of `V2MapInput` via:
//
//	V2Map{ "key": V2Args{...} }
type V2MapInput interface {
	pulumi.Input

	ToV2MapOutput() V2MapOutput
	ToV2MapOutputWithContext(context.Context) V2MapOutput
}

type V2Map map[string]V2Input

func (V2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2)(nil)).Elem()
}

func (i V2Map) ToV2MapOutput() V2MapOutput {
	return i.ToV2MapOutputWithContext(context.Background())
}

func (i V2Map) ToV2MapOutputWithContext(ctx context.Context) V2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2MapOutput)
}

type V2Output struct{ *pulumi.OutputState }

func (V2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**V2)(nil)).Elem()
}

func (o V2Output) ToV2Output() V2Output {
	return o
}

func (o V2Output) ToV2OutputWithContext(ctx context.Context) V2Output {
	return o
}

// Frequency with which participants change in the rotation.
func (o V2Output) ChangeParticipantsFrequency() pulumi.IntOutput {
	return o.ApplyT(func(v *V2) pulumi.IntOutput { return v.ChangeParticipantsFrequency }).(pulumi.IntOutput)
}

// Unit of the frequency with which participants change in the rotation (rotation, day, week, month).
func (o V2Output) ChangeParticipantsUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *V2) pulumi.StringOutput { return v.ChangeParticipantsUnit }).(pulumi.StringOutput)
}

// Frequency of the custom rotation repeat pattern. Only applicable if period is set to custom.
func (o V2Output) CustomPeriodFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *V2) pulumi.IntPtrOutput { return v.CustomPeriodFrequency }).(pulumi.IntPtrOutput)
}

// Unit of the custom rotation repeat pattern (day, week). Only applicable if period is set to custom.
func (o V2Output) CustomPeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2) pulumi.StringPtrOutput { return v.CustomPeriodUnit }).(pulumi.StringPtrOutput)
}

// Defines the end date of the schedule rotation.
func (o V2Output) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2) pulumi.StringPtrOutput { return v.EndDate }).(pulumi.StringPtrOutput)
}

// Defines the number of iterations of the schedule rotation.
func (o V2Output) EndsAfterIterations() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *V2) pulumi.IntPtrOutput { return v.EndsAfterIterations }).(pulumi.IntPtrOutput)
}

// Rotation name.
func (o V2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Ordered list of participant groups for the rotation. For each rotation the participant*groups are cycled through in order.
func (o V2Output) ParticipantGroups() V2ParticipantGroupArrayOutput {
	return o.ApplyT(func(v *V2) V2ParticipantGroupArrayOutput { return v.ParticipantGroups }).(V2ParticipantGroupArrayOutput)
}

// Rotation period (none, daily, weekly, monthly, custom). Defines how often the rotation repeats.
func (o V2Output) Period() pulumi.StringOutput {
	return o.ApplyT(func(v *V2) pulumi.StringOutput { return v.Period }).(pulumi.StringOutput)
}

// id of the schedule that the rotation belongs to.
func (o V2Output) ScheduleId() pulumi.IntOutput {
	return o.ApplyT(func(v *V2) pulumi.IntOutput { return v.ScheduleId }).(pulumi.IntOutput)
}

// Timeslots where the rotation is active.
func (o V2Output) ShiftTimeslots() V2ShiftTimeslotArrayOutput {
	return o.ApplyT(func(v *V2) V2ShiftTimeslotArrayOutput { return v.ShiftTimeslots }).(V2ShiftTimeslotArrayOutput)
}

// Defines the start date of the rotation.
func (o V2Output) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v *V2) pulumi.StringOutput { return v.StartDate }).(pulumi.StringOutput)
}

type V2ArrayOutput struct{ *pulumi.OutputState }

func (V2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2)(nil)).Elem()
}

func (o V2ArrayOutput) ToV2ArrayOutput() V2ArrayOutput {
	return o
}

func (o V2ArrayOutput) ToV2ArrayOutputWithContext(ctx context.Context) V2ArrayOutput {
	return o
}

func (o V2ArrayOutput) Index(i pulumi.IntInput) V2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2 {
		return vs[0].([]*V2)[vs[1].(int)]
	}).(V2Output)
}

type V2MapOutput struct{ *pulumi.OutputState }

func (V2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2)(nil)).Elem()
}

func (o V2MapOutput) ToV2MapOutput() V2MapOutput {
	return o
}

func (o V2MapOutput) ToV2MapOutputWithContext(ctx context.Context) V2MapOutput {
	return o
}

func (o V2MapOutput) MapIndex(k pulumi.StringInput) V2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2 {
		return vs[0].(map[string]*V2)[vs[1].(string)]
	}).(V2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2Input)(nil)).Elem(), &V2{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2ArrayInput)(nil)).Elem(), V2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2MapInput)(nil)).Elem(), V2Map{})
	pulumi.RegisterOutputType(V2Output{})
	pulumi.RegisterOutputType(V2ArrayOutput{})
	pulumi.RegisterOutputType(V2MapOutput{})
}
