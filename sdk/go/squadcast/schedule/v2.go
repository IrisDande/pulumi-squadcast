// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package schedule

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [Squadcast schedules v2](https://support.squadcast.com/schedules/schedules-new) are used to manage on-call scheduling & determine who will be notified when an incident is triggered. The name of the Schedule must be unique within a Team.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast"
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/schedule"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTeam, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "example team name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleUser, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "test@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = schedule.NewV2(ctx, "scheduleTest", &schedule.V2Args{
//				Description: pulumi.String("test schedule"),
//				Timezone:    pulumi.String("Asia/Kolkata"),
//				TeamId:      pulumi.String(exampleTeam.Id),
//				EntityOwner: &schedule.V2EntityOwnerArgs{
//					Id:   pulumi.String(exampleUser.Id),
//					Type: pulumi.String("user"),
//				},
//				Tags: schedule.V2TagArray{
//					&schedule.V2TagArgs{
//						Key:   pulumi.String("testkey"),
//						Value: pulumi.String("testval"),
//					},
//					&schedule.V2TagArgs{
//						Key:   pulumi.String("testkey2"),
//						Value: pulumi.String("testval2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// teamID:scheduleName
//
// Use 'Get All Teams' API to get the id of the team
//
// ```sh
// $ pulumi import squadcast:schedule/v2:V2 schedule_test "62d2fe23a57381088224d726:Example Schedule"
// ```
type V2 struct {
	pulumi.CustomResourceState

	// Detailed description about the schedule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Schedule owner.
	EntityOwner V2EntityOwnerOutput `pulumi:"entityOwner"`
	// Name of the schedule.
	Name pulumi.StringOutput `pulumi:"name"`
	// Schedule tags.
	Tags V2TagArrayOutput `pulumi:"tags"`
	// Team id.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// Timezone for the schedule.
	Timezone pulumi.StringOutput `pulumi:"timezone"`
}

// NewV2 registers a new resource with the given unique name, arguments, and options.
func NewV2(ctx *pulumi.Context,
	name string, args *V2Args, opts ...pulumi.ResourceOption) (*V2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityOwner == nil {
		return nil, errors.New("invalid value for required argument 'EntityOwner'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	if args.Timezone == nil {
		return nil, errors.New("invalid value for required argument 'Timezone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource V2
	err := ctx.RegisterResource("squadcast:schedule/v2:V2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetV2 gets an existing V2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *V2State, opts ...pulumi.ResourceOption) (*V2, error) {
	var resource V2
	err := ctx.ReadResource("squadcast:schedule/v2:V2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering V2 resources.
type v2State struct {
	// Detailed description about the schedule.
	Description *string `pulumi:"description"`
	// Schedule owner.
	EntityOwner *V2EntityOwner `pulumi:"entityOwner"`
	// Name of the schedule.
	Name *string `pulumi:"name"`
	// Schedule tags.
	Tags []V2Tag `pulumi:"tags"`
	// Team id.
	TeamId *string `pulumi:"teamId"`
	// Timezone for the schedule.
	Timezone *string `pulumi:"timezone"`
}

type V2State struct {
	// Detailed description about the schedule.
	Description pulumi.StringPtrInput
	// Schedule owner.
	EntityOwner V2EntityOwnerPtrInput
	// Name of the schedule.
	Name pulumi.StringPtrInput
	// Schedule tags.
	Tags V2TagArrayInput
	// Team id.
	TeamId pulumi.StringPtrInput
	// Timezone for the schedule.
	Timezone pulumi.StringPtrInput
}

func (V2State) ElementType() reflect.Type {
	return reflect.TypeOf((*v2State)(nil)).Elem()
}

type v2Args struct {
	// Detailed description about the schedule.
	Description *string `pulumi:"description"`
	// Schedule owner.
	EntityOwner V2EntityOwner `pulumi:"entityOwner"`
	// Name of the schedule.
	Name *string `pulumi:"name"`
	// Schedule tags.
	Tags []V2Tag `pulumi:"tags"`
	// Team id.
	TeamId string `pulumi:"teamId"`
	// Timezone for the schedule.
	Timezone string `pulumi:"timezone"`
}

// The set of arguments for constructing a V2 resource.
type V2Args struct {
	// Detailed description about the schedule.
	Description pulumi.StringPtrInput
	// Schedule owner.
	EntityOwner V2EntityOwnerInput
	// Name of the schedule.
	Name pulumi.StringPtrInput
	// Schedule tags.
	Tags V2TagArrayInput
	// Team id.
	TeamId pulumi.StringInput
	// Timezone for the schedule.
	Timezone pulumi.StringInput
}

func (V2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*v2Args)(nil)).Elem()
}

type V2Input interface {
	pulumi.Input

	ToV2Output() V2Output
	ToV2OutputWithContext(ctx context.Context) V2Output
}

func (*V2) ElementType() reflect.Type {
	return reflect.TypeOf((**V2)(nil)).Elem()
}

func (i *V2) ToV2Output() V2Output {
	return i.ToV2OutputWithContext(context.Background())
}

func (i *V2) ToV2OutputWithContext(ctx context.Context) V2Output {
	return pulumi.ToOutputWithContext(ctx, i).(V2Output)
}

// V2ArrayInput is an input type that accepts V2Array and V2ArrayOutput values.
// You can construct a concrete instance of `V2ArrayInput` via:
//
//	V2Array{ V2Args{...} }
type V2ArrayInput interface {
	pulumi.Input

	ToV2ArrayOutput() V2ArrayOutput
	ToV2ArrayOutputWithContext(context.Context) V2ArrayOutput
}

type V2Array []V2Input

func (V2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2)(nil)).Elem()
}

func (i V2Array) ToV2ArrayOutput() V2ArrayOutput {
	return i.ToV2ArrayOutputWithContext(context.Background())
}

func (i V2Array) ToV2ArrayOutputWithContext(ctx context.Context) V2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2ArrayOutput)
}

// V2MapInput is an input type that accepts V2Map and V2MapOutput values.
// You can construct a concrete instance of `V2MapInput` via:
//
//	V2Map{ "key": V2Args{...} }
type V2MapInput interface {
	pulumi.Input

	ToV2MapOutput() V2MapOutput
	ToV2MapOutputWithContext(context.Context) V2MapOutput
}

type V2Map map[string]V2Input

func (V2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2)(nil)).Elem()
}

func (i V2Map) ToV2MapOutput() V2MapOutput {
	return i.ToV2MapOutputWithContext(context.Background())
}

func (i V2Map) ToV2MapOutputWithContext(ctx context.Context) V2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(V2MapOutput)
}

type V2Output struct{ *pulumi.OutputState }

func (V2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**V2)(nil)).Elem()
}

func (o V2Output) ToV2Output() V2Output {
	return o
}

func (o V2Output) ToV2OutputWithContext(ctx context.Context) V2Output {
	return o
}

// Detailed description about the schedule.
func (o V2Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *V2) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Schedule owner.
func (o V2Output) EntityOwner() V2EntityOwnerOutput {
	return o.ApplyT(func(v *V2) V2EntityOwnerOutput { return v.EntityOwner }).(V2EntityOwnerOutput)
}

// Name of the schedule.
func (o V2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *V2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Schedule tags.
func (o V2Output) Tags() V2TagArrayOutput {
	return o.ApplyT(func(v *V2) V2TagArrayOutput { return v.Tags }).(V2TagArrayOutput)
}

// Team id.
func (o V2Output) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *V2) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// Timezone for the schedule.
func (o V2Output) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *V2) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

type V2ArrayOutput struct{ *pulumi.OutputState }

func (V2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*V2)(nil)).Elem()
}

func (o V2ArrayOutput) ToV2ArrayOutput() V2ArrayOutput {
	return o
}

func (o V2ArrayOutput) ToV2ArrayOutputWithContext(ctx context.Context) V2ArrayOutput {
	return o
}

func (o V2ArrayOutput) Index(i pulumi.IntInput) V2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *V2 {
		return vs[0].([]*V2)[vs[1].(int)]
	}).(V2Output)
}

type V2MapOutput struct{ *pulumi.OutputState }

func (V2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*V2)(nil)).Elem()
}

func (o V2MapOutput) ToV2MapOutput() V2MapOutput {
	return o
}

func (o V2MapOutput) ToV2MapOutputWithContext(ctx context.Context) V2MapOutput {
	return o
}

func (o V2MapOutput) MapIndex(k pulumi.StringInput) V2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *V2 {
		return vs[0].(map[string]*V2)[vs[1].(string)]
	}).(V2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*V2Input)(nil)).Elem(), &V2{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2ArrayInput)(nil)).Elem(), V2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*V2MapInput)(nil)).Elem(), V2Map{})
	pulumi.RegisterOutputType(V2Output{})
	pulumi.RegisterOutputType(V2ArrayOutput{})
	pulumi.RegisterOutputType(V2MapOutput{})
}
