// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package service

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [Maintenance Mode](https://support.squadcast.com/docs/maintenance-mode) enables you to reduce alert noise during the scheduled maintenance window. Alerts generated during active maintenance windows would be automatically suppressed and hence, no notifications are generated for those suppressed alerts.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast"
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/service"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTeam, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "example team name",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			exampleService, err := squadcast.LookupService(ctx, &squadcast.LookupServiceArgs{
//				Name:   "example service name",
//				TeamId: exampleTeam.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = service.NewMaintenance(ctx, "exampleServiceMaintenance", &service.MaintenanceArgs{
//				ServiceId: pulumi.String(exampleService.Id),
//				Windows: service.MaintenanceWindowArray{
//					&service.MaintenanceWindowArgs{
//						From:            pulumi.String("2032-06-01T10:30:00.000Z"),
//						Till:            pulumi.String("2032-06-01T11:30:00.000Z"),
//						RepeatTill:      pulumi.String("2032-06-30T10:30:00.000Z"),
//						RepeatFrequency: pulumi.String("week"),
//					},
//					&service.MaintenanceWindowArgs{
//						From: pulumi.String("2032-07-01T10:30:00.000Z"),
//						Till: pulumi.String("2032-07-02T10:30:00.000Z"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// teamID:serviceID
//
// Use 'Get All Teams' and 'Get All Services' APIs to get the id of the team and service respectively
//
// ```sh
// $ pulumi import squadcast:service/maintenance:Maintenance test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
// ```
type Maintenance struct {
	pulumi.CustomResourceState

	// Service id.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// Date and Time range during which maintenance would be carried out
	Windows MaintenanceWindowArrayOutput `pulumi:"windows"`
}

// NewMaintenance registers a new resource with the given unique name, arguments, and options.
func NewMaintenance(ctx *pulumi.Context,
	name string, args *MaintenanceArgs, opts ...pulumi.ResourceOption) (*Maintenance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Maintenance
	err := ctx.RegisterResource("squadcast:service/maintenance:Maintenance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMaintenance gets an existing Maintenance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMaintenance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MaintenanceState, opts ...pulumi.ResourceOption) (*Maintenance, error) {
	var resource Maintenance
	err := ctx.ReadResource("squadcast:service/maintenance:Maintenance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Maintenance resources.
type maintenanceState struct {
	// Service id.
	ServiceId *string `pulumi:"serviceId"`
	// Date and Time range during which maintenance would be carried out
	Windows []MaintenanceWindow `pulumi:"windows"`
}

type MaintenanceState struct {
	// Service id.
	ServiceId pulumi.StringPtrInput
	// Date and Time range during which maintenance would be carried out
	Windows MaintenanceWindowArrayInput
}

func (MaintenanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceState)(nil)).Elem()
}

type maintenanceArgs struct {
	// Service id.
	ServiceId string `pulumi:"serviceId"`
	// Date and Time range during which maintenance would be carried out
	Windows []MaintenanceWindow `pulumi:"windows"`
}

// The set of arguments for constructing a Maintenance resource.
type MaintenanceArgs struct {
	// Service id.
	ServiceId pulumi.StringInput
	// Date and Time range during which maintenance would be carried out
	Windows MaintenanceWindowArrayInput
}

func (MaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*maintenanceArgs)(nil)).Elem()
}

type MaintenanceInput interface {
	pulumi.Input

	ToMaintenanceOutput() MaintenanceOutput
	ToMaintenanceOutputWithContext(ctx context.Context) MaintenanceOutput
}

func (*Maintenance) ElementType() reflect.Type {
	return reflect.TypeOf((**Maintenance)(nil)).Elem()
}

func (i *Maintenance) ToMaintenanceOutput() MaintenanceOutput {
	return i.ToMaintenanceOutputWithContext(context.Background())
}

func (i *Maintenance) ToMaintenanceOutputWithContext(ctx context.Context) MaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceOutput)
}

// MaintenanceArrayInput is an input type that accepts MaintenanceArray and MaintenanceArrayOutput values.
// You can construct a concrete instance of `MaintenanceArrayInput` via:
//
//	MaintenanceArray{ MaintenanceArgs{...} }
type MaintenanceArrayInput interface {
	pulumi.Input

	ToMaintenanceArrayOutput() MaintenanceArrayOutput
	ToMaintenanceArrayOutputWithContext(context.Context) MaintenanceArrayOutput
}

type MaintenanceArray []MaintenanceInput

func (MaintenanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Maintenance)(nil)).Elem()
}

func (i MaintenanceArray) ToMaintenanceArrayOutput() MaintenanceArrayOutput {
	return i.ToMaintenanceArrayOutputWithContext(context.Background())
}

func (i MaintenanceArray) ToMaintenanceArrayOutputWithContext(ctx context.Context) MaintenanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceArrayOutput)
}

// MaintenanceMapInput is an input type that accepts MaintenanceMap and MaintenanceMapOutput values.
// You can construct a concrete instance of `MaintenanceMapInput` via:
//
//	MaintenanceMap{ "key": MaintenanceArgs{...} }
type MaintenanceMapInput interface {
	pulumi.Input

	ToMaintenanceMapOutput() MaintenanceMapOutput
	ToMaintenanceMapOutputWithContext(context.Context) MaintenanceMapOutput
}

type MaintenanceMap map[string]MaintenanceInput

func (MaintenanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Maintenance)(nil)).Elem()
}

func (i MaintenanceMap) ToMaintenanceMapOutput() MaintenanceMapOutput {
	return i.ToMaintenanceMapOutputWithContext(context.Background())
}

func (i MaintenanceMap) ToMaintenanceMapOutputWithContext(ctx context.Context) MaintenanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceMapOutput)
}

type MaintenanceOutput struct{ *pulumi.OutputState }

func (MaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Maintenance)(nil)).Elem()
}

func (o MaintenanceOutput) ToMaintenanceOutput() MaintenanceOutput {
	return o
}

func (o MaintenanceOutput) ToMaintenanceOutputWithContext(ctx context.Context) MaintenanceOutput {
	return o
}

// Service id.
func (o MaintenanceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Maintenance) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// Date and Time range during which maintenance would be carried out
func (o MaintenanceOutput) Windows() MaintenanceWindowArrayOutput {
	return o.ApplyT(func(v *Maintenance) MaintenanceWindowArrayOutput { return v.Windows }).(MaintenanceWindowArrayOutput)
}

type MaintenanceArrayOutput struct{ *pulumi.OutputState }

func (MaintenanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Maintenance)(nil)).Elem()
}

func (o MaintenanceArrayOutput) ToMaintenanceArrayOutput() MaintenanceArrayOutput {
	return o
}

func (o MaintenanceArrayOutput) ToMaintenanceArrayOutputWithContext(ctx context.Context) MaintenanceArrayOutput {
	return o
}

func (o MaintenanceArrayOutput) Index(i pulumi.IntInput) MaintenanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Maintenance {
		return vs[0].([]*Maintenance)[vs[1].(int)]
	}).(MaintenanceOutput)
}

type MaintenanceMapOutput struct{ *pulumi.OutputState }

func (MaintenanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Maintenance)(nil)).Elem()
}

func (o MaintenanceMapOutput) ToMaintenanceMapOutput() MaintenanceMapOutput {
	return o
}

func (o MaintenanceMapOutput) ToMaintenanceMapOutputWithContext(ctx context.Context) MaintenanceMapOutput {
	return o
}

func (o MaintenanceMapOutput) MapIndex(k pulumi.StringInput) MaintenanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Maintenance {
		return vs[0].(map[string]*Maintenance)[vs[1].(string)]
	}).(MaintenanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceInput)(nil)).Elem(), &Maintenance{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceArrayInput)(nil)).Elem(), MaintenanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceMapInput)(nil)).Elem(), MaintenanceMap{})
	pulumi.RegisterOutputType(MaintenanceOutput{})
	pulumi.RegisterOutputType(MaintenanceArrayOutput{})
	pulumi.RegisterOutputType(MaintenanceMapOutput{})
}
