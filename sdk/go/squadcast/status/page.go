// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package status

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// [Status Pages](https://www.squadcast.com/blog/status-pages-101-everything-you-need-to-know-about-status-pages) serves as a communication instrument enabling you to notify your customers regarding service interruptions and scheduled maintenance. You can create a status page for each of your services and customize it to your liking. You can also add components & groups to your status page to show the status of your services.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast"
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/status"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			team, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "Default Team",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			user, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "john@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = status.NewPage(ctx, "testStatusPage", &status.PageArgs{
//				TeamId:       pulumi.String(team.Id),
//				Description:  pulumi.String("Status Page description"),
//				IsPublic:     pulumi.Bool(true),
//				DomainName:   pulumi.String("test-statuspage"),
//				Timezone:     pulumi.String("Asia/Kolkata"),
//				ContactEmail: pulumi.String("example@test.com"),
//				ThemeColor: &status.PageThemeColorArgs{
//					Primary:   pulumi.String("#000000"),
//					Secondary: pulumi.String("#dddddd"),
//				},
//				Owner: &status.PageOwnerArgs{
//					Type: pulumi.String("user"),
//					Id:   pulumi.String(user.Id),
//				},
//				AllowWebhookSubscription:     pulumi.Bool(true),
//				AllowComponentsSubscription:  pulumi.Bool(true),
//				AllowMaintenanceSubscription: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// statusPageID
//
// ```sh
// $ pulumi import squadcast:status/page:Page test_status_page 285
// ```
type Page struct {
	pulumi.CustomResourceState

	// Determines if components subscription is allowed to the status page.
	AllowComponentsSubscription pulumi.BoolPtrOutput `pulumi:"allowComponentsSubscription"`
	// Determines if maintenance subscription is allowed to the status page.
	AllowMaintenanceSubscription pulumi.BoolPtrOutput `pulumi:"allowMaintenanceSubscription"`
	// Determines if webhook subscription is allowed to the status page.
	AllowWebhookSubscription pulumi.BoolPtrOutput `pulumi:"allowWebhookSubscription"`
	// Contact email.
	ContactEmail pulumi.StringOutput `pulumi:"contactEmail"`
	// Custom domain name of the status page.
	CustomDomainName pulumi.StringPtrOutput `pulumi:"customDomainName"`
	// Status page description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\n\n/ to form the URL of the status page (can only be set during creation)
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Determines if the status page is hidden from search engines. Applicable on public status pages only.
	HideFromSearchEngines pulumi.BoolPtrOutput `pulumi:"hideFromSearchEngines"`
	// Determines if the status page is public or not.
	IsPublic pulumi.BoolOutput `pulumi:"isPublic"`
	// Status page name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Status page owner.
	Owner PageOwnerOutput `pulumi:"owner"`
	// Team id.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// Theme color for the status page.
	ThemeColor PageThemeColorOutput `pulumi:"themeColor"`
	// Timezone for the status page.
	Timezone pulumi.StringOutput `pulumi:"timezone"`
}

// NewPage registers a new resource with the given unique name, arguments, and options.
func NewPage(ctx *pulumi.Context,
	name string, args *PageArgs, opts ...pulumi.ResourceOption) (*Page, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContactEmail == nil {
		return nil, errors.New("invalid value for required argument 'ContactEmail'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.IsPublic == nil {
		return nil, errors.New("invalid value for required argument 'IsPublic'")
	}
	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	if args.ThemeColor == nil {
		return nil, errors.New("invalid value for required argument 'ThemeColor'")
	}
	if args.Timezone == nil {
		return nil, errors.New("invalid value for required argument 'Timezone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Page
	err := ctx.RegisterResource("squadcast:status/page:Page", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPage gets an existing Page resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PageState, opts ...pulumi.ResourceOption) (*Page, error) {
	var resource Page
	err := ctx.ReadResource("squadcast:status/page:Page", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Page resources.
type pageState struct {
	// Determines if components subscription is allowed to the status page.
	AllowComponentsSubscription *bool `pulumi:"allowComponentsSubscription"`
	// Determines if maintenance subscription is allowed to the status page.
	AllowMaintenanceSubscription *bool `pulumi:"allowMaintenanceSubscription"`
	// Determines if webhook subscription is allowed to the status page.
	AllowWebhookSubscription *bool `pulumi:"allowWebhookSubscription"`
	// Contact email.
	ContactEmail *string `pulumi:"contactEmail"`
	// Custom domain name of the status page.
	CustomDomainName *string `pulumi:"customDomainName"`
	// Status page description.
	Description *string `pulumi:"description"`
	// Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\n\n/ to form the URL of the status page (can only be set during creation)
	DomainName *string `pulumi:"domainName"`
	// Determines if the status page is hidden from search engines. Applicable on public status pages only.
	HideFromSearchEngines *bool `pulumi:"hideFromSearchEngines"`
	// Determines if the status page is public or not.
	IsPublic *bool `pulumi:"isPublic"`
	// Status page name.
	Name *string `pulumi:"name"`
	// Status page owner.
	Owner *PageOwner `pulumi:"owner"`
	// Team id.
	TeamId *string `pulumi:"teamId"`
	// Theme color for the status page.
	ThemeColor *PageThemeColor `pulumi:"themeColor"`
	// Timezone for the status page.
	Timezone *string `pulumi:"timezone"`
}

type PageState struct {
	// Determines if components subscription is allowed to the status page.
	AllowComponentsSubscription pulumi.BoolPtrInput
	// Determines if maintenance subscription is allowed to the status page.
	AllowMaintenanceSubscription pulumi.BoolPtrInput
	// Determines if webhook subscription is allowed to the status page.
	AllowWebhookSubscription pulumi.BoolPtrInput
	// Contact email.
	ContactEmail pulumi.StringPtrInput
	// Custom domain name of the status page.
	CustomDomainName pulumi.StringPtrInput
	// Status page description.
	Description pulumi.StringPtrInput
	// Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\n\n/ to form the URL of the status page (can only be set during creation)
	DomainName pulumi.StringPtrInput
	// Determines if the status page is hidden from search engines. Applicable on public status pages only.
	HideFromSearchEngines pulumi.BoolPtrInput
	// Determines if the status page is public or not.
	IsPublic pulumi.BoolPtrInput
	// Status page name.
	Name pulumi.StringPtrInput
	// Status page owner.
	Owner PageOwnerPtrInput
	// Team id.
	TeamId pulumi.StringPtrInput
	// Theme color for the status page.
	ThemeColor PageThemeColorPtrInput
	// Timezone for the status page.
	Timezone pulumi.StringPtrInput
}

func (PageState) ElementType() reflect.Type {
	return reflect.TypeOf((*pageState)(nil)).Elem()
}

type pageArgs struct {
	// Determines if components subscription is allowed to the status page.
	AllowComponentsSubscription *bool `pulumi:"allowComponentsSubscription"`
	// Determines if maintenance subscription is allowed to the status page.
	AllowMaintenanceSubscription *bool `pulumi:"allowMaintenanceSubscription"`
	// Determines if webhook subscription is allowed to the status page.
	AllowWebhookSubscription *bool `pulumi:"allowWebhookSubscription"`
	// Contact email.
	ContactEmail string `pulumi:"contactEmail"`
	// Custom domain name of the status page.
	CustomDomainName *string `pulumi:"customDomainName"`
	// Status page description.
	Description *string `pulumi:"description"`
	// Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\n\n/ to form the URL of the status page (can only be set during creation)
	DomainName string `pulumi:"domainName"`
	// Determines if the status page is hidden from search engines. Applicable on public status pages only.
	HideFromSearchEngines *bool `pulumi:"hideFromSearchEngines"`
	// Determines if the status page is public or not.
	IsPublic bool `pulumi:"isPublic"`
	// Status page name.
	Name *string `pulumi:"name"`
	// Status page owner.
	Owner PageOwner `pulumi:"owner"`
	// Team id.
	TeamId string `pulumi:"teamId"`
	// Theme color for the status page.
	ThemeColor PageThemeColor `pulumi:"themeColor"`
	// Timezone for the status page.
	Timezone string `pulumi:"timezone"`
}

// The set of arguments for constructing a Page resource.
type PageArgs struct {
	// Determines if components subscription is allowed to the status page.
	AllowComponentsSubscription pulumi.BoolPtrInput
	// Determines if maintenance subscription is allowed to the status page.
	AllowMaintenanceSubscription pulumi.BoolPtrInput
	// Determines if webhook subscription is allowed to the status page.
	AllowWebhookSubscription pulumi.BoolPtrInput
	// Contact email.
	ContactEmail pulumi.StringInput
	// Custom domain name of the status page.
	CustomDomainName pulumi.StringPtrInput
	// Status page description.
	Description pulumi.StringPtrInput
	// Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\n\n/ to form the URL of the status page (can only be set during creation)
	DomainName pulumi.StringInput
	// Determines if the status page is hidden from search engines. Applicable on public status pages only.
	HideFromSearchEngines pulumi.BoolPtrInput
	// Determines if the status page is public or not.
	IsPublic pulumi.BoolInput
	// Status page name.
	Name pulumi.StringPtrInput
	// Status page owner.
	Owner PageOwnerInput
	// Team id.
	TeamId pulumi.StringInput
	// Theme color for the status page.
	ThemeColor PageThemeColorInput
	// Timezone for the status page.
	Timezone pulumi.StringInput
}

func (PageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pageArgs)(nil)).Elem()
}

type PageInput interface {
	pulumi.Input

	ToPageOutput() PageOutput
	ToPageOutputWithContext(ctx context.Context) PageOutput
}

func (*Page) ElementType() reflect.Type {
	return reflect.TypeOf((**Page)(nil)).Elem()
}

func (i *Page) ToPageOutput() PageOutput {
	return i.ToPageOutputWithContext(context.Background())
}

func (i *Page) ToPageOutputWithContext(ctx context.Context) PageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PageOutput)
}

// PageArrayInput is an input type that accepts PageArray and PageArrayOutput values.
// You can construct a concrete instance of `PageArrayInput` via:
//
//	PageArray{ PageArgs{...} }
type PageArrayInput interface {
	pulumi.Input

	ToPageArrayOutput() PageArrayOutput
	ToPageArrayOutputWithContext(context.Context) PageArrayOutput
}

type PageArray []PageInput

func (PageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Page)(nil)).Elem()
}

func (i PageArray) ToPageArrayOutput() PageArrayOutput {
	return i.ToPageArrayOutputWithContext(context.Background())
}

func (i PageArray) ToPageArrayOutputWithContext(ctx context.Context) PageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PageArrayOutput)
}

// PageMapInput is an input type that accepts PageMap and PageMapOutput values.
// You can construct a concrete instance of `PageMapInput` via:
//
//	PageMap{ "key": PageArgs{...} }
type PageMapInput interface {
	pulumi.Input

	ToPageMapOutput() PageMapOutput
	ToPageMapOutputWithContext(context.Context) PageMapOutput
}

type PageMap map[string]PageInput

func (PageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Page)(nil)).Elem()
}

func (i PageMap) ToPageMapOutput() PageMapOutput {
	return i.ToPageMapOutputWithContext(context.Background())
}

func (i PageMap) ToPageMapOutputWithContext(ctx context.Context) PageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PageMapOutput)
}

type PageOutput struct{ *pulumi.OutputState }

func (PageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Page)(nil)).Elem()
}

func (o PageOutput) ToPageOutput() PageOutput {
	return o
}

func (o PageOutput) ToPageOutputWithContext(ctx context.Context) PageOutput {
	return o
}

// Determines if components subscription is allowed to the status page.
func (o PageOutput) AllowComponentsSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Page) pulumi.BoolPtrOutput { return v.AllowComponentsSubscription }).(pulumi.BoolPtrOutput)
}

// Determines if maintenance subscription is allowed to the status page.
func (o PageOutput) AllowMaintenanceSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Page) pulumi.BoolPtrOutput { return v.AllowMaintenanceSubscription }).(pulumi.BoolPtrOutput)
}

// Determines if webhook subscription is allowed to the status page.
func (o PageOutput) AllowWebhookSubscription() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Page) pulumi.BoolPtrOutput { return v.AllowWebhookSubscription }).(pulumi.BoolPtrOutput)
}

// Contact email.
func (o PageOutput) ContactEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *Page) pulumi.StringOutput { return v.ContactEmail }).(pulumi.StringOutput)
}

// Custom domain name of the status page.
func (o PageOutput) CustomDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Page) pulumi.StringPtrOutput { return v.CustomDomainName }).(pulumi.StringPtrOutput)
}

// Status page description.
func (o PageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Page) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\n\n/ to form the URL of the status page (can only be set during creation)
func (o PageOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Page) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Determines if the status page is hidden from search engines. Applicable on public status pages only.
func (o PageOutput) HideFromSearchEngines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Page) pulumi.BoolPtrOutput { return v.HideFromSearchEngines }).(pulumi.BoolPtrOutput)
}

// Determines if the status page is public or not.
func (o PageOutput) IsPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v *Page) pulumi.BoolOutput { return v.IsPublic }).(pulumi.BoolOutput)
}

// Status page name.
func (o PageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Page) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Status page owner.
func (o PageOutput) Owner() PageOwnerOutput {
	return o.ApplyT(func(v *Page) PageOwnerOutput { return v.Owner }).(PageOwnerOutput)
}

// Team id.
func (o PageOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *Page) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

// Theme color for the status page.
func (o PageOutput) ThemeColor() PageThemeColorOutput {
	return o.ApplyT(func(v *Page) PageThemeColorOutput { return v.ThemeColor }).(PageThemeColorOutput)
}

// Timezone for the status page.
func (o PageOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *Page) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

type PageArrayOutput struct{ *pulumi.OutputState }

func (PageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Page)(nil)).Elem()
}

func (o PageArrayOutput) ToPageArrayOutput() PageArrayOutput {
	return o
}

func (o PageArrayOutput) ToPageArrayOutputWithContext(ctx context.Context) PageArrayOutput {
	return o
}

func (o PageArrayOutput) Index(i pulumi.IntInput) PageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Page {
		return vs[0].([]*Page)[vs[1].(int)]
	}).(PageOutput)
}

type PageMapOutput struct{ *pulumi.OutputState }

func (PageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Page)(nil)).Elem()
}

func (o PageMapOutput) ToPageMapOutput() PageMapOutput {
	return o
}

func (o PageMapOutput) ToPageMapOutputWithContext(ctx context.Context) PageMapOutput {
	return o
}

func (o PageMapOutput) MapIndex(k pulumi.StringInput) PageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Page {
		return vs[0].(map[string]*Page)[vs[1].(string)]
	}).(PageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PageInput)(nil)).Elem(), &Page{})
	pulumi.RegisterInputType(reflect.TypeOf((*PageArrayInput)(nil)).Elem(), PageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PageMapInput)(nil)).Elem(), PageMap{})
	pulumi.RegisterOutputType(PageOutput{})
	pulumi.RegisterOutputType(PageArrayOutput{})
	pulumi.RegisterOutputType(PageMapOutput{})
}
