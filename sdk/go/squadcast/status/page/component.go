// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package page

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Status page component defines a component that represents a specific element within a status page. This resource enables you to configure various attributes of the component, and optionally associate it with a group on the status page.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast"
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/status"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			team, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "Default Team",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			user, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "john@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			testStatusPage, err := status.NewPage(ctx, "testStatusPage", &status.PageArgs{
//				TeamId:       pulumi.String(team.Id),
//				Description:  pulumi.String("Status Page description"),
//				IsPublic:     pulumi.Bool(true),
//				DomainName:   pulumi.String("test-statuspage"),
//				Timezone:     pulumi.String("Asia/Kolkata"),
//				ContactEmail: pulumi.String("example@test.com"),
//				ThemeColor: &status.PageThemeColorArgs{
//					Primary:   pulumi.String("#000000"),
//					Secondary: pulumi.String("#dddddd"),
//				},
//				Owner: &status.PageOwnerArgs{
//					Type: pulumi.String("user"),
//					Id:   pulumi.String(user.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleGroup, err := status.NewGroup(ctx, "exampleGroup", &status.GroupArgs{
//				StatusPageId: testStatusPage.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = status.NewComponent(ctx, "exampleComponent", &status.ComponentArgs{
//				StatusPageId: testStatusPage.ID(),
//				Description:  pulumi.String("Component 1 description"),
//				GroupId:      exampleGroup.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// statusPageID:componentID
//
// ```sh
// $ pulumi import squadcast:status/page/component:Component test_component 300:573
// ```
type Component struct {
	pulumi.CustomResourceState

	// Description of the status page component.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Id of the group to which this component belongs to.
	GroupId pulumi.StringPtrOutput `pulumi:"groupId"`
	// Name of the status page component.
	Name pulumi.StringOutput `pulumi:"name"`
	// Id of the status page to which this component belongs to.
	StatusPageId pulumi.StringOutput `pulumi:"statusPageId"`
}

// NewComponent registers a new resource with the given unique name, arguments, and options.
func NewComponent(ctx *pulumi.Context,
	name string, args *ComponentArgs, opts ...pulumi.ResourceOption) (*Component, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StatusPageId == nil {
		return nil, errors.New("invalid value for required argument 'StatusPageId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Component
	err := ctx.RegisterResource("squadcast:status/page/component:Component", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComponent gets an existing Component resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComponent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComponentState, opts ...pulumi.ResourceOption) (*Component, error) {
	var resource Component
	err := ctx.ReadResource("squadcast:status/page/component:Component", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Component resources.
type componentState struct {
	// Description of the status page component.
	Description *string `pulumi:"description"`
	// Id of the group to which this component belongs to.
	GroupId *string `pulumi:"groupId"`
	// Name of the status page component.
	Name *string `pulumi:"name"`
	// Id of the status page to which this component belongs to.
	StatusPageId *string `pulumi:"statusPageId"`
}

type ComponentState struct {
	// Description of the status page component.
	Description pulumi.StringPtrInput
	// Id of the group to which this component belongs to.
	GroupId pulumi.StringPtrInput
	// Name of the status page component.
	Name pulumi.StringPtrInput
	// Id of the status page to which this component belongs to.
	StatusPageId pulumi.StringPtrInput
}

func (ComponentState) ElementType() reflect.Type {
	return reflect.TypeOf((*componentState)(nil)).Elem()
}

type componentArgs struct {
	// Description of the status page component.
	Description *string `pulumi:"description"`
	// Id of the group to which this component belongs to.
	GroupId *string `pulumi:"groupId"`
	// Name of the status page component.
	Name *string `pulumi:"name"`
	// Id of the status page to which this component belongs to.
	StatusPageId string `pulumi:"statusPageId"`
}

// The set of arguments for constructing a Component resource.
type ComponentArgs struct {
	// Description of the status page component.
	Description pulumi.StringPtrInput
	// Id of the group to which this component belongs to.
	GroupId pulumi.StringPtrInput
	// Name of the status page component.
	Name pulumi.StringPtrInput
	// Id of the status page to which this component belongs to.
	StatusPageId pulumi.StringInput
}

func (ComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*componentArgs)(nil)).Elem()
}

type ComponentInput interface {
	pulumi.Input

	ToComponentOutput() ComponentOutput
	ToComponentOutputWithContext(ctx context.Context) ComponentOutput
}

func (*Component) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (i *Component) ToComponentOutput() ComponentOutput {
	return i.ToComponentOutputWithContext(context.Background())
}

func (i *Component) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOutput)
}

// ComponentArrayInput is an input type that accepts ComponentArray and ComponentArrayOutput values.
// You can construct a concrete instance of `ComponentArrayInput` via:
//
//	ComponentArray{ ComponentArgs{...} }
type ComponentArrayInput interface {
	pulumi.Input

	ToComponentArrayOutput() ComponentArrayOutput
	ToComponentArrayOutputWithContext(context.Context) ComponentArrayOutput
}

type ComponentArray []ComponentInput

func (ComponentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Component)(nil)).Elem()
}

func (i ComponentArray) ToComponentArrayOutput() ComponentArrayOutput {
	return i.ToComponentArrayOutputWithContext(context.Background())
}

func (i ComponentArray) ToComponentArrayOutputWithContext(ctx context.Context) ComponentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentArrayOutput)
}

// ComponentMapInput is an input type that accepts ComponentMap and ComponentMapOutput values.
// You can construct a concrete instance of `ComponentMapInput` via:
//
//	ComponentMap{ "key": ComponentArgs{...} }
type ComponentMapInput interface {
	pulumi.Input

	ToComponentMapOutput() ComponentMapOutput
	ToComponentMapOutputWithContext(context.Context) ComponentMapOutput
}

type ComponentMap map[string]ComponentInput

func (ComponentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Component)(nil)).Elem()
}

func (i ComponentMap) ToComponentMapOutput() ComponentMapOutput {
	return i.ToComponentMapOutputWithContext(context.Background())
}

func (i ComponentMap) ToComponentMapOutputWithContext(ctx context.Context) ComponentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentMapOutput)
}

type ComponentOutput struct{ *pulumi.OutputState }

func (ComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (o ComponentOutput) ToComponentOutput() ComponentOutput {
	return o
}

func (o ComponentOutput) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return o
}

// Description of the status page component.
func (o ComponentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Id of the group to which this component belongs to.
func (o ComponentOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Component) pulumi.StringPtrOutput { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Name of the status page component.
func (o ComponentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Id of the status page to which this component belongs to.
func (o ComponentOutput) StatusPageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Component) pulumi.StringOutput { return v.StatusPageId }).(pulumi.StringOutput)
}

type ComponentArrayOutput struct{ *pulumi.OutputState }

func (ComponentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Component)(nil)).Elem()
}

func (o ComponentArrayOutput) ToComponentArrayOutput() ComponentArrayOutput {
	return o
}

func (o ComponentArrayOutput) ToComponentArrayOutputWithContext(ctx context.Context) ComponentArrayOutput {
	return o
}

func (o ComponentArrayOutput) Index(i pulumi.IntInput) ComponentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Component {
		return vs[0].([]*Component)[vs[1].(int)]
	}).(ComponentOutput)
}

type ComponentMapOutput struct{ *pulumi.OutputState }

func (ComponentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Component)(nil)).Elem()
}

func (o ComponentMapOutput) ToComponentMapOutput() ComponentMapOutput {
	return o
}

func (o ComponentMapOutput) ToComponentMapOutputWithContext(ctx context.Context) ComponentMapOutput {
	return o
}

func (o ComponentMapOutput) MapIndex(k pulumi.StringInput) ComponentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Component {
		return vs[0].(map[string]*Component)[vs[1].(string)]
	}).(ComponentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentInput)(nil)).Elem(), &Component{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentArrayInput)(nil)).Elem(), ComponentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentMapInput)(nil)).Elem(), ComponentMap{})
	pulumi.RegisterOutputType(ComponentOutput{})
	pulumi.RegisterOutputType(ComponentArrayOutput{})
	pulumi.RegisterOutputType(ComponentMapOutput{})
}
