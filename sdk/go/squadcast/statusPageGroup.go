// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Status page group is a collection of components. You can add multiple components to a group and show the status of the group on your status page. You can also add multiple groups and show the status of each group on your status page.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			team, err := squadcast.LookupTeam(ctx, &squadcast.LookupTeamArgs{
//				Name: "Default Team",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			user, err := squadcast.LookupUser(ctx, &squadcast.LookupUserArgs{
//				Email: "john@example.com",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			testStatusPage, err := squadcast.NewStatusPage(ctx, "testStatusPage", &squadcast.StatusPageArgs{
//				TeamId:       pulumi.String(team.Id),
//				Description:  pulumi.String("Status Page description"),
//				IsPublic:     pulumi.Bool(true),
//				DomainName:   pulumi.String("test-statuspage"),
//				Timezone:     pulumi.String("Asia/Kolkata"),
//				ContactEmail: pulumi.String("example@test.com"),
//				ThemeColor: &squadcast.StatusPageThemeColorArgs{
//					Primary:   pulumi.String("#000000"),
//					Secondary: pulumi.String("#dddddd"),
//				},
//				Owner: &squadcast.StatusPageOwnerArgs{
//					Type: pulumi.String("user"),
//					Id:   pulumi.String(user.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleGroup, err := squadcast.NewStatusPageGroup(ctx, "exampleGroup", &squadcast.StatusPageGroupArgs{
//				StatusPageId: testStatusPage.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = squadcast.NewStatusPageComponent(ctx, "exampleComponent", &squadcast.StatusPageComponentArgs{
//				StatusPageId: testStatusPage.ID(),
//				Description:  pulumi.String("Component 1 description"),
//				GroupId:      exampleGroup.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// statusPageID:groupID
//
// ```sh
// $ pulumi import squadcast:index/statusPageGroup:StatusPageGroup test_group 300:246
// ```
type StatusPageGroup struct {
	pulumi.CustomResourceState

	// Name of the status page group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Id of the status page to which this group belongs to.
	StatusPageId pulumi.StringOutput `pulumi:"statusPageId"`
}

// NewStatusPageGroup registers a new resource with the given unique name, arguments, and options.
func NewStatusPageGroup(ctx *pulumi.Context,
	name string, args *StatusPageGroupArgs, opts ...pulumi.ResourceOption) (*StatusPageGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StatusPageId == nil {
		return nil, errors.New("invalid value for required argument 'StatusPageId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StatusPageGroup
	err := ctx.RegisterResource("squadcast:index/statusPageGroup:StatusPageGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStatusPageGroup gets an existing StatusPageGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStatusPageGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StatusPageGroupState, opts ...pulumi.ResourceOption) (*StatusPageGroup, error) {
	var resource StatusPageGroup
	err := ctx.ReadResource("squadcast:index/statusPageGroup:StatusPageGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StatusPageGroup resources.
type statusPageGroupState struct {
	// Name of the status page group.
	Name *string `pulumi:"name"`
	// Id of the status page to which this group belongs to.
	StatusPageId *string `pulumi:"statusPageId"`
}

type StatusPageGroupState struct {
	// Name of the status page group.
	Name pulumi.StringPtrInput
	// Id of the status page to which this group belongs to.
	StatusPageId pulumi.StringPtrInput
}

func (StatusPageGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*statusPageGroupState)(nil)).Elem()
}

type statusPageGroupArgs struct {
	// Name of the status page group.
	Name *string `pulumi:"name"`
	// Id of the status page to which this group belongs to.
	StatusPageId string `pulumi:"statusPageId"`
}

// The set of arguments for constructing a StatusPageGroup resource.
type StatusPageGroupArgs struct {
	// Name of the status page group.
	Name pulumi.StringPtrInput
	// Id of the status page to which this group belongs to.
	StatusPageId pulumi.StringInput
}

func (StatusPageGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*statusPageGroupArgs)(nil)).Elem()
}

type StatusPageGroupInput interface {
	pulumi.Input

	ToStatusPageGroupOutput() StatusPageGroupOutput
	ToStatusPageGroupOutputWithContext(ctx context.Context) StatusPageGroupOutput
}

func (*StatusPageGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusPageGroup)(nil)).Elem()
}

func (i *StatusPageGroup) ToStatusPageGroupOutput() StatusPageGroupOutput {
	return i.ToStatusPageGroupOutputWithContext(context.Background())
}

func (i *StatusPageGroup) ToStatusPageGroupOutputWithContext(ctx context.Context) StatusPageGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPageGroupOutput)
}

// StatusPageGroupArrayInput is an input type that accepts StatusPageGroupArray and StatusPageGroupArrayOutput values.
// You can construct a concrete instance of `StatusPageGroupArrayInput` via:
//
//	StatusPageGroupArray{ StatusPageGroupArgs{...} }
type StatusPageGroupArrayInput interface {
	pulumi.Input

	ToStatusPageGroupArrayOutput() StatusPageGroupArrayOutput
	ToStatusPageGroupArrayOutputWithContext(context.Context) StatusPageGroupArrayOutput
}

type StatusPageGroupArray []StatusPageGroupInput

func (StatusPageGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StatusPageGroup)(nil)).Elem()
}

func (i StatusPageGroupArray) ToStatusPageGroupArrayOutput() StatusPageGroupArrayOutput {
	return i.ToStatusPageGroupArrayOutputWithContext(context.Background())
}

func (i StatusPageGroupArray) ToStatusPageGroupArrayOutputWithContext(ctx context.Context) StatusPageGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPageGroupArrayOutput)
}

// StatusPageGroupMapInput is an input type that accepts StatusPageGroupMap and StatusPageGroupMapOutput values.
// You can construct a concrete instance of `StatusPageGroupMapInput` via:
//
//	StatusPageGroupMap{ "key": StatusPageGroupArgs{...} }
type StatusPageGroupMapInput interface {
	pulumi.Input

	ToStatusPageGroupMapOutput() StatusPageGroupMapOutput
	ToStatusPageGroupMapOutputWithContext(context.Context) StatusPageGroupMapOutput
}

type StatusPageGroupMap map[string]StatusPageGroupInput

func (StatusPageGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StatusPageGroup)(nil)).Elem()
}

func (i StatusPageGroupMap) ToStatusPageGroupMapOutput() StatusPageGroupMapOutput {
	return i.ToStatusPageGroupMapOutputWithContext(context.Background())
}

func (i StatusPageGroupMap) ToStatusPageGroupMapOutputWithContext(ctx context.Context) StatusPageGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPageGroupMapOutput)
}

type StatusPageGroupOutput struct{ *pulumi.OutputState }

func (StatusPageGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusPageGroup)(nil)).Elem()
}

func (o StatusPageGroupOutput) ToStatusPageGroupOutput() StatusPageGroupOutput {
	return o
}

func (o StatusPageGroupOutput) ToStatusPageGroupOutputWithContext(ctx context.Context) StatusPageGroupOutput {
	return o
}

// Name of the status page group.
func (o StatusPageGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StatusPageGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Id of the status page to which this group belongs to.
func (o StatusPageGroupOutput) StatusPageId() pulumi.StringOutput {
	return o.ApplyT(func(v *StatusPageGroup) pulumi.StringOutput { return v.StatusPageId }).(pulumi.StringOutput)
}

type StatusPageGroupArrayOutput struct{ *pulumi.OutputState }

func (StatusPageGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StatusPageGroup)(nil)).Elem()
}

func (o StatusPageGroupArrayOutput) ToStatusPageGroupArrayOutput() StatusPageGroupArrayOutput {
	return o
}

func (o StatusPageGroupArrayOutput) ToStatusPageGroupArrayOutputWithContext(ctx context.Context) StatusPageGroupArrayOutput {
	return o
}

func (o StatusPageGroupArrayOutput) Index(i pulumi.IntInput) StatusPageGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StatusPageGroup {
		return vs[0].([]*StatusPageGroup)[vs[1].(int)]
	}).(StatusPageGroupOutput)
}

type StatusPageGroupMapOutput struct{ *pulumi.OutputState }

func (StatusPageGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StatusPageGroup)(nil)).Elem()
}

func (o StatusPageGroupMapOutput) ToStatusPageGroupMapOutput() StatusPageGroupMapOutput {
	return o
}

func (o StatusPageGroupMapOutput) ToStatusPageGroupMapOutputWithContext(ctx context.Context) StatusPageGroupMapOutput {
	return o
}

func (o StatusPageGroupMapOutput) MapIndex(k pulumi.StringInput) StatusPageGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StatusPageGroup {
		return vs[0].(map[string]*StatusPageGroup)[vs[1].(string)]
	}).(StatusPageGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPageGroupInput)(nil)).Elem(), &StatusPageGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPageGroupArrayInput)(nil)).Elem(), StatusPageGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPageGroupMapInput)(nil)).Elem(), StatusPageGroupMap{})
	pulumi.RegisterOutputType(StatusPageGroupOutput{})
	pulumi.RegisterOutputType(StatusPageGroupArrayOutput{})
	pulumi.RegisterOutputType(StatusPageGroupMapOutput{})
}
