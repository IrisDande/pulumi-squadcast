// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package suppression

import (
	"context"
	"reflect"

	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type RulesRule struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions []RulesRuleBasicExpression `pulumi:"basicExpressions"`
	// description.
	Description *string `pulumi:"description"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression *string `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic bool `pulumi:"isBasic"`
	// is_timebased will be true when users use the time based suppression rule
	IsTimebased *bool `pulumi:"isTimebased"`
	// The timeslots for which this rule should be applied.
	Timeslots []RulesRuleTimeslot `pulumi:"timeslots"`
}

// RulesRuleInput is an input type that accepts RulesRuleArgs and RulesRuleOutput values.
// You can construct a concrete instance of `RulesRuleInput` via:
//
//	RulesRuleArgs{...}
type RulesRuleInput interface {
	pulumi.Input

	ToRulesRuleOutput() RulesRuleOutput
	ToRulesRuleOutputWithContext(context.Context) RulesRuleOutput
}

type RulesRuleArgs struct {
	// The basic expression which needs to be evaluated to be true for this rule to apply.
	BasicExpressions RulesRuleBasicExpressionArrayInput `pulumi:"basicExpressions"`
	// description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The expression which needs to be evaluated to be true for this rule to apply.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
	IsBasic pulumi.BoolInput `pulumi:"isBasic"`
	// is_timebased will be true when users use the time based suppression rule
	IsTimebased pulumi.BoolPtrInput `pulumi:"isTimebased"`
	// The timeslots for which this rule should be applied.
	Timeslots RulesRuleTimeslotArrayInput `pulumi:"timeslots"`
}

func (RulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRule)(nil)).Elem()
}

func (i RulesRuleArgs) ToRulesRuleOutput() RulesRuleOutput {
	return i.ToRulesRuleOutputWithContext(context.Background())
}

func (i RulesRuleArgs) ToRulesRuleOutputWithContext(ctx context.Context) RulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleOutput)
}

// RulesRuleArrayInput is an input type that accepts RulesRuleArray and RulesRuleArrayOutput values.
// You can construct a concrete instance of `RulesRuleArrayInput` via:
//
//	RulesRuleArray{ RulesRuleArgs{...} }
type RulesRuleArrayInput interface {
	pulumi.Input

	ToRulesRuleArrayOutput() RulesRuleArrayOutput
	ToRulesRuleArrayOutputWithContext(context.Context) RulesRuleArrayOutput
}

type RulesRuleArray []RulesRuleInput

func (RulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRule)(nil)).Elem()
}

func (i RulesRuleArray) ToRulesRuleArrayOutput() RulesRuleArrayOutput {
	return i.ToRulesRuleArrayOutputWithContext(context.Background())
}

func (i RulesRuleArray) ToRulesRuleArrayOutputWithContext(ctx context.Context) RulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleArrayOutput)
}

type RulesRuleOutput struct{ *pulumi.OutputState }

func (RulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRule)(nil)).Elem()
}

func (o RulesRuleOutput) ToRulesRuleOutput() RulesRuleOutput {
	return o
}

func (o RulesRuleOutput) ToRulesRuleOutputWithContext(ctx context.Context) RulesRuleOutput {
	return o
}

// The basic expression which needs to be evaluated to be true for this rule to apply.
func (o RulesRuleOutput) BasicExpressions() RulesRuleBasicExpressionArrayOutput {
	return o.ApplyT(func(v RulesRule) []RulesRuleBasicExpression { return v.BasicExpressions }).(RulesRuleBasicExpressionArrayOutput)
}

// description.
func (o RulesRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesRule) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The expression which needs to be evaluated to be true for this rule to apply.
func (o RulesRuleOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesRule) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
func (o RulesRuleOutput) IsBasic() pulumi.BoolOutput {
	return o.ApplyT(func(v RulesRule) bool { return v.IsBasic }).(pulumi.BoolOutput)
}

// is_timebased will be true when users use the time based suppression rule
func (o RulesRuleOutput) IsTimebased() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RulesRule) *bool { return v.IsTimebased }).(pulumi.BoolPtrOutput)
}

// The timeslots for which this rule should be applied.
func (o RulesRuleOutput) Timeslots() RulesRuleTimeslotArrayOutput {
	return o.ApplyT(func(v RulesRule) []RulesRuleTimeslot { return v.Timeslots }).(RulesRuleTimeslotArrayOutput)
}

type RulesRuleArrayOutput struct{ *pulumi.OutputState }

func (RulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRule)(nil)).Elem()
}

func (o RulesRuleArrayOutput) ToRulesRuleArrayOutput() RulesRuleArrayOutput {
	return o
}

func (o RulesRuleArrayOutput) ToRulesRuleArrayOutputWithContext(ctx context.Context) RulesRuleArrayOutput {
	return o
}

func (o RulesRuleArrayOutput) Index(i pulumi.IntInput) RulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesRule {
		return vs[0].([]RulesRule)[vs[1].(int)]
	}).(RulesRuleOutput)
}

type RulesRuleBasicExpression struct {
	// left hand side dropdown value
	Lhs string `pulumi:"lhs"`
	// operator
	Op string `pulumi:"op"`
	// right hand side value
	Rhs string `pulumi:"rhs"`
}

// RulesRuleBasicExpressionInput is an input type that accepts RulesRuleBasicExpressionArgs and RulesRuleBasicExpressionOutput values.
// You can construct a concrete instance of `RulesRuleBasicExpressionInput` via:
//
//	RulesRuleBasicExpressionArgs{...}
type RulesRuleBasicExpressionInput interface {
	pulumi.Input

	ToRulesRuleBasicExpressionOutput() RulesRuleBasicExpressionOutput
	ToRulesRuleBasicExpressionOutputWithContext(context.Context) RulesRuleBasicExpressionOutput
}

type RulesRuleBasicExpressionArgs struct {
	// left hand side dropdown value
	Lhs pulumi.StringInput `pulumi:"lhs"`
	// operator
	Op pulumi.StringInput `pulumi:"op"`
	// right hand side value
	Rhs pulumi.StringInput `pulumi:"rhs"`
}

func (RulesRuleBasicExpressionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRuleBasicExpression)(nil)).Elem()
}

func (i RulesRuleBasicExpressionArgs) ToRulesRuleBasicExpressionOutput() RulesRuleBasicExpressionOutput {
	return i.ToRulesRuleBasicExpressionOutputWithContext(context.Background())
}

func (i RulesRuleBasicExpressionArgs) ToRulesRuleBasicExpressionOutputWithContext(ctx context.Context) RulesRuleBasicExpressionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleBasicExpressionOutput)
}

// RulesRuleBasicExpressionArrayInput is an input type that accepts RulesRuleBasicExpressionArray and RulesRuleBasicExpressionArrayOutput values.
// You can construct a concrete instance of `RulesRuleBasicExpressionArrayInput` via:
//
//	RulesRuleBasicExpressionArray{ RulesRuleBasicExpressionArgs{...} }
type RulesRuleBasicExpressionArrayInput interface {
	pulumi.Input

	ToRulesRuleBasicExpressionArrayOutput() RulesRuleBasicExpressionArrayOutput
	ToRulesRuleBasicExpressionArrayOutputWithContext(context.Context) RulesRuleBasicExpressionArrayOutput
}

type RulesRuleBasicExpressionArray []RulesRuleBasicExpressionInput

func (RulesRuleBasicExpressionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRuleBasicExpression)(nil)).Elem()
}

func (i RulesRuleBasicExpressionArray) ToRulesRuleBasicExpressionArrayOutput() RulesRuleBasicExpressionArrayOutput {
	return i.ToRulesRuleBasicExpressionArrayOutputWithContext(context.Background())
}

func (i RulesRuleBasicExpressionArray) ToRulesRuleBasicExpressionArrayOutputWithContext(ctx context.Context) RulesRuleBasicExpressionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleBasicExpressionArrayOutput)
}

type RulesRuleBasicExpressionOutput struct{ *pulumi.OutputState }

func (RulesRuleBasicExpressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRuleBasicExpression)(nil)).Elem()
}

func (o RulesRuleBasicExpressionOutput) ToRulesRuleBasicExpressionOutput() RulesRuleBasicExpressionOutput {
	return o
}

func (o RulesRuleBasicExpressionOutput) ToRulesRuleBasicExpressionOutputWithContext(ctx context.Context) RulesRuleBasicExpressionOutput {
	return o
}

// left hand side dropdown value
func (o RulesRuleBasicExpressionOutput) Lhs() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleBasicExpression) string { return v.Lhs }).(pulumi.StringOutput)
}

// operator
func (o RulesRuleBasicExpressionOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleBasicExpression) string { return v.Op }).(pulumi.StringOutput)
}

// right hand side value
func (o RulesRuleBasicExpressionOutput) Rhs() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleBasicExpression) string { return v.Rhs }).(pulumi.StringOutput)
}

type RulesRuleBasicExpressionArrayOutput struct{ *pulumi.OutputState }

func (RulesRuleBasicExpressionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRuleBasicExpression)(nil)).Elem()
}

func (o RulesRuleBasicExpressionArrayOutput) ToRulesRuleBasicExpressionArrayOutput() RulesRuleBasicExpressionArrayOutput {
	return o
}

func (o RulesRuleBasicExpressionArrayOutput) ToRulesRuleBasicExpressionArrayOutputWithContext(ctx context.Context) RulesRuleBasicExpressionArrayOutput {
	return o
}

func (o RulesRuleBasicExpressionArrayOutput) Index(i pulumi.IntInput) RulesRuleBasicExpressionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesRuleBasicExpression {
		return vs[0].([]RulesRuleBasicExpression)[vs[1].(int)]
	}).(RulesRuleBasicExpressionOutput)
}

type RulesRuleTimeslot struct {
	// Use this field to specify the custom time slots for which this rule should be applied. This field is only applicable when the repetition field is set to custom.
	Customs []RulesRuleTimeslotCustom `pulumi:"customs"`
	// Defines the end date of the time slot
	EndTime string `pulumi:"endTime"`
	// Defines whether the time slot ends or not
	EndsNever *bool `pulumi:"endsNever"`
	// Defines the end date of the repetition
	EndsOn string `pulumi:"endsOn"`
	// Defines if the time slot is an all day slot
	IsAllday *bool `pulumi:"isAllday"`
	// Defines whether repetition is custom or not
	IsCustom *bool `pulumi:"isCustom"`
	// Defines the repetition of the time slot
	Repetition string `pulumi:"repetition"`
	// Defines the start date of the time slot
	StartTime string `pulumi:"startTime"`
	// Time zone for the time slot
	TimeZone string `pulumi:"timeZone"`
}

// RulesRuleTimeslotInput is an input type that accepts RulesRuleTimeslotArgs and RulesRuleTimeslotOutput values.
// You can construct a concrete instance of `RulesRuleTimeslotInput` via:
//
//	RulesRuleTimeslotArgs{...}
type RulesRuleTimeslotInput interface {
	pulumi.Input

	ToRulesRuleTimeslotOutput() RulesRuleTimeslotOutput
	ToRulesRuleTimeslotOutputWithContext(context.Context) RulesRuleTimeslotOutput
}

type RulesRuleTimeslotArgs struct {
	// Use this field to specify the custom time slots for which this rule should be applied. This field is only applicable when the repetition field is set to custom.
	Customs RulesRuleTimeslotCustomArrayInput `pulumi:"customs"`
	// Defines the end date of the time slot
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// Defines whether the time slot ends or not
	EndsNever pulumi.BoolPtrInput `pulumi:"endsNever"`
	// Defines the end date of the repetition
	EndsOn pulumi.StringInput `pulumi:"endsOn"`
	// Defines if the time slot is an all day slot
	IsAllday pulumi.BoolPtrInput `pulumi:"isAllday"`
	// Defines whether repetition is custom or not
	IsCustom pulumi.BoolPtrInput `pulumi:"isCustom"`
	// Defines the repetition of the time slot
	Repetition pulumi.StringInput `pulumi:"repetition"`
	// Defines the start date of the time slot
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Time zone for the time slot
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
}

func (RulesRuleTimeslotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRuleTimeslot)(nil)).Elem()
}

func (i RulesRuleTimeslotArgs) ToRulesRuleTimeslotOutput() RulesRuleTimeslotOutput {
	return i.ToRulesRuleTimeslotOutputWithContext(context.Background())
}

func (i RulesRuleTimeslotArgs) ToRulesRuleTimeslotOutputWithContext(ctx context.Context) RulesRuleTimeslotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleTimeslotOutput)
}

// RulesRuleTimeslotArrayInput is an input type that accepts RulesRuleTimeslotArray and RulesRuleTimeslotArrayOutput values.
// You can construct a concrete instance of `RulesRuleTimeslotArrayInput` via:
//
//	RulesRuleTimeslotArray{ RulesRuleTimeslotArgs{...} }
type RulesRuleTimeslotArrayInput interface {
	pulumi.Input

	ToRulesRuleTimeslotArrayOutput() RulesRuleTimeslotArrayOutput
	ToRulesRuleTimeslotArrayOutputWithContext(context.Context) RulesRuleTimeslotArrayOutput
}

type RulesRuleTimeslotArray []RulesRuleTimeslotInput

func (RulesRuleTimeslotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRuleTimeslot)(nil)).Elem()
}

func (i RulesRuleTimeslotArray) ToRulesRuleTimeslotArrayOutput() RulesRuleTimeslotArrayOutput {
	return i.ToRulesRuleTimeslotArrayOutputWithContext(context.Background())
}

func (i RulesRuleTimeslotArray) ToRulesRuleTimeslotArrayOutputWithContext(ctx context.Context) RulesRuleTimeslotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleTimeslotArrayOutput)
}

type RulesRuleTimeslotOutput struct{ *pulumi.OutputState }

func (RulesRuleTimeslotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRuleTimeslot)(nil)).Elem()
}

func (o RulesRuleTimeslotOutput) ToRulesRuleTimeslotOutput() RulesRuleTimeslotOutput {
	return o
}

func (o RulesRuleTimeslotOutput) ToRulesRuleTimeslotOutputWithContext(ctx context.Context) RulesRuleTimeslotOutput {
	return o
}

// Use this field to specify the custom time slots for which this rule should be applied. This field is only applicable when the repetition field is set to custom.
func (o RulesRuleTimeslotOutput) Customs() RulesRuleTimeslotCustomArrayOutput {
	return o.ApplyT(func(v RulesRuleTimeslot) []RulesRuleTimeslotCustom { return v.Customs }).(RulesRuleTimeslotCustomArrayOutput)
}

// Defines the end date of the time slot
func (o RulesRuleTimeslotOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleTimeslot) string { return v.EndTime }).(pulumi.StringOutput)
}

// Defines whether the time slot ends or not
func (o RulesRuleTimeslotOutput) EndsNever() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RulesRuleTimeslot) *bool { return v.EndsNever }).(pulumi.BoolPtrOutput)
}

// Defines the end date of the repetition
func (o RulesRuleTimeslotOutput) EndsOn() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleTimeslot) string { return v.EndsOn }).(pulumi.StringOutput)
}

// Defines if the time slot is an all day slot
func (o RulesRuleTimeslotOutput) IsAllday() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RulesRuleTimeslot) *bool { return v.IsAllday }).(pulumi.BoolPtrOutput)
}

// Defines whether repetition is custom or not
func (o RulesRuleTimeslotOutput) IsCustom() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RulesRuleTimeslot) *bool { return v.IsCustom }).(pulumi.BoolPtrOutput)
}

// Defines the repetition of the time slot
func (o RulesRuleTimeslotOutput) Repetition() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleTimeslot) string { return v.Repetition }).(pulumi.StringOutput)
}

// Defines the start date of the time slot
func (o RulesRuleTimeslotOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleTimeslot) string { return v.StartTime }).(pulumi.StringOutput)
}

// Time zone for the time slot
func (o RulesRuleTimeslotOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleTimeslot) string { return v.TimeZone }).(pulumi.StringOutput)
}

type RulesRuleTimeslotArrayOutput struct{ *pulumi.OutputState }

func (RulesRuleTimeslotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRuleTimeslot)(nil)).Elem()
}

func (o RulesRuleTimeslotArrayOutput) ToRulesRuleTimeslotArrayOutput() RulesRuleTimeslotArrayOutput {
	return o
}

func (o RulesRuleTimeslotArrayOutput) ToRulesRuleTimeslotArrayOutputWithContext(ctx context.Context) RulesRuleTimeslotArrayOutput {
	return o
}

func (o RulesRuleTimeslotArrayOutput) Index(i pulumi.IntInput) RulesRuleTimeslotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesRuleTimeslot {
		return vs[0].([]RulesRuleTimeslot)[vs[1].(int)]
	}).(RulesRuleTimeslotOutput)
}

type RulesRuleTimeslotCustom struct {
	// Determines how often the rule repeats. Valid values are day, week, month.
	Repeats string `pulumi:"repeats"`
	// Number of times to repeat.
	RepeatsCount *int `pulumi:"repeatsCount"`
	// Repeats on month.
	RepeatsOnMonth *string `pulumi:"repeatsOnMonth"`
	// List of weekdays to repeat on.
	RepeatsOnWeekdays []int `pulumi:"repeatsOnWeekdays"`
}

// RulesRuleTimeslotCustomInput is an input type that accepts RulesRuleTimeslotCustomArgs and RulesRuleTimeslotCustomOutput values.
// You can construct a concrete instance of `RulesRuleTimeslotCustomInput` via:
//
//	RulesRuleTimeslotCustomArgs{...}
type RulesRuleTimeslotCustomInput interface {
	pulumi.Input

	ToRulesRuleTimeslotCustomOutput() RulesRuleTimeslotCustomOutput
	ToRulesRuleTimeslotCustomOutputWithContext(context.Context) RulesRuleTimeslotCustomOutput
}

type RulesRuleTimeslotCustomArgs struct {
	// Determines how often the rule repeats. Valid values are day, week, month.
	Repeats pulumi.StringInput `pulumi:"repeats"`
	// Number of times to repeat.
	RepeatsCount pulumi.IntPtrInput `pulumi:"repeatsCount"`
	// Repeats on month.
	RepeatsOnMonth pulumi.StringPtrInput `pulumi:"repeatsOnMonth"`
	// List of weekdays to repeat on.
	RepeatsOnWeekdays pulumi.IntArrayInput `pulumi:"repeatsOnWeekdays"`
}

func (RulesRuleTimeslotCustomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRuleTimeslotCustom)(nil)).Elem()
}

func (i RulesRuleTimeslotCustomArgs) ToRulesRuleTimeslotCustomOutput() RulesRuleTimeslotCustomOutput {
	return i.ToRulesRuleTimeslotCustomOutputWithContext(context.Background())
}

func (i RulesRuleTimeslotCustomArgs) ToRulesRuleTimeslotCustomOutputWithContext(ctx context.Context) RulesRuleTimeslotCustomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleTimeslotCustomOutput)
}

// RulesRuleTimeslotCustomArrayInput is an input type that accepts RulesRuleTimeslotCustomArray and RulesRuleTimeslotCustomArrayOutput values.
// You can construct a concrete instance of `RulesRuleTimeslotCustomArrayInput` via:
//
//	RulesRuleTimeslotCustomArray{ RulesRuleTimeslotCustomArgs{...} }
type RulesRuleTimeslotCustomArrayInput interface {
	pulumi.Input

	ToRulesRuleTimeslotCustomArrayOutput() RulesRuleTimeslotCustomArrayOutput
	ToRulesRuleTimeslotCustomArrayOutputWithContext(context.Context) RulesRuleTimeslotCustomArrayOutput
}

type RulesRuleTimeslotCustomArray []RulesRuleTimeslotCustomInput

func (RulesRuleTimeslotCustomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRuleTimeslotCustom)(nil)).Elem()
}

func (i RulesRuleTimeslotCustomArray) ToRulesRuleTimeslotCustomArrayOutput() RulesRuleTimeslotCustomArrayOutput {
	return i.ToRulesRuleTimeslotCustomArrayOutputWithContext(context.Background())
}

func (i RulesRuleTimeslotCustomArray) ToRulesRuleTimeslotCustomArrayOutputWithContext(ctx context.Context) RulesRuleTimeslotCustomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleTimeslotCustomArrayOutput)
}

type RulesRuleTimeslotCustomOutput struct{ *pulumi.OutputState }

func (RulesRuleTimeslotCustomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRuleTimeslotCustom)(nil)).Elem()
}

func (o RulesRuleTimeslotCustomOutput) ToRulesRuleTimeslotCustomOutput() RulesRuleTimeslotCustomOutput {
	return o
}

func (o RulesRuleTimeslotCustomOutput) ToRulesRuleTimeslotCustomOutputWithContext(ctx context.Context) RulesRuleTimeslotCustomOutput {
	return o
}

// Determines how often the rule repeats. Valid values are day, week, month.
func (o RulesRuleTimeslotCustomOutput) Repeats() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRuleTimeslotCustom) string { return v.Repeats }).(pulumi.StringOutput)
}

// Number of times to repeat.
func (o RulesRuleTimeslotCustomOutput) RepeatsCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RulesRuleTimeslotCustom) *int { return v.RepeatsCount }).(pulumi.IntPtrOutput)
}

// Repeats on month.
func (o RulesRuleTimeslotCustomOutput) RepeatsOnMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RulesRuleTimeslotCustom) *string { return v.RepeatsOnMonth }).(pulumi.StringPtrOutput)
}

// List of weekdays to repeat on.
func (o RulesRuleTimeslotCustomOutput) RepeatsOnWeekdays() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RulesRuleTimeslotCustom) []int { return v.RepeatsOnWeekdays }).(pulumi.IntArrayOutput)
}

type RulesRuleTimeslotCustomArrayOutput struct{ *pulumi.OutputState }

func (RulesRuleTimeslotCustomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRuleTimeslotCustom)(nil)).Elem()
}

func (o RulesRuleTimeslotCustomArrayOutput) ToRulesRuleTimeslotCustomArrayOutput() RulesRuleTimeslotCustomArrayOutput {
	return o
}

func (o RulesRuleTimeslotCustomArrayOutput) ToRulesRuleTimeslotCustomArrayOutputWithContext(ctx context.Context) RulesRuleTimeslotCustomArrayOutput {
	return o
}

func (o RulesRuleTimeslotCustomArrayOutput) Index(i pulumi.IntInput) RulesRuleTimeslotCustomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesRuleTimeslotCustom {
		return vs[0].([]RulesRuleTimeslotCustom)[vs[1].(int)]
	}).(RulesRuleTimeslotCustomOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleInput)(nil)).Elem(), RulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleArrayInput)(nil)).Elem(), RulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleBasicExpressionInput)(nil)).Elem(), RulesRuleBasicExpressionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleBasicExpressionArrayInput)(nil)).Elem(), RulesRuleBasicExpressionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleTimeslotInput)(nil)).Elem(), RulesRuleTimeslotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleTimeslotArrayInput)(nil)).Elem(), RulesRuleTimeslotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleTimeslotCustomInput)(nil)).Elem(), RulesRuleTimeslotCustomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleTimeslotCustomArrayInput)(nil)).Elem(), RulesRuleTimeslotCustomArray{})
	pulumi.RegisterOutputType(RulesRuleOutput{})
	pulumi.RegisterOutputType(RulesRuleArrayOutput{})
	pulumi.RegisterOutputType(RulesRuleBasicExpressionOutput{})
	pulumi.RegisterOutputType(RulesRuleBasicExpressionArrayOutput{})
	pulumi.RegisterOutputType(RulesRuleTimeslotOutput{})
	pulumi.RegisterOutputType(RulesRuleTimeslotArrayOutput{})
	pulumi.RegisterOutputType(RulesRuleTimeslotCustomOutput{})
	pulumi.RegisterOutputType(RulesRuleTimeslotCustomArrayOutput{})
}
