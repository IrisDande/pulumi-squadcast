// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type Workflow struct {
	pulumi.CustomResourceState

	// The description of the workflow
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the workflow is enabled or not
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The entity owner of the workflow
	EntityOwners WorkflowEntityOwnerArrayOutput `pulumi:"entityOwners"`
	// The filters to be applied on the workflow
	Filters WorkflowFiltersPtrOutput `pulumi:"filters"`
	// The ID of the user who owns the workflow
	OwnerId pulumi.StringOutput `pulumi:"ownerId"`
	// The tags to be applied on the workflow
	Tags WorkflowTagArrayOutput `pulumi:"tags"`
	// The title of the workflow
	Title pulumi.StringOutput `pulumi:"title"`
	// The trigger for the workflow
	Trigger pulumi.StringOutput `pulumi:"trigger"`
}

// NewWorkflow registers a new resource with the given unique name, arguments, and options.
func NewWorkflow(ctx *pulumi.Context,
	name string, args *WorkflowArgs, opts ...pulumi.ResourceOption) (*Workflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityOwners == nil {
		return nil, errors.New("invalid value for required argument 'EntityOwners'")
	}
	if args.OwnerId == nil {
		return nil, errors.New("invalid value for required argument 'OwnerId'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Trigger == nil {
		return nil, errors.New("invalid value for required argument 'Trigger'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Workflow
	err := ctx.RegisterResource("squadcast:index/workflow:Workflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflow gets an existing Workflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowState, opts ...pulumi.ResourceOption) (*Workflow, error) {
	var resource Workflow
	err := ctx.ReadResource("squadcast:index/workflow:Workflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workflow resources.
type workflowState struct {
	// The description of the workflow
	Description *string `pulumi:"description"`
	// Whether the workflow is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// The entity owner of the workflow
	EntityOwners []WorkflowEntityOwner `pulumi:"entityOwners"`
	// The filters to be applied on the workflow
	Filters *WorkflowFilters `pulumi:"filters"`
	// The ID of the user who owns the workflow
	OwnerId *string `pulumi:"ownerId"`
	// The tags to be applied on the workflow
	Tags []WorkflowTag `pulumi:"tags"`
	// The title of the workflow
	Title *string `pulumi:"title"`
	// The trigger for the workflow
	Trigger *string `pulumi:"trigger"`
}

type WorkflowState struct {
	// The description of the workflow
	Description pulumi.StringPtrInput
	// Whether the workflow is enabled or not
	Enabled pulumi.BoolPtrInput
	// The entity owner of the workflow
	EntityOwners WorkflowEntityOwnerArrayInput
	// The filters to be applied on the workflow
	Filters WorkflowFiltersPtrInput
	// The ID of the user who owns the workflow
	OwnerId pulumi.StringPtrInput
	// The tags to be applied on the workflow
	Tags WorkflowTagArrayInput
	// The title of the workflow
	Title pulumi.StringPtrInput
	// The trigger for the workflow
	Trigger pulumi.StringPtrInput
}

func (WorkflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowState)(nil)).Elem()
}

type workflowArgs struct {
	// The description of the workflow
	Description *string `pulumi:"description"`
	// Whether the workflow is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// The entity owner of the workflow
	EntityOwners []WorkflowEntityOwner `pulumi:"entityOwners"`
	// The filters to be applied on the workflow
	Filters *WorkflowFilters `pulumi:"filters"`
	// The ID of the user who owns the workflow
	OwnerId string `pulumi:"ownerId"`
	// The tags to be applied on the workflow
	Tags []WorkflowTag `pulumi:"tags"`
	// The title of the workflow
	Title string `pulumi:"title"`
	// The trigger for the workflow
	Trigger string `pulumi:"trigger"`
}

// The set of arguments for constructing a Workflow resource.
type WorkflowArgs struct {
	// The description of the workflow
	Description pulumi.StringPtrInput
	// Whether the workflow is enabled or not
	Enabled pulumi.BoolPtrInput
	// The entity owner of the workflow
	EntityOwners WorkflowEntityOwnerArrayInput
	// The filters to be applied on the workflow
	Filters WorkflowFiltersPtrInput
	// The ID of the user who owns the workflow
	OwnerId pulumi.StringInput
	// The tags to be applied on the workflow
	Tags WorkflowTagArrayInput
	// The title of the workflow
	Title pulumi.StringInput
	// The trigger for the workflow
	Trigger pulumi.StringInput
}

func (WorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowArgs)(nil)).Elem()
}

type WorkflowInput interface {
	pulumi.Input

	ToWorkflowOutput() WorkflowOutput
	ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput
}

func (*Workflow) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (i *Workflow) ToWorkflowOutput() WorkflowOutput {
	return i.ToWorkflowOutputWithContext(context.Background())
}

func (i *Workflow) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowOutput)
}

// WorkflowArrayInput is an input type that accepts WorkflowArray and WorkflowArrayOutput values.
// You can construct a concrete instance of `WorkflowArrayInput` via:
//
//	WorkflowArray{ WorkflowArgs{...} }
type WorkflowArrayInput interface {
	pulumi.Input

	ToWorkflowArrayOutput() WorkflowArrayOutput
	ToWorkflowArrayOutputWithContext(context.Context) WorkflowArrayOutput
}

type WorkflowArray []WorkflowInput

func (WorkflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workflow)(nil)).Elem()
}

func (i WorkflowArray) ToWorkflowArrayOutput() WorkflowArrayOutput {
	return i.ToWorkflowArrayOutputWithContext(context.Background())
}

func (i WorkflowArray) ToWorkflowArrayOutputWithContext(ctx context.Context) WorkflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowArrayOutput)
}

// WorkflowMapInput is an input type that accepts WorkflowMap and WorkflowMapOutput values.
// You can construct a concrete instance of `WorkflowMapInput` via:
//
//	WorkflowMap{ "key": WorkflowArgs{...} }
type WorkflowMapInput interface {
	pulumi.Input

	ToWorkflowMapOutput() WorkflowMapOutput
	ToWorkflowMapOutputWithContext(context.Context) WorkflowMapOutput
}

type WorkflowMap map[string]WorkflowInput

func (WorkflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workflow)(nil)).Elem()
}

func (i WorkflowMap) ToWorkflowMapOutput() WorkflowMapOutput {
	return i.ToWorkflowMapOutputWithContext(context.Background())
}

func (i WorkflowMap) ToWorkflowMapOutputWithContext(ctx context.Context) WorkflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowMapOutput)
}

type WorkflowOutput struct{ *pulumi.OutputState }

func (WorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workflow)(nil)).Elem()
}

func (o WorkflowOutput) ToWorkflowOutput() WorkflowOutput {
	return o
}

func (o WorkflowOutput) ToWorkflowOutputWithContext(ctx context.Context) WorkflowOutput {
	return o
}

// The description of the workflow
func (o WorkflowOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether the workflow is enabled or not
func (o WorkflowOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Workflow) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The entity owner of the workflow
func (o WorkflowOutput) EntityOwners() WorkflowEntityOwnerArrayOutput {
	return o.ApplyT(func(v *Workflow) WorkflowEntityOwnerArrayOutput { return v.EntityOwners }).(WorkflowEntityOwnerArrayOutput)
}

// The filters to be applied on the workflow
func (o WorkflowOutput) Filters() WorkflowFiltersPtrOutput {
	return o.ApplyT(func(v *Workflow) WorkflowFiltersPtrOutput { return v.Filters }).(WorkflowFiltersPtrOutput)
}

// The ID of the user who owns the workflow
func (o WorkflowOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.OwnerId }).(pulumi.StringOutput)
}

// The tags to be applied on the workflow
func (o WorkflowOutput) Tags() WorkflowTagArrayOutput {
	return o.ApplyT(func(v *Workflow) WorkflowTagArrayOutput { return v.Tags }).(WorkflowTagArrayOutput)
}

// The title of the workflow
func (o WorkflowOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// The trigger for the workflow
func (o WorkflowOutput) Trigger() pulumi.StringOutput {
	return o.ApplyT(func(v *Workflow) pulumi.StringOutput { return v.Trigger }).(pulumi.StringOutput)
}

type WorkflowArrayOutput struct{ *pulumi.OutputState }

func (WorkflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workflow)(nil)).Elem()
}

func (o WorkflowArrayOutput) ToWorkflowArrayOutput() WorkflowArrayOutput {
	return o
}

func (o WorkflowArrayOutput) ToWorkflowArrayOutputWithContext(ctx context.Context) WorkflowArrayOutput {
	return o
}

func (o WorkflowArrayOutput) Index(i pulumi.IntInput) WorkflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workflow {
		return vs[0].([]*Workflow)[vs[1].(int)]
	}).(WorkflowOutput)
}

type WorkflowMapOutput struct{ *pulumi.OutputState }

func (WorkflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workflow)(nil)).Elem()
}

func (o WorkflowMapOutput) ToWorkflowMapOutput() WorkflowMapOutput {
	return o
}

func (o WorkflowMapOutput) ToWorkflowMapOutputWithContext(ctx context.Context) WorkflowMapOutput {
	return o
}

func (o WorkflowMapOutput) MapIndex(k pulumi.StringInput) WorkflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workflow {
		return vs[0].(map[string]*Workflow)[vs[1].(string)]
	}).(WorkflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowInput)(nil)).Elem(), &Workflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowArrayInput)(nil)).Elem(), WorkflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowMapInput)(nil)).Elem(), WorkflowMap{})
	pulumi.RegisterOutputType(WorkflowOutput{})
	pulumi.RegisterOutputType(WorkflowArrayOutput{})
	pulumi.RegisterOutputType(WorkflowMapOutput{})
}
