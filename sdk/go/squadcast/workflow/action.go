// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package workflow

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type Action struct {
	pulumi.CustomResourceState

	// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
	Account pulumi.StringPtrOutput `pulumi:"account"`
	// Whether to automatically name the action
	AutoName pulumi.BoolPtrOutput `pulumi:"autoName"`
	// The body of the request
	Body pulumi.StringPtrOutput `pulumi:"body"`
	// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
	ChannelId pulumi.StringPtrOutput `pulumi:"channelId"`
	// The name of the channel to be archived. (Only for Slack Archive Channel action)
	ChannelName pulumi.StringPtrOutput `pulumi:"channelName"`
	// The communication channels to be added to the incident
	Channels ActionChannelArrayOutput `pulumi:"channels"`
	// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
	ComponentAndImpacts ActionComponentAndImpactArrayOutput `pulumi:"componentAndImpacts"`
	// The description of the ticket. (Only for Jira Create Ticket action)
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The headers to be sent with the request
	Headers ActionHeaderArrayOutput `pulumi:"headers"`
	// The title of the issue to be added. (Only for Add Status Page Issue action)
	IssueTitle pulumi.StringPtrOutput `pulumi:"issueTitle"`
	// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
	IssueType pulumi.StringPtrOutput `pulumi:"issueType"`
	// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
	MemberId pulumi.StringPtrOutput `pulumi:"memberId"`
	// The message to be sent. (Only for Slack/MS-Team Message Channel action)
	Message pulumi.StringPtrOutput `pulumi:"message"`
	// The HTTP method to be used for the call
	Method pulumi.StringPtrOutput `pulumi:"method"`
	// The name of the action
	Name pulumi.StringOutput `pulumi:"name"`
	// The note to be added to the incident
	Note pulumi.StringPtrOutput `pulumi:"note"`
	// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
	PageStatusId pulumi.IntPtrOutput `pulumi:"pageStatusId"`
	// The priority of the incident
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
	Project pulumi.StringPtrOutput `pulumi:"project"`
	// The runbooks to be added to the incident
	Runbooks pulumi.StringArrayOutput `pulumi:"runbooks"`
	// The SLIs to be added to the incident
	Slis pulumi.StringArrayOutput `pulumi:"slis"`
	// ID of the SLO to be added to the incident
	Slo pulumi.IntPtrOutput `pulumi:"slo"`
	// The status and message to be set for the issue. (Only for Add Status Page Issue action)
	StatusAndMessages ActionStatusAndMessageArrayOutput `pulumi:"statusAndMessages"`
	// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
	StatusPageId pulumi.IntPtrOutput `pulumi:"statusPageId"`
	// The subject of the email
	Subject pulumi.StringPtrOutput `pulumi:"subject"`
	// The title of the ticket. (Only for Jira Create Ticket action)
	Title pulumi.StringPtrOutput `pulumi:"title"`
	// The email addresses to which the email is to be sent
	Tos pulumi.StringArrayOutput `pulumi:"tos"`
	// The URL to be called
	Url pulumi.StringPtrOutput `pulumi:"url"`
	// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
	WebhookId pulumi.StringPtrOutput `pulumi:"webhookId"`
	// The ID of the workflow to which this action belongs
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewAction registers a new resource with the given unique name, arguments, and options.
func NewAction(ctx *pulumi.Context,
	name string, args *ActionArgs, opts ...pulumi.ResourceOption) (*Action, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Action
	err := ctx.RegisterResource("squadcast:workflow/action:Action", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAction gets an existing Action resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActionState, opts ...pulumi.ResourceOption) (*Action, error) {
	var resource Action
	err := ctx.ReadResource("squadcast:workflow/action:Action", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Action resources.
type actionState struct {
	// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
	Account *string `pulumi:"account"`
	// Whether to automatically name the action
	AutoName *bool `pulumi:"autoName"`
	// The body of the request
	Body *string `pulumi:"body"`
	// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
	ChannelId *string `pulumi:"channelId"`
	// The name of the channel to be archived. (Only for Slack Archive Channel action)
	ChannelName *string `pulumi:"channelName"`
	// The communication channels to be added to the incident
	Channels []ActionChannel `pulumi:"channels"`
	// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
	ComponentAndImpacts []ActionComponentAndImpact `pulumi:"componentAndImpacts"`
	// The description of the ticket. (Only for Jira Create Ticket action)
	Description *string `pulumi:"description"`
	// The headers to be sent with the request
	Headers []ActionHeader `pulumi:"headers"`
	// The title of the issue to be added. (Only for Add Status Page Issue action)
	IssueTitle *string `pulumi:"issueTitle"`
	// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
	IssueType *string `pulumi:"issueType"`
	// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
	MemberId *string `pulumi:"memberId"`
	// The message to be sent. (Only for Slack/MS-Team Message Channel action)
	Message *string `pulumi:"message"`
	// The HTTP method to be used for the call
	Method *string `pulumi:"method"`
	// The name of the action
	Name *string `pulumi:"name"`
	// The note to be added to the incident
	Note *string `pulumi:"note"`
	// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
	PageStatusId *int `pulumi:"pageStatusId"`
	// The priority of the incident
	Priority *string `pulumi:"priority"`
	// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
	Project *string `pulumi:"project"`
	// The runbooks to be added to the incident
	Runbooks []string `pulumi:"runbooks"`
	// The SLIs to be added to the incident
	Slis []string `pulumi:"slis"`
	// ID of the SLO to be added to the incident
	Slo *int `pulumi:"slo"`
	// The status and message to be set for the issue. (Only for Add Status Page Issue action)
	StatusAndMessages []ActionStatusAndMessage `pulumi:"statusAndMessages"`
	// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
	StatusPageId *int `pulumi:"statusPageId"`
	// The subject of the email
	Subject *string `pulumi:"subject"`
	// The title of the ticket. (Only for Jira Create Ticket action)
	Title *string `pulumi:"title"`
	// The email addresses to which the email is to be sent
	Tos []string `pulumi:"tos"`
	// The URL to be called
	Url *string `pulumi:"url"`
	// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
	WebhookId *string `pulumi:"webhookId"`
	// The ID of the workflow to which this action belongs
	WorkflowId *string `pulumi:"workflowId"`
}

type ActionState struct {
	// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
	Account pulumi.StringPtrInput
	// Whether to automatically name the action
	AutoName pulumi.BoolPtrInput
	// The body of the request
	Body pulumi.StringPtrInput
	// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
	ChannelId pulumi.StringPtrInput
	// The name of the channel to be archived. (Only for Slack Archive Channel action)
	ChannelName pulumi.StringPtrInput
	// The communication channels to be added to the incident
	Channels ActionChannelArrayInput
	// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
	ComponentAndImpacts ActionComponentAndImpactArrayInput
	// The description of the ticket. (Only for Jira Create Ticket action)
	Description pulumi.StringPtrInput
	// The headers to be sent with the request
	Headers ActionHeaderArrayInput
	// The title of the issue to be added. (Only for Add Status Page Issue action)
	IssueTitle pulumi.StringPtrInput
	// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
	IssueType pulumi.StringPtrInput
	// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
	MemberId pulumi.StringPtrInput
	// The message to be sent. (Only for Slack/MS-Team Message Channel action)
	Message pulumi.StringPtrInput
	// The HTTP method to be used for the call
	Method pulumi.StringPtrInput
	// The name of the action
	Name pulumi.StringPtrInput
	// The note to be added to the incident
	Note pulumi.StringPtrInput
	// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
	PageStatusId pulumi.IntPtrInput
	// The priority of the incident
	Priority pulumi.StringPtrInput
	// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
	Project pulumi.StringPtrInput
	// The runbooks to be added to the incident
	Runbooks pulumi.StringArrayInput
	// The SLIs to be added to the incident
	Slis pulumi.StringArrayInput
	// ID of the SLO to be added to the incident
	Slo pulumi.IntPtrInput
	// The status and message to be set for the issue. (Only for Add Status Page Issue action)
	StatusAndMessages ActionStatusAndMessageArrayInput
	// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
	StatusPageId pulumi.IntPtrInput
	// The subject of the email
	Subject pulumi.StringPtrInput
	// The title of the ticket. (Only for Jira Create Ticket action)
	Title pulumi.StringPtrInput
	// The email addresses to which the email is to be sent
	Tos pulumi.StringArrayInput
	// The URL to be called
	Url pulumi.StringPtrInput
	// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
	WebhookId pulumi.StringPtrInput
	// The ID of the workflow to which this action belongs
	WorkflowId pulumi.StringPtrInput
}

func (ActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*actionState)(nil)).Elem()
}

type actionArgs struct {
	// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
	Account *string `pulumi:"account"`
	// Whether to automatically name the action
	AutoName *bool `pulumi:"autoName"`
	// The body of the request
	Body *string `pulumi:"body"`
	// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
	ChannelId *string `pulumi:"channelId"`
	// The name of the channel to be archived. (Only for Slack Archive Channel action)
	ChannelName *string `pulumi:"channelName"`
	// The communication channels to be added to the incident
	Channels []ActionChannel `pulumi:"channels"`
	// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
	ComponentAndImpacts []ActionComponentAndImpact `pulumi:"componentAndImpacts"`
	// The description of the ticket. (Only for Jira Create Ticket action)
	Description *string `pulumi:"description"`
	// The headers to be sent with the request
	Headers []ActionHeader `pulumi:"headers"`
	// The title of the issue to be added. (Only for Add Status Page Issue action)
	IssueTitle *string `pulumi:"issueTitle"`
	// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
	IssueType *string `pulumi:"issueType"`
	// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
	MemberId *string `pulumi:"memberId"`
	// The message to be sent. (Only for Slack/MS-Team Message Channel action)
	Message *string `pulumi:"message"`
	// The HTTP method to be used for the call
	Method *string `pulumi:"method"`
	// The name of the action
	Name *string `pulumi:"name"`
	// The note to be added to the incident
	Note *string `pulumi:"note"`
	// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
	PageStatusId *int `pulumi:"pageStatusId"`
	// The priority of the incident
	Priority *string `pulumi:"priority"`
	// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
	Project *string `pulumi:"project"`
	// The runbooks to be added to the incident
	Runbooks []string `pulumi:"runbooks"`
	// The SLIs to be added to the incident
	Slis []string `pulumi:"slis"`
	// ID of the SLO to be added to the incident
	Slo *int `pulumi:"slo"`
	// The status and message to be set for the issue. (Only for Add Status Page Issue action)
	StatusAndMessages []ActionStatusAndMessage `pulumi:"statusAndMessages"`
	// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
	StatusPageId *int `pulumi:"statusPageId"`
	// The subject of the email
	Subject *string `pulumi:"subject"`
	// The title of the ticket. (Only for Jira Create Ticket action)
	Title *string `pulumi:"title"`
	// The email addresses to which the email is to be sent
	Tos []string `pulumi:"tos"`
	// The URL to be called
	Url *string `pulumi:"url"`
	// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
	WebhookId *string `pulumi:"webhookId"`
	// The ID of the workflow to which this action belongs
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a Action resource.
type ActionArgs struct {
	// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
	Account pulumi.StringPtrInput
	// Whether to automatically name the action
	AutoName pulumi.BoolPtrInput
	// The body of the request
	Body pulumi.StringPtrInput
	// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
	ChannelId pulumi.StringPtrInput
	// The name of the channel to be archived. (Only for Slack Archive Channel action)
	ChannelName pulumi.StringPtrInput
	// The communication channels to be added to the incident
	Channels ActionChannelArrayInput
	// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
	ComponentAndImpacts ActionComponentAndImpactArrayInput
	// The description of the ticket. (Only for Jira Create Ticket action)
	Description pulumi.StringPtrInput
	// The headers to be sent with the request
	Headers ActionHeaderArrayInput
	// The title of the issue to be added. (Only for Add Status Page Issue action)
	IssueTitle pulumi.StringPtrInput
	// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
	IssueType pulumi.StringPtrInput
	// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
	MemberId pulumi.StringPtrInput
	// The message to be sent. (Only for Slack/MS-Team Message Channel action)
	Message pulumi.StringPtrInput
	// The HTTP method to be used for the call
	Method pulumi.StringPtrInput
	// The name of the action
	Name pulumi.StringPtrInput
	// The note to be added to the incident
	Note pulumi.StringPtrInput
	// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
	PageStatusId pulumi.IntPtrInput
	// The priority of the incident
	Priority pulumi.StringPtrInput
	// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
	Project pulumi.StringPtrInput
	// The runbooks to be added to the incident
	Runbooks pulumi.StringArrayInput
	// The SLIs to be added to the incident
	Slis pulumi.StringArrayInput
	// ID of the SLO to be added to the incident
	Slo pulumi.IntPtrInput
	// The status and message to be set for the issue. (Only for Add Status Page Issue action)
	StatusAndMessages ActionStatusAndMessageArrayInput
	// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
	StatusPageId pulumi.IntPtrInput
	// The subject of the email
	Subject pulumi.StringPtrInput
	// The title of the ticket. (Only for Jira Create Ticket action)
	Title pulumi.StringPtrInput
	// The email addresses to which the email is to be sent
	Tos pulumi.StringArrayInput
	// The URL to be called
	Url pulumi.StringPtrInput
	// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
	WebhookId pulumi.StringPtrInput
	// The ID of the workflow to which this action belongs
	WorkflowId pulumi.StringInput
}

func (ActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*actionArgs)(nil)).Elem()
}

type ActionInput interface {
	pulumi.Input

	ToActionOutput() ActionOutput
	ToActionOutputWithContext(ctx context.Context) ActionOutput
}

func (*Action) ElementType() reflect.Type {
	return reflect.TypeOf((**Action)(nil)).Elem()
}

func (i *Action) ToActionOutput() ActionOutput {
	return i.ToActionOutputWithContext(context.Background())
}

func (i *Action) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionOutput)
}

// ActionArrayInput is an input type that accepts ActionArray and ActionArrayOutput values.
// You can construct a concrete instance of `ActionArrayInput` via:
//
//	ActionArray{ ActionArgs{...} }
type ActionArrayInput interface {
	pulumi.Input

	ToActionArrayOutput() ActionArrayOutput
	ToActionArrayOutputWithContext(context.Context) ActionArrayOutput
}

type ActionArray []ActionInput

func (ActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Action)(nil)).Elem()
}

func (i ActionArray) ToActionArrayOutput() ActionArrayOutput {
	return i.ToActionArrayOutputWithContext(context.Background())
}

func (i ActionArray) ToActionArrayOutputWithContext(ctx context.Context) ActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionArrayOutput)
}

// ActionMapInput is an input type that accepts ActionMap and ActionMapOutput values.
// You can construct a concrete instance of `ActionMapInput` via:
//
//	ActionMap{ "key": ActionArgs{...} }
type ActionMapInput interface {
	pulumi.Input

	ToActionMapOutput() ActionMapOutput
	ToActionMapOutputWithContext(context.Context) ActionMapOutput
}

type ActionMap map[string]ActionInput

func (ActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Action)(nil)).Elem()
}

func (i ActionMap) ToActionMapOutput() ActionMapOutput {
	return i.ToActionMapOutputWithContext(context.Background())
}

func (i ActionMap) ToActionMapOutputWithContext(ctx context.Context) ActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActionMapOutput)
}

type ActionOutput struct{ *pulumi.OutputState }

func (ActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Action)(nil)).Elem()
}

func (o ActionOutput) ToActionOutput() ActionOutput {
	return o
}

func (o ActionOutput) ToActionOutputWithContext(ctx context.Context) ActionOutput {
	return o
}

// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
func (o ActionOutput) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.Account }).(pulumi.StringPtrOutput)
}

// Whether to automatically name the action
func (o ActionOutput) AutoName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.BoolPtrOutput { return v.AutoName }).(pulumi.BoolPtrOutput)
}

// The body of the request
func (o ActionOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.Body }).(pulumi.StringPtrOutput)
}

// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
func (o ActionOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.ChannelId }).(pulumi.StringPtrOutput)
}

// The name of the channel to be archived. (Only for Slack Archive Channel action)
func (o ActionOutput) ChannelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.ChannelName }).(pulumi.StringPtrOutput)
}

// The communication channels to be added to the incident
func (o ActionOutput) Channels() ActionChannelArrayOutput {
	return o.ApplyT(func(v *Action) ActionChannelArrayOutput { return v.Channels }).(ActionChannelArrayOutput)
}

// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
func (o ActionOutput) ComponentAndImpacts() ActionComponentAndImpactArrayOutput {
	return o.ApplyT(func(v *Action) ActionComponentAndImpactArrayOutput { return v.ComponentAndImpacts }).(ActionComponentAndImpactArrayOutput)
}

// The description of the ticket. (Only for Jira Create Ticket action)
func (o ActionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The headers to be sent with the request
func (o ActionOutput) Headers() ActionHeaderArrayOutput {
	return o.ApplyT(func(v *Action) ActionHeaderArrayOutput { return v.Headers }).(ActionHeaderArrayOutput)
}

// The title of the issue to be added. (Only for Add Status Page Issue action)
func (o ActionOutput) IssueTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.IssueTitle }).(pulumi.StringPtrOutput)
}

// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
func (o ActionOutput) IssueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.IssueType }).(pulumi.StringPtrOutput)
}

// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
func (o ActionOutput) MemberId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.MemberId }).(pulumi.StringPtrOutput)
}

// The message to be sent. (Only for Slack/MS-Team Message Channel action)
func (o ActionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.Message }).(pulumi.StringPtrOutput)
}

// The HTTP method to be used for the call
func (o ActionOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.Method }).(pulumi.StringPtrOutput)
}

// The name of the action
func (o ActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Action) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The note to be added to the incident
func (o ActionOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.Note }).(pulumi.StringPtrOutput)
}

// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
func (o ActionOutput) PageStatusId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.IntPtrOutput { return v.PageStatusId }).(pulumi.IntPtrOutput)
}

// The priority of the incident
func (o ActionOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
func (o ActionOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

// The runbooks to be added to the incident
func (o ActionOutput) Runbooks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Action) pulumi.StringArrayOutput { return v.Runbooks }).(pulumi.StringArrayOutput)
}

// The SLIs to be added to the incident
func (o ActionOutput) Slis() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Action) pulumi.StringArrayOutput { return v.Slis }).(pulumi.StringArrayOutput)
}

// ID of the SLO to be added to the incident
func (o ActionOutput) Slo() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.IntPtrOutput { return v.Slo }).(pulumi.IntPtrOutput)
}

// The status and message to be set for the issue. (Only for Add Status Page Issue action)
func (o ActionOutput) StatusAndMessages() ActionStatusAndMessageArrayOutput {
	return o.ApplyT(func(v *Action) ActionStatusAndMessageArrayOutput { return v.StatusAndMessages }).(ActionStatusAndMessageArrayOutput)
}

// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
func (o ActionOutput) StatusPageId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.IntPtrOutput { return v.StatusPageId }).(pulumi.IntPtrOutput)
}

// The subject of the email
func (o ActionOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.Subject }).(pulumi.StringPtrOutput)
}

// The title of the ticket. (Only for Jira Create Ticket action)
func (o ActionOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

// The email addresses to which the email is to be sent
func (o ActionOutput) Tos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Action) pulumi.StringArrayOutput { return v.Tos }).(pulumi.StringArrayOutput)
}

// The URL to be called
func (o ActionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
func (o ActionOutput) WebhookId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Action) pulumi.StringPtrOutput { return v.WebhookId }).(pulumi.StringPtrOutput)
}

// The ID of the workflow to which this action belongs
func (o ActionOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *Action) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type ActionArrayOutput struct{ *pulumi.OutputState }

func (ActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Action)(nil)).Elem()
}

func (o ActionArrayOutput) ToActionArrayOutput() ActionArrayOutput {
	return o
}

func (o ActionArrayOutput) ToActionArrayOutputWithContext(ctx context.Context) ActionArrayOutput {
	return o
}

func (o ActionArrayOutput) Index(i pulumi.IntInput) ActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Action {
		return vs[0].([]*Action)[vs[1].(int)]
	}).(ActionOutput)
}

type ActionMapOutput struct{ *pulumi.OutputState }

func (ActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Action)(nil)).Elem()
}

func (o ActionMapOutput) ToActionMapOutput() ActionMapOutput {
	return o
}

func (o ActionMapOutput) ToActionMapOutputWithContext(ctx context.Context) ActionMapOutput {
	return o
}

func (o ActionMapOutput) MapIndex(k pulumi.StringInput) ActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Action {
		return vs[0].(map[string]*Action)[vs[1].(string)]
	}).(ActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActionInput)(nil)).Elem(), &Action{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionArrayInput)(nil)).Elem(), ActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActionMapInput)(nil)).Elem(), ActionMap{})
	pulumi.RegisterOutputType(ActionOutput{})
	pulumi.RegisterOutputType(ActionArrayOutput{})
	pulumi.RegisterOutputType(ActionMapOutput{})
}
