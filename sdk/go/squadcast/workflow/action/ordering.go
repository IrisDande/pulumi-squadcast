// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package action

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type Ordering struct {
	pulumi.CustomResourceState

	// The order of actions in the workflow
	ActionOrders pulumi.IntArrayOutput `pulumi:"actionOrders"`
	// The ID of the workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewOrdering registers a new resource with the given unique name, arguments, and options.
func NewOrdering(ctx *pulumi.Context,
	name string, args *OrderingArgs, opts ...pulumi.ResourceOption) (*Ordering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionOrders == nil {
		return nil, errors.New("invalid value for required argument 'ActionOrders'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ordering
	err := ctx.RegisterResource("squadcast:workflow/action/ordering:Ordering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrdering gets an existing Ordering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrdering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrderingState, opts ...pulumi.ResourceOption) (*Ordering, error) {
	var resource Ordering
	err := ctx.ReadResource("squadcast:workflow/action/ordering:Ordering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ordering resources.
type orderingState struct {
	// The order of actions in the workflow
	ActionOrders []int `pulumi:"actionOrders"`
	// The ID of the workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type OrderingState struct {
	// The order of actions in the workflow
	ActionOrders pulumi.IntArrayInput
	// The ID of the workflow
	WorkflowId pulumi.StringPtrInput
}

func (OrderingState) ElementType() reflect.Type {
	return reflect.TypeOf((*orderingState)(nil)).Elem()
}

type orderingArgs struct {
	// The order of actions in the workflow
	ActionOrders []int `pulumi:"actionOrders"`
	// The ID of the workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a Ordering resource.
type OrderingArgs struct {
	// The order of actions in the workflow
	ActionOrders pulumi.IntArrayInput
	// The ID of the workflow
	WorkflowId pulumi.StringInput
}

func (OrderingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*orderingArgs)(nil)).Elem()
}

type OrderingInput interface {
	pulumi.Input

	ToOrderingOutput() OrderingOutput
	ToOrderingOutputWithContext(ctx context.Context) OrderingOutput
}

func (*Ordering) ElementType() reflect.Type {
	return reflect.TypeOf((**Ordering)(nil)).Elem()
}

func (i *Ordering) ToOrderingOutput() OrderingOutput {
	return i.ToOrderingOutputWithContext(context.Background())
}

func (i *Ordering) ToOrderingOutputWithContext(ctx context.Context) OrderingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderingOutput)
}

// OrderingArrayInput is an input type that accepts OrderingArray and OrderingArrayOutput values.
// You can construct a concrete instance of `OrderingArrayInput` via:
//
//	OrderingArray{ OrderingArgs{...} }
type OrderingArrayInput interface {
	pulumi.Input

	ToOrderingArrayOutput() OrderingArrayOutput
	ToOrderingArrayOutputWithContext(context.Context) OrderingArrayOutput
}

type OrderingArray []OrderingInput

func (OrderingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ordering)(nil)).Elem()
}

func (i OrderingArray) ToOrderingArrayOutput() OrderingArrayOutput {
	return i.ToOrderingArrayOutputWithContext(context.Background())
}

func (i OrderingArray) ToOrderingArrayOutputWithContext(ctx context.Context) OrderingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderingArrayOutput)
}

// OrderingMapInput is an input type that accepts OrderingMap and OrderingMapOutput values.
// You can construct a concrete instance of `OrderingMapInput` via:
//
//	OrderingMap{ "key": OrderingArgs{...} }
type OrderingMapInput interface {
	pulumi.Input

	ToOrderingMapOutput() OrderingMapOutput
	ToOrderingMapOutputWithContext(context.Context) OrderingMapOutput
}

type OrderingMap map[string]OrderingInput

func (OrderingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ordering)(nil)).Elem()
}

func (i OrderingMap) ToOrderingMapOutput() OrderingMapOutput {
	return i.ToOrderingMapOutputWithContext(context.Background())
}

func (i OrderingMap) ToOrderingMapOutputWithContext(ctx context.Context) OrderingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrderingMapOutput)
}

type OrderingOutput struct{ *pulumi.OutputState }

func (OrderingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ordering)(nil)).Elem()
}

func (o OrderingOutput) ToOrderingOutput() OrderingOutput {
	return o
}

func (o OrderingOutput) ToOrderingOutputWithContext(ctx context.Context) OrderingOutput {
	return o
}

// The order of actions in the workflow
func (o OrderingOutput) ActionOrders() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Ordering) pulumi.IntArrayOutput { return v.ActionOrders }).(pulumi.IntArrayOutput)
}

// The ID of the workflow
func (o OrderingOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ordering) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type OrderingArrayOutput struct{ *pulumi.OutputState }

func (OrderingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ordering)(nil)).Elem()
}

func (o OrderingArrayOutput) ToOrderingArrayOutput() OrderingArrayOutput {
	return o
}

func (o OrderingArrayOutput) ToOrderingArrayOutputWithContext(ctx context.Context) OrderingArrayOutput {
	return o
}

func (o OrderingArrayOutput) Index(i pulumi.IntInput) OrderingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ordering {
		return vs[0].([]*Ordering)[vs[1].(int)]
	}).(OrderingOutput)
}

type OrderingMapOutput struct{ *pulumi.OutputState }

func (OrderingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ordering)(nil)).Elem()
}

func (o OrderingMapOutput) ToOrderingMapOutput() OrderingMapOutput {
	return o
}

func (o OrderingMapOutput) ToOrderingMapOutputWithContext(ctx context.Context) OrderingMapOutput {
	return o
}

func (o OrderingMapOutput) MapIndex(k pulumi.StringInput) OrderingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ordering {
		return vs[0].(map[string]*Ordering)[vs[1].(string)]
	}).(OrderingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrderingInput)(nil)).Elem(), &Ordering{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrderingArrayInput)(nil)).Elem(), OrderingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrderingMapInput)(nil)).Elem(), OrderingMap{})
	pulumi.RegisterOutputType(OrderingOutput{})
	pulumi.RegisterOutputType(OrderingArrayOutput{})
	pulumi.RegisterOutputType(OrderingMapOutput{})
}
