// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package squadcast

import (
	"context"
	"reflect"

	"errors"
	"github.com/IrisDande/pulumi-squadcast/sdk/go/squadcast/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type WorkflowAction struct {
	pulumi.CustomResourceState

	// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
	Account pulumi.StringPtrOutput `pulumi:"account"`
	// Whether to automatically name the action
	AutoName pulumi.BoolPtrOutput `pulumi:"autoName"`
	// The body of the request
	Body pulumi.StringPtrOutput `pulumi:"body"`
	// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
	ChannelId pulumi.StringPtrOutput `pulumi:"channelId"`
	// The name of the channel to be archived. (Only for Slack Archive Channel action)
	ChannelName pulumi.StringPtrOutput `pulumi:"channelName"`
	// The communication channels to be added to the incident
	Channels WorkflowActionChannelArrayOutput `pulumi:"channels"`
	// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
	ComponentAndImpacts WorkflowActionComponentAndImpactArrayOutput `pulumi:"componentAndImpacts"`
	// The description of the ticket. (Only for Jira Create Ticket action)
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The headers to be sent with the request
	Headers WorkflowActionHeaderArrayOutput `pulumi:"headers"`
	// The title of the issue to be added. (Only for Add Status Page Issue action)
	IssueTitle pulumi.StringPtrOutput `pulumi:"issueTitle"`
	// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
	IssueType pulumi.StringPtrOutput `pulumi:"issueType"`
	// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
	MemberId pulumi.StringPtrOutput `pulumi:"memberId"`
	// The message to be sent. (Only for Slack/MS-Team Message Channel action)
	Message pulumi.StringPtrOutput `pulumi:"message"`
	// The HTTP method to be used for the call
	Method pulumi.StringPtrOutput `pulumi:"method"`
	// The name of the action
	Name pulumi.StringOutput `pulumi:"name"`
	// The note to be added to the incident
	Note pulumi.StringPtrOutput `pulumi:"note"`
	// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
	PageStatusId pulumi.IntPtrOutput `pulumi:"pageStatusId"`
	// The priority of the incident
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
	Project pulumi.StringPtrOutput `pulumi:"project"`
	// The runbooks to be added to the incident
	Runbooks pulumi.StringArrayOutput `pulumi:"runbooks"`
	// The SLIs to be added to the incident
	Slis pulumi.StringArrayOutput `pulumi:"slis"`
	// ID of the SLO to be added to the incident
	Slo pulumi.IntPtrOutput `pulumi:"slo"`
	// The status and message to be set for the issue. (Only for Add Status Page Issue action)
	StatusAndMessages WorkflowActionStatusAndMessageArrayOutput `pulumi:"statusAndMessages"`
	// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
	StatusPageId pulumi.IntPtrOutput `pulumi:"statusPageId"`
	// The subject of the email
	Subject pulumi.StringPtrOutput `pulumi:"subject"`
	// The title of the ticket. (Only for Jira Create Ticket action)
	Title pulumi.StringPtrOutput `pulumi:"title"`
	// The email addresses to which the email is to be sent
	Tos pulumi.StringArrayOutput `pulumi:"tos"`
	// The URL to be called
	Url pulumi.StringPtrOutput `pulumi:"url"`
	// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
	WebhookId pulumi.StringPtrOutput `pulumi:"webhookId"`
	// The ID of the workflow to which this action belongs
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowAction registers a new resource with the given unique name, arguments, and options.
func NewWorkflowAction(ctx *pulumi.Context,
	name string, args *WorkflowActionArgs, opts ...pulumi.ResourceOption) (*WorkflowAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowAction
	err := ctx.RegisterResource("squadcast:index/workflowAction:WorkflowAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowAction gets an existing WorkflowAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowActionState, opts ...pulumi.ResourceOption) (*WorkflowAction, error) {
	var resource WorkflowAction
	err := ctx.ReadResource("squadcast:index/workflowAction:WorkflowAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowAction resources.
type workflowActionState struct {
	// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
	Account *string `pulumi:"account"`
	// Whether to automatically name the action
	AutoName *bool `pulumi:"autoName"`
	// The body of the request
	Body *string `pulumi:"body"`
	// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
	ChannelId *string `pulumi:"channelId"`
	// The name of the channel to be archived. (Only for Slack Archive Channel action)
	ChannelName *string `pulumi:"channelName"`
	// The communication channels to be added to the incident
	Channels []WorkflowActionChannel `pulumi:"channels"`
	// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
	ComponentAndImpacts []WorkflowActionComponentAndImpact `pulumi:"componentAndImpacts"`
	// The description of the ticket. (Only for Jira Create Ticket action)
	Description *string `pulumi:"description"`
	// The headers to be sent with the request
	Headers []WorkflowActionHeader `pulumi:"headers"`
	// The title of the issue to be added. (Only for Add Status Page Issue action)
	IssueTitle *string `pulumi:"issueTitle"`
	// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
	IssueType *string `pulumi:"issueType"`
	// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
	MemberId *string `pulumi:"memberId"`
	// The message to be sent. (Only for Slack/MS-Team Message Channel action)
	Message *string `pulumi:"message"`
	// The HTTP method to be used for the call
	Method *string `pulumi:"method"`
	// The name of the action
	Name *string `pulumi:"name"`
	// The note to be added to the incident
	Note *string `pulumi:"note"`
	// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
	PageStatusId *int `pulumi:"pageStatusId"`
	// The priority of the incident
	Priority *string `pulumi:"priority"`
	// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
	Project *string `pulumi:"project"`
	// The runbooks to be added to the incident
	Runbooks []string `pulumi:"runbooks"`
	// The SLIs to be added to the incident
	Slis []string `pulumi:"slis"`
	// ID of the SLO to be added to the incident
	Slo *int `pulumi:"slo"`
	// The status and message to be set for the issue. (Only for Add Status Page Issue action)
	StatusAndMessages []WorkflowActionStatusAndMessage `pulumi:"statusAndMessages"`
	// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
	StatusPageId *int `pulumi:"statusPageId"`
	// The subject of the email
	Subject *string `pulumi:"subject"`
	// The title of the ticket. (Only for Jira Create Ticket action)
	Title *string `pulumi:"title"`
	// The email addresses to which the email is to be sent
	Tos []string `pulumi:"tos"`
	// The URL to be called
	Url *string `pulumi:"url"`
	// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
	WebhookId *string `pulumi:"webhookId"`
	// The ID of the workflow to which this action belongs
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowActionState struct {
	// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
	Account pulumi.StringPtrInput
	// Whether to automatically name the action
	AutoName pulumi.BoolPtrInput
	// The body of the request
	Body pulumi.StringPtrInput
	// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
	ChannelId pulumi.StringPtrInput
	// The name of the channel to be archived. (Only for Slack Archive Channel action)
	ChannelName pulumi.StringPtrInput
	// The communication channels to be added to the incident
	Channels WorkflowActionChannelArrayInput
	// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
	ComponentAndImpacts WorkflowActionComponentAndImpactArrayInput
	// The description of the ticket. (Only for Jira Create Ticket action)
	Description pulumi.StringPtrInput
	// The headers to be sent with the request
	Headers WorkflowActionHeaderArrayInput
	// The title of the issue to be added. (Only for Add Status Page Issue action)
	IssueTitle pulumi.StringPtrInput
	// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
	IssueType pulumi.StringPtrInput
	// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
	MemberId pulumi.StringPtrInput
	// The message to be sent. (Only for Slack/MS-Team Message Channel action)
	Message pulumi.StringPtrInput
	// The HTTP method to be used for the call
	Method pulumi.StringPtrInput
	// The name of the action
	Name pulumi.StringPtrInput
	// The note to be added to the incident
	Note pulumi.StringPtrInput
	// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
	PageStatusId pulumi.IntPtrInput
	// The priority of the incident
	Priority pulumi.StringPtrInput
	// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
	Project pulumi.StringPtrInput
	// The runbooks to be added to the incident
	Runbooks pulumi.StringArrayInput
	// The SLIs to be added to the incident
	Slis pulumi.StringArrayInput
	// ID of the SLO to be added to the incident
	Slo pulumi.IntPtrInput
	// The status and message to be set for the issue. (Only for Add Status Page Issue action)
	StatusAndMessages WorkflowActionStatusAndMessageArrayInput
	// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
	StatusPageId pulumi.IntPtrInput
	// The subject of the email
	Subject pulumi.StringPtrInput
	// The title of the ticket. (Only for Jira Create Ticket action)
	Title pulumi.StringPtrInput
	// The email addresses to which the email is to be sent
	Tos pulumi.StringArrayInput
	// The URL to be called
	Url pulumi.StringPtrInput
	// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
	WebhookId pulumi.StringPtrInput
	// The ID of the workflow to which this action belongs
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowActionState)(nil)).Elem()
}

type workflowActionArgs struct {
	// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
	Account *string `pulumi:"account"`
	// Whether to automatically name the action
	AutoName *bool `pulumi:"autoName"`
	// The body of the request
	Body *string `pulumi:"body"`
	// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
	ChannelId *string `pulumi:"channelId"`
	// The name of the channel to be archived. (Only for Slack Archive Channel action)
	ChannelName *string `pulumi:"channelName"`
	// The communication channels to be added to the incident
	Channels []WorkflowActionChannel `pulumi:"channels"`
	// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
	ComponentAndImpacts []WorkflowActionComponentAndImpact `pulumi:"componentAndImpacts"`
	// The description of the ticket. (Only for Jira Create Ticket action)
	Description *string `pulumi:"description"`
	// The headers to be sent with the request
	Headers []WorkflowActionHeader `pulumi:"headers"`
	// The title of the issue to be added. (Only for Add Status Page Issue action)
	IssueTitle *string `pulumi:"issueTitle"`
	// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
	IssueType *string `pulumi:"issueType"`
	// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
	MemberId *string `pulumi:"memberId"`
	// The message to be sent. (Only for Slack/MS-Team Message Channel action)
	Message *string `pulumi:"message"`
	// The HTTP method to be used for the call
	Method *string `pulumi:"method"`
	// The name of the action
	Name *string `pulumi:"name"`
	// The note to be added to the incident
	Note *string `pulumi:"note"`
	// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
	PageStatusId *int `pulumi:"pageStatusId"`
	// The priority of the incident
	Priority *string `pulumi:"priority"`
	// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
	Project *string `pulumi:"project"`
	// The runbooks to be added to the incident
	Runbooks []string `pulumi:"runbooks"`
	// The SLIs to be added to the incident
	Slis []string `pulumi:"slis"`
	// ID of the SLO to be added to the incident
	Slo *int `pulumi:"slo"`
	// The status and message to be set for the issue. (Only for Add Status Page Issue action)
	StatusAndMessages []WorkflowActionStatusAndMessage `pulumi:"statusAndMessages"`
	// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
	StatusPageId *int `pulumi:"statusPageId"`
	// The subject of the email
	Subject *string `pulumi:"subject"`
	// The title of the ticket. (Only for Jira Create Ticket action)
	Title *string `pulumi:"title"`
	// The email addresses to which the email is to be sent
	Tos []string `pulumi:"tos"`
	// The URL to be called
	Url *string `pulumi:"url"`
	// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
	WebhookId *string `pulumi:"webhookId"`
	// The ID of the workflow to which this action belongs
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowAction resource.
type WorkflowActionArgs struct {
	// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
	Account pulumi.StringPtrInput
	// Whether to automatically name the action
	AutoName pulumi.BoolPtrInput
	// The body of the request
	Body pulumi.StringPtrInput
	// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
	ChannelId pulumi.StringPtrInput
	// The name of the channel to be archived. (Only for Slack Archive Channel action)
	ChannelName pulumi.StringPtrInput
	// The communication channels to be added to the incident
	Channels WorkflowActionChannelArrayInput
	// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
	ComponentAndImpacts WorkflowActionComponentAndImpactArrayInput
	// The description of the ticket. (Only for Jira Create Ticket action)
	Description pulumi.StringPtrInput
	// The headers to be sent with the request
	Headers WorkflowActionHeaderArrayInput
	// The title of the issue to be added. (Only for Add Status Page Issue action)
	IssueTitle pulumi.StringPtrInput
	// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
	IssueType pulumi.StringPtrInput
	// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
	MemberId pulumi.StringPtrInput
	// The message to be sent. (Only for Slack/MS-Team Message Channel action)
	Message pulumi.StringPtrInput
	// The HTTP method to be used for the call
	Method pulumi.StringPtrInput
	// The name of the action
	Name pulumi.StringPtrInput
	// The note to be added to the incident
	Note pulumi.StringPtrInput
	// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
	PageStatusId pulumi.IntPtrInput
	// The priority of the incident
	Priority pulumi.StringPtrInput
	// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
	Project pulumi.StringPtrInput
	// The runbooks to be added to the incident
	Runbooks pulumi.StringArrayInput
	// The SLIs to be added to the incident
	Slis pulumi.StringArrayInput
	// ID of the SLO to be added to the incident
	Slo pulumi.IntPtrInput
	// The status and message to be set for the issue. (Only for Add Status Page Issue action)
	StatusAndMessages WorkflowActionStatusAndMessageArrayInput
	// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
	StatusPageId pulumi.IntPtrInput
	// The subject of the email
	Subject pulumi.StringPtrInput
	// The title of the ticket. (Only for Jira Create Ticket action)
	Title pulumi.StringPtrInput
	// The email addresses to which the email is to be sent
	Tos pulumi.StringArrayInput
	// The URL to be called
	Url pulumi.StringPtrInput
	// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
	WebhookId pulumi.StringPtrInput
	// The ID of the workflow to which this action belongs
	WorkflowId pulumi.StringInput
}

func (WorkflowActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowActionArgs)(nil)).Elem()
}

type WorkflowActionInput interface {
	pulumi.Input

	ToWorkflowActionOutput() WorkflowActionOutput
	ToWorkflowActionOutputWithContext(ctx context.Context) WorkflowActionOutput
}

func (*WorkflowAction) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowAction)(nil)).Elem()
}

func (i *WorkflowAction) ToWorkflowActionOutput() WorkflowActionOutput {
	return i.ToWorkflowActionOutputWithContext(context.Background())
}

func (i *WorkflowAction) ToWorkflowActionOutputWithContext(ctx context.Context) WorkflowActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowActionOutput)
}

// WorkflowActionArrayInput is an input type that accepts WorkflowActionArray and WorkflowActionArrayOutput values.
// You can construct a concrete instance of `WorkflowActionArrayInput` via:
//
//	WorkflowActionArray{ WorkflowActionArgs{...} }
type WorkflowActionArrayInput interface {
	pulumi.Input

	ToWorkflowActionArrayOutput() WorkflowActionArrayOutput
	ToWorkflowActionArrayOutputWithContext(context.Context) WorkflowActionArrayOutput
}

type WorkflowActionArray []WorkflowActionInput

func (WorkflowActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowAction)(nil)).Elem()
}

func (i WorkflowActionArray) ToWorkflowActionArrayOutput() WorkflowActionArrayOutput {
	return i.ToWorkflowActionArrayOutputWithContext(context.Background())
}

func (i WorkflowActionArray) ToWorkflowActionArrayOutputWithContext(ctx context.Context) WorkflowActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowActionArrayOutput)
}

// WorkflowActionMapInput is an input type that accepts WorkflowActionMap and WorkflowActionMapOutput values.
// You can construct a concrete instance of `WorkflowActionMapInput` via:
//
//	WorkflowActionMap{ "key": WorkflowActionArgs{...} }
type WorkflowActionMapInput interface {
	pulumi.Input

	ToWorkflowActionMapOutput() WorkflowActionMapOutput
	ToWorkflowActionMapOutputWithContext(context.Context) WorkflowActionMapOutput
}

type WorkflowActionMap map[string]WorkflowActionInput

func (WorkflowActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowAction)(nil)).Elem()
}

func (i WorkflowActionMap) ToWorkflowActionMapOutput() WorkflowActionMapOutput {
	return i.ToWorkflowActionMapOutputWithContext(context.Background())
}

func (i WorkflowActionMap) ToWorkflowActionMapOutputWithContext(ctx context.Context) WorkflowActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowActionMapOutput)
}

type WorkflowActionOutput struct{ *pulumi.OutputState }

func (WorkflowActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowAction)(nil)).Elem()
}

func (o WorkflowActionOutput) ToWorkflowActionOutput() WorkflowActionOutput {
	return o
}

func (o WorkflowActionOutput) ToWorkflowActionOutputWithContext(ctx context.Context) WorkflowActionOutput {
	return o
}

// The account to be used for creating the ticket. (Only for Jira Create Ticket action)
func (o WorkflowActionOutput) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.Account }).(pulumi.StringPtrOutput)
}

// Whether to automatically name the action
func (o WorkflowActionOutput) AutoName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.BoolPtrOutput { return v.AutoName }).(pulumi.BoolPtrOutput)
}

// The body of the request
func (o WorkflowActionOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.Body }).(pulumi.StringPtrOutput)
}

// The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
func (o WorkflowActionOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.ChannelId }).(pulumi.StringPtrOutput)
}

// The name of the channel to be archived. (Only for Slack Archive Channel action)
func (o WorkflowActionOutput) ChannelName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.ChannelName }).(pulumi.StringPtrOutput)
}

// The communication channels to be added to the incident
func (o WorkflowActionOutput) Channels() WorkflowActionChannelArrayOutput {
	return o.ApplyT(func(v *WorkflowAction) WorkflowActionChannelArrayOutput { return v.Channels }).(WorkflowActionChannelArrayOutput)
}

// The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
func (o WorkflowActionOutput) ComponentAndImpacts() WorkflowActionComponentAndImpactArrayOutput {
	return o.ApplyT(func(v *WorkflowAction) WorkflowActionComponentAndImpactArrayOutput { return v.ComponentAndImpacts }).(WorkflowActionComponentAndImpactArrayOutput)
}

// The description of the ticket. (Only for Jira Create Ticket action)
func (o WorkflowActionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The headers to be sent with the request
func (o WorkflowActionOutput) Headers() WorkflowActionHeaderArrayOutput {
	return o.ApplyT(func(v *WorkflowAction) WorkflowActionHeaderArrayOutput { return v.Headers }).(WorkflowActionHeaderArrayOutput)
}

// The title of the issue to be added. (Only for Add Status Page Issue action)
func (o WorkflowActionOutput) IssueTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.IssueTitle }).(pulumi.StringPtrOutput)
}

// The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
func (o WorkflowActionOutput) IssueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.IssueType }).(pulumi.StringPtrOutput)
}

// The ID of the user to which the message is to be sent. (Only for Slack Message User action)
func (o WorkflowActionOutput) MemberId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.MemberId }).(pulumi.StringPtrOutput)
}

// The message to be sent. (Only for Slack/MS-Team Message Channel action)
func (o WorkflowActionOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.Message }).(pulumi.StringPtrOutput)
}

// The HTTP method to be used for the call
func (o WorkflowActionOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.Method }).(pulumi.StringPtrOutput)
}

// The name of the action
func (o WorkflowActionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The note to be added to the incident
func (o WorkflowActionOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.Note }).(pulumi.StringPtrOutput)
}

// The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
func (o WorkflowActionOutput) PageStatusId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.IntPtrOutput { return v.PageStatusId }).(pulumi.IntPtrOutput)
}

// The priority of the incident
func (o WorkflowActionOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// The project to be used for creating the ticket. (Only for Jira Create Ticket action)
func (o WorkflowActionOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.Project }).(pulumi.StringPtrOutput)
}

// The runbooks to be added to the incident
func (o WorkflowActionOutput) Runbooks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringArrayOutput { return v.Runbooks }).(pulumi.StringArrayOutput)
}

// The SLIs to be added to the incident
func (o WorkflowActionOutput) Slis() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringArrayOutput { return v.Slis }).(pulumi.StringArrayOutput)
}

// ID of the SLO to be added to the incident
func (o WorkflowActionOutput) Slo() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.IntPtrOutput { return v.Slo }).(pulumi.IntPtrOutput)
}

// The status and message to be set for the issue. (Only for Add Status Page Issue action)
func (o WorkflowActionOutput) StatusAndMessages() WorkflowActionStatusAndMessageArrayOutput {
	return o.ApplyT(func(v *WorkflowAction) WorkflowActionStatusAndMessageArrayOutput { return v.StatusAndMessages }).(WorkflowActionStatusAndMessageArrayOutput)
}

// The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
func (o WorkflowActionOutput) StatusPageId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.IntPtrOutput { return v.StatusPageId }).(pulumi.IntPtrOutput)
}

// The subject of the email
func (o WorkflowActionOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.Subject }).(pulumi.StringPtrOutput)
}

// The title of the ticket. (Only for Jira Create Ticket action)
func (o WorkflowActionOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

// The email addresses to which the email is to be sent
func (o WorkflowActionOutput) Tos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringArrayOutput { return v.Tos }).(pulumi.StringArrayOutput)
}

// The URL to be called
func (o WorkflowActionOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

// The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
func (o WorkflowActionOutput) WebhookId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringPtrOutput { return v.WebhookId }).(pulumi.StringPtrOutput)
}

// The ID of the workflow to which this action belongs
func (o WorkflowActionOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowAction) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowActionArrayOutput struct{ *pulumi.OutputState }

func (WorkflowActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowAction)(nil)).Elem()
}

func (o WorkflowActionArrayOutput) ToWorkflowActionArrayOutput() WorkflowActionArrayOutput {
	return o
}

func (o WorkflowActionArrayOutput) ToWorkflowActionArrayOutputWithContext(ctx context.Context) WorkflowActionArrayOutput {
	return o
}

func (o WorkflowActionArrayOutput) Index(i pulumi.IntInput) WorkflowActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowAction {
		return vs[0].([]*WorkflowAction)[vs[1].(int)]
	}).(WorkflowActionOutput)
}

type WorkflowActionMapOutput struct{ *pulumi.OutputState }

func (WorkflowActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowAction)(nil)).Elem()
}

func (o WorkflowActionMapOutput) ToWorkflowActionMapOutput() WorkflowActionMapOutput {
	return o
}

func (o WorkflowActionMapOutput) ToWorkflowActionMapOutputWithContext(ctx context.Context) WorkflowActionMapOutput {
	return o
}

func (o WorkflowActionMapOutput) MapIndex(k pulumi.StringInput) WorkflowActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowAction {
		return vs[0].(map[string]*WorkflowAction)[vs[1].(string)]
	}).(WorkflowActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowActionInput)(nil)).Elem(), &WorkflowAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowActionArrayInput)(nil)).Elem(), WorkflowActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowActionMapInput)(nil)).Elem(), WorkflowActionMap{})
	pulumi.RegisterOutputType(WorkflowActionOutput{})
	pulumi.RegisterOutputType(WorkflowActionArrayOutput{})
	pulumi.RegisterOutputType(WorkflowActionMapOutput{})
}
