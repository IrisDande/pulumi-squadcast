// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [Deduplication rules](https://support.squadcast.com/docs/de-duplication-rules) can help you reduce alert noise by organising and grouping alerts. This also provides easy access to similar alerts when needed. When these rules evaluate to true for an incoming incident, alerts will get deduplicated.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@irisdanded/pulumi-squadcast";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const exampleTeam = squadcast.getTeam({
 *     name: "example team name",
 * });
 * const exampleService = exampleTeam.then(exampleTeam => squadcast.getService({
 *     name: "example service name",
 *     teamId: exampleTeam.id,
 * }));
 * const exampleDeduplicationRule = new squadcast.DeduplicationRuleV2("exampleDeduplicationRule", {
 *     serviceId: exampleService.then(exampleService => exampleService.id),
 *     isBasic: false,
 *     description: "not basic",
 *     expression: "payload[\"event_id\"] == 40",
 * });
 * const exampleBasicDeduplicationRule = new squadcast.DeduplicationRuleV2("exampleBasicDeduplicationRule", {
 *     serviceId: exampleService.then(exampleService => exampleService.id),
 *     isBasic: true,
 *     description: "basic",
 *     dependencyDeduplication: true,
 *     timeWindow: 2,
 *     timeUnit: "hour",
 *     basicExpressions: [{
 *         lhs: "payload[\"foo\"]",
 *         op: "is",
 *         rhs: "bar",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * serviceID:ruleID
 *
 * ```sh
 * $ pulumi import squadcast:index/deduplicationRuleV2:DeduplicationRuleV2 test_resource_name 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
 * ```
 */
export class DeduplicationRuleV2 extends pulumi.CustomResource {
    /**
     * Get an existing DeduplicationRuleV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeduplicationRuleV2State, opts?: pulumi.CustomResourceOptions): DeduplicationRuleV2 {
        return new DeduplicationRuleV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:index/deduplicationRuleV2:DeduplicationRuleV2';

    /**
     * Returns true if the given object is an instance of DeduplicationRuleV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeduplicationRuleV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeduplicationRuleV2.__pulumiType;
    }

    /**
     * The basic expression which needs to be evaluated to be true for this rule to apply.
     */
    public readonly basicExpressions!: pulumi.Output<outputs.DeduplicationRuleV2BasicExpression[] | undefined>;
    /**
     * Denotes if dependent services should also be deduplicated
     */
    public readonly dependencyDeduplication!: pulumi.Output<boolean | undefined>;
    /**
     * description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The expression which needs to be evaluated to be true for this rule to apply.
     */
    public readonly expression!: pulumi.Output<string | undefined>;
    /**
     * is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
     */
    public readonly isBasic!: pulumi.Output<boolean>;
    /**
     * Service id.
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * time unit (mins or hours)
     */
    public readonly timeUnit!: pulumi.Output<string | undefined>;
    /**
     * integer for time_unit
     */
    public readonly timeWindow!: pulumi.Output<number | undefined>;

    /**
     * Create a DeduplicationRuleV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DeduplicationRuleV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeduplicationRuleV2Args | DeduplicationRuleV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeduplicationRuleV2State | undefined;
            resourceInputs["basicExpressions"] = state ? state.basicExpressions : undefined;
            resourceInputs["dependencyDeduplication"] = state ? state.dependencyDeduplication : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expression"] = state ? state.expression : undefined;
            resourceInputs["isBasic"] = state ? state.isBasic : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["timeUnit"] = state ? state.timeUnit : undefined;
            resourceInputs["timeWindow"] = state ? state.timeWindow : undefined;
        } else {
            const args = argsOrState as DeduplicationRuleV2Args | undefined;
            if ((!args || args.isBasic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isBasic'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["basicExpressions"] = args ? args.basicExpressions : undefined;
            resourceInputs["dependencyDeduplication"] = args ? args.dependencyDeduplication : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expression"] = args ? args.expression : undefined;
            resourceInputs["isBasic"] = args ? args.isBasic : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["timeUnit"] = args ? args.timeUnit : undefined;
            resourceInputs["timeWindow"] = args ? args.timeWindow : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeduplicationRuleV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DeduplicationRuleV2 resources.
 */
export interface DeduplicationRuleV2State {
    /**
     * The basic expression which needs to be evaluated to be true for this rule to apply.
     */
    basicExpressions?: pulumi.Input<pulumi.Input<inputs.DeduplicationRuleV2BasicExpression>[]>;
    /**
     * Denotes if dependent services should also be deduplicated
     */
    dependencyDeduplication?: pulumi.Input<boolean>;
    /**
     * description.
     */
    description?: pulumi.Input<string>;
    /**
     * The expression which needs to be evaluated to be true for this rule to apply.
     */
    expression?: pulumi.Input<string>;
    /**
     * is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
     */
    isBasic?: pulumi.Input<boolean>;
    /**
     * Service id.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * time unit (mins or hours)
     */
    timeUnit?: pulumi.Input<string>;
    /**
     * integer for time_unit
     */
    timeWindow?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DeduplicationRuleV2 resource.
 */
export interface DeduplicationRuleV2Args {
    /**
     * The basic expression which needs to be evaluated to be true for this rule to apply.
     */
    basicExpressions?: pulumi.Input<pulumi.Input<inputs.DeduplicationRuleV2BasicExpression>[]>;
    /**
     * Denotes if dependent services should also be deduplicated
     */
    dependencyDeduplication?: pulumi.Input<boolean>;
    /**
     * description.
     */
    description?: pulumi.Input<string>;
    /**
     * The expression which needs to be evaluated to be true for this rule to apply.
     */
    expression?: pulumi.Input<string>;
    /**
     * is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
     */
    isBasic: pulumi.Input<boolean>;
    /**
     * Service id.
     */
    serviceId: pulumi.Input<string>;
    /**
     * time unit (mins or hours)
     */
    timeUnit?: pulumi.Input<string>;
    /**
     * integer for time_unit
     */
    timeWindow?: pulumi.Input<number>;
}
