// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * [Escalation Policies](https://support.squadcast.com/docs/escalation-policies) defines rules indicating when and how alerts will escalate to various Users, Squads and (or) Schedules within your Organization.Use this data source to get information about a specific escalation policy that you can use for other Squadcast resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const test = squadcast.escalation.getPolicy({
 *     name: squadcast_escalation_policy.test.name,
 *     teamId: "team id",
 * });
 * ```
 */
export function getPolicy(args: GetPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("squadcast:escalation/getPolicy:getPolicy", {
        "name": args.name,
        "teamId": args.teamId,
    }, opts);
}

/**
 * A collection of arguments for invoking getPolicy.
 */
export interface GetPolicyArgs {
    /**
     * Name of the Escalation Policy
     */
    name: string;
    /**
     * Team id.
     */
    teamId: string;
}

/**
 * A collection of values returned by getPolicy.
 */
export interface GetPolicyResult {
    /**
     * Detailed description about the nature & purpose Escalation policy
     */
    readonly description: string;
    /**
     * Escalation policy owner
     */
    readonly entityOwners: outputs.escalation.GetPolicyEntityOwner[];
    /**
     * Escalation Policy id.
     */
    readonly id: string;
    /**
     * Name of the Escalation Policy
     */
    readonly name: string;
    /**
     * You can choose to repeat the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
     */
    readonly repeats: outputs.escalation.GetPolicyRepeat[];
    /**
     * Rules will have the details of who to notify and when to notify and how to notify them.
     */
    readonly rules: outputs.escalation.GetPolicyRule[];
    /**
     * Team id.
     */
    readonly teamId: string;
}
/**
 * [Escalation Policies](https://support.squadcast.com/docs/escalation-policies) defines rules indicating when and how alerts will escalate to various Users, Squads and (or) Schedules within your Organization.Use this data source to get information about a specific escalation policy that you can use for other Squadcast resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const test = squadcast.escalation.getPolicy({
 *     name: squadcast_escalation_policy.test.name,
 *     teamId: "team id",
 * });
 * ```
 */
export function getPolicyOutput(args: GetPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPolicyResult> {
    return pulumi.output(args).apply((a: any) => getPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getPolicy.
 */
export interface GetPolicyOutputArgs {
    /**
     * Name of the Escalation Policy
     */
    name: pulumi.Input<string>;
    /**
     * Team id.
     */
    teamId: pulumi.Input<string>;
}
