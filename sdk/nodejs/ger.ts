// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Global Event Ruleset (GER) is a centralized set of rules that defines service routes for incoming events.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@irisdanded/pulumi-squadcast";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const team = squadcast.getTeam({
 *     name: "Example Team",
 * });
 * const user = squadcast.getUser({
 *     email: "john@example.com",
 * });
 * const service = team.then(team => squadcast.getService({
 *     name: "Example Service",
 *     teamId: team.id,
 * }));
 * const ger = new squadcast.Ger("ger", {
 *     description: "Example GER Description",
 *     teamId: team.then(team => team.id),
 *     entityOwner: {
 *         id: user.then(user => user.id),
 *         type: "user",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * gerID
 *
 * ```sh
 * $ pulumi import squadcast:index/ger:Ger example_ger_import "53"
 * ```
 */
export class Ger extends pulumi.CustomResource {
    /**
     * Get an existing Ger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GerState, opts?: pulumi.CustomResourceOptions): Ger {
        return new Ger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:index/ger:Ger';

    /**
     * Returns true if the given object is an instance of Ger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ger.__pulumiType;
    }

    /**
     * GER description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * GER owner.
     */
    public readonly entityOwner!: pulumi.Output<outputs.GerEntityOwner>;
    /**
     * GER name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Routing Key is an identifier used to determine the ruleset that an incoming event belongs to. It is a common key that associates multiple alert sources with their configured rules, ensuring events are routed to the appropriate services when the defined criteria are met.
     */
    public /*out*/ readonly routingKey!: pulumi.Output<string>;
    /**
     * Team id.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a Ger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GerArgs | GerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GerState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["entityOwner"] = state ? state.entityOwner : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["routingKey"] = state ? state.routingKey : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as GerArgs | undefined;
            if ((!args || args.entityOwner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityOwner'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["entityOwner"] = args ? args.entityOwner : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["routingKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ger.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ger resources.
 */
export interface GerState {
    /**
     * GER description.
     */
    description?: pulumi.Input<string>;
    /**
     * GER owner.
     */
    entityOwner?: pulumi.Input<inputs.GerEntityOwner>;
    /**
     * GER name.
     */
    name?: pulumi.Input<string>;
    /**
     * Routing Key is an identifier used to determine the ruleset that an incoming event belongs to. It is a common key that associates multiple alert sources with their configured rules, ensuring events are routed to the appropriate services when the defined criteria are met.
     */
    routingKey?: pulumi.Input<string>;
    /**
     * Team id.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ger resource.
 */
export interface GerArgs {
    /**
     * GER description.
     */
    description?: pulumi.Input<string>;
    /**
     * GER owner.
     */
    entityOwner: pulumi.Input<inputs.GerEntityOwner>;
    /**
     * GER name.
     */
    name?: pulumi.Input<string>;
    /**
     * Team id.
     */
    teamId: pulumi.Input<string>;
}
