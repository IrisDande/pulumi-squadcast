// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GerArgs, GerState } from "./ger";
export type Ger = import("./ger").Ger;
export const Ger: typeof import("./ger").Ger = null as any;
utilities.lazyLoad(exports, ["Ger"], () => require("./ger"));

export { GetRunbookArgs, GetRunbookResult, GetRunbookOutputArgs } from "./getRunbook";
export const getRunbook: typeof import("./getRunbook").getRunbook = null as any;
export const getRunbookOutput: typeof import("./getRunbook").getRunbookOutput = null as any;
utilities.lazyLoad(exports, ["getRunbook","getRunbookOutput"], () => require("./getRunbook"));

export { GetScheduleArgs, GetScheduleResult, GetScheduleOutputArgs } from "./getSchedule";
export const getSchedule: typeof import("./getSchedule").getSchedule = null as any;
export const getScheduleOutput: typeof import("./getSchedule").getScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSchedule","getScheduleOutput"], () => require("./getSchedule"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetSquadArgs, GetSquadResult, GetSquadOutputArgs } from "./getSquad";
export const getSquad: typeof import("./getSquad").getSquad = null as any;
export const getSquadOutput: typeof import("./getSquad").getSquadOutput = null as any;
utilities.lazyLoad(exports, ["getSquad","getSquadOutput"], () => require("./getSquad"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetWebformArgs, GetWebformResult, GetWebformOutputArgs } from "./getWebform";
export const getWebform: typeof import("./getWebform").getWebform = null as any;
export const getWebformOutput: typeof import("./getWebform").getWebformOutput = null as any;
utilities.lazyLoad(exports, ["getWebform","getWebformOutput"], () => require("./getWebform"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RunbookArgs, RunbookState } from "./runbook";
export type Runbook = import("./runbook").Runbook;
export const Runbook: typeof import("./runbook").Runbook = null as any;
utilities.lazyLoad(exports, ["Runbook"], () => require("./runbook"));

export { ScheduleArgs, ScheduleState } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { SloArgs, SloState } from "./slo";
export type Slo = import("./slo").Slo;
export const Slo: typeof import("./slo").Slo = null as any;
utilities.lazyLoad(exports, ["Slo"], () => require("./slo"));

export { SquadArgs, SquadState } from "./squad";
export type Squad = import("./squad").Squad;
export const Squad: typeof import("./squad").Squad = null as any;
utilities.lazyLoad(exports, ["Squad"], () => require("./squad"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { WebformArgs, WebformState } from "./webform";
export type Webform = import("./webform").Webform;
export const Webform: typeof import("./webform").Webform = null as any;
utilities.lazyLoad(exports, ["Webform"], () => require("./webform"));

export { WorkflowArgs, WorkflowState } from "./workflow";
export type Workflow = import("./workflow").Workflow;
export const Workflow: typeof import("./workflow").Workflow = null as any;
utilities.lazyLoad(exports, ["Workflow"], () => require("./workflow"));


// Export sub-modules:
import * as config from "./config";
import * as deduplication from "./deduplication";
import * as escalation from "./escalation";
import * as ger from "./ger";
import * as routing from "./routing";
import * as schedule from "./schedule";
import * as service from "./service";
import * as status from "./status";
import * as suppression from "./suppression";
import * as tagging from "./tagging";
import * as team from "./team";
import * as types from "./types";
import * as workflow from "./workflow";

export {
    config,
    deduplication,
    escalation,
    ger,
    routing,
    schedule,
    service,
    status,
    suppression,
    tagging,
    team,
    types,
    workflow,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "squadcast:index/ger:Ger":
                return new Ger(name, <any>undefined, { urn })
            case "squadcast:index/runbook:Runbook":
                return new Runbook(name, <any>undefined, { urn })
            case "squadcast:index/schedule:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            case "squadcast:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "squadcast:index/slo:Slo":
                return new Slo(name, <any>undefined, { urn })
            case "squadcast:index/squad:Squad":
                return new Squad(name, <any>undefined, { urn })
            case "squadcast:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "squadcast:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "squadcast:index/webform:Webform":
                return new Webform(name, <any>undefined, { urn })
            case "squadcast:index/workflow:Workflow":
                return new Workflow(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("squadcast", "index/ger", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/runbook", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/schedule", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/service", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/slo", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/squad", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/team", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/user", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/webform", _module)
pulumi.runtime.registerResourceModule("squadcast", "index/workflow", _module)
pulumi.runtime.registerResourcePackage("squadcast", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:squadcast") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
