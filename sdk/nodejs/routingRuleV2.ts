// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [Routing rules](https://support.squadcast.com/docs/alert-routing) allows you to ensure that alerts are routed to the right responder with the help of `event tags` attached to them.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@irisdanded/pulumi-squadcast";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const exampleTeam = squadcast.getTeam({
 *     name: "example team name",
 * });
 * const exampleUser = squadcast.getUser({
 *     email: "test@example.com",
 * });
 * const exampleService = exampleTeam.then(exampleTeam => squadcast.getService({
 *     name: "example service name",
 *     teamId: exampleTeam.id,
 * }));
 * const exampleEscalaionPolicy = exampleTeam.then(exampleTeam => squadcast.getEscalationPolicy({
 *     name: "example escalation policy name",
 *     teamId: exampleTeam.id,
 * }));
 * const exampleSquad = exampleTeam.then(exampleTeam => squadcast.getSquad({
 *     name: "example squad name",
 *     teamId: exampleTeam.id,
 * }));
 * const exampleRoutingRules = new squadcast.RoutingRuleV2("exampleRoutingRules", {
 *     serviceId: exampleService.then(exampleService => exampleService.id),
 *     isBasic: false,
 *     expression: "payload[\"event_id\"] == 40",
 *     routeToId: exampleUser.then(exampleUser => exampleUser.id),
 *     routeToType: "user",
 * });
 * const exampleRoutingRulesBasic = new squadcast.RoutingRuleV2("exampleRoutingRulesBasic", {
 *     serviceId: exampleService.then(exampleService => exampleService.id),
 *     isBasic: true,
 *     basicExpressions: [{
 *         lhs: "payload[\"foo\"]",
 *         rhs: "bar",
 *     }],
 *     routeToId: data.squadcast_user.example_escalaion_policy.id,
 *     routeToType: "escalationpolicy",
 * });
 * ```
 *
 * ## Import
 *
 * serviceID:ruleID
 *
 * ```sh
 * $ pulumi import squadcast:index/routingRuleV2:RoutingRuleV2 test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
 * ```
 */
export class RoutingRuleV2 extends pulumi.CustomResource {
    /**
     * Get an existing RoutingRuleV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoutingRuleV2State, opts?: pulumi.CustomResourceOptions): RoutingRuleV2 {
        return new RoutingRuleV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:index/routingRuleV2:RoutingRuleV2';

    /**
     * Returns true if the given object is an instance of RoutingRuleV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoutingRuleV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoutingRuleV2.__pulumiType;
    }

    /**
     * The basic expression which needs to be evaluated to be true for this rule to apply.
     */
    public readonly basicExpressions!: pulumi.Output<outputs.RoutingRuleV2BasicExpression[] | undefined>;
    /**
     * The expression which needs to be evaluated to be true for this rule to apply.
     */
    public readonly expression!: pulumi.Output<string | undefined>;
    /**
     * is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
     */
    public readonly isBasic!: pulumi.Output<boolean>;
    /**
     * The id of the entity (user, escalation policy, squad) for which we are routing this incident.
     */
    public readonly routeToId!: pulumi.Output<string>;
    /**
     * Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
     */
    public readonly routeToType!: pulumi.Output<string>;
    /**
     * Service id.
     */
    public readonly serviceId!: pulumi.Output<string>;

    /**
     * Create a RoutingRuleV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoutingRuleV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoutingRuleV2Args | RoutingRuleV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoutingRuleV2State | undefined;
            resourceInputs["basicExpressions"] = state ? state.basicExpressions : undefined;
            resourceInputs["expression"] = state ? state.expression : undefined;
            resourceInputs["isBasic"] = state ? state.isBasic : undefined;
            resourceInputs["routeToId"] = state ? state.routeToId : undefined;
            resourceInputs["routeToType"] = state ? state.routeToType : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
        } else {
            const args = argsOrState as RoutingRuleV2Args | undefined;
            if ((!args || args.isBasic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isBasic'");
            }
            if ((!args || args.routeToId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeToId'");
            }
            if ((!args || args.routeToType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeToType'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["basicExpressions"] = args ? args.basicExpressions : undefined;
            resourceInputs["expression"] = args ? args.expression : undefined;
            resourceInputs["isBasic"] = args ? args.isBasic : undefined;
            resourceInputs["routeToId"] = args ? args.routeToId : undefined;
            resourceInputs["routeToType"] = args ? args.routeToType : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoutingRuleV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RoutingRuleV2 resources.
 */
export interface RoutingRuleV2State {
    /**
     * The basic expression which needs to be evaluated to be true for this rule to apply.
     */
    basicExpressions?: pulumi.Input<pulumi.Input<inputs.RoutingRuleV2BasicExpression>[]>;
    /**
     * The expression which needs to be evaluated to be true for this rule to apply.
     */
    expression?: pulumi.Input<string>;
    /**
     * is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
     */
    isBasic?: pulumi.Input<boolean>;
    /**
     * The id of the entity (user, escalation policy, squad) for which we are routing this incident.
     */
    routeToId?: pulumi.Input<string>;
    /**
     * Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
     */
    routeToType?: pulumi.Input<string>;
    /**
     * Service id.
     */
    serviceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RoutingRuleV2 resource.
 */
export interface RoutingRuleV2Args {
    /**
     * The basic expression which needs to be evaluated to be true for this rule to apply.
     */
    basicExpressions?: pulumi.Input<pulumi.Input<inputs.RoutingRuleV2BasicExpression>[]>;
    /**
     * The expression which needs to be evaluated to be true for this rule to apply.
     */
    expression?: pulumi.Input<string>;
    /**
     * is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
     */
    isBasic: pulumi.Input<boolean>;
    /**
     * The id of the entity (user, escalation policy, squad) for which we are routing this incident.
     */
    routeToId: pulumi.Input<string>;
    /**
     * Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
     */
    routeToType: pulumi.Input<string>;
    /**
     * Service id.
     */
    serviceId: pulumi.Input<string>;
}
