// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * [Squadcast schedules v2](https://support.squadcast.com/schedules/schedules-new) are used to manage on-call scheduling & determine who will be notified when an incident is triggered. The name of the Schedule must be unique within a Team.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@irisdanded/pulumi-squadcast";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const exampleTeam = squadcast.getTeam({
 *     name: "example team name",
 * });
 * const exampleUser = squadcast.getUser({
 *     email: "test@example.com",
 * });
 * const scheduleTest = new squadcast.schedule.V2("scheduleTest", {
 *     description: "test schedule",
 *     timezone: "Asia/Kolkata",
 *     teamId: exampleTeam.then(exampleTeam => exampleTeam.id),
 *     entityOwner: {
 *         id: exampleUser.then(exampleUser => exampleUser.id),
 *         type: "user",
 *     },
 *     tags: [
 *         {
 *             key: "testkey",
 *             value: "testval",
 *         },
 *         {
 *             key: "testkey2",
 *             value: "testval2",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * teamID:scheduleName
 *
 * Use 'Get All Teams' API to get the id of the team
 *
 * ```sh
 * $ pulumi import squadcast:schedule/v2:V2 schedule_test "62d2fe23a57381088224d726:Example Schedule"
 * ```
 */
export class V2 extends pulumi.CustomResource {
    /**
     * Get an existing V2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: V2State, opts?: pulumi.CustomResourceOptions): V2 {
        return new V2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:schedule/v2:V2';

    /**
     * Returns true if the given object is an instance of V2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is V2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === V2.__pulumiType;
    }

    /**
     * Detailed description about the schedule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Schedule owner.
     */
    public readonly entityOwner!: pulumi.Output<outputs.schedule.V2EntityOwner>;
    /**
     * Name of the schedule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Schedule tags.
     */
    public readonly tags!: pulumi.Output<outputs.schedule.V2Tag[] | undefined>;
    /**
     * Team id.
     */
    public readonly teamId!: pulumi.Output<string>;
    /**
     * Timezone for the schedule.
     */
    public readonly timezone!: pulumi.Output<string>;

    /**
     * Create a V2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: V2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: V2Args | V2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as V2State | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["entityOwner"] = state ? state.entityOwner : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as V2Args | undefined;
            if ((!args || args.entityOwner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityOwner'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            if ((!args || args.timezone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timezone'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["entityOwner"] = args ? args.entityOwner : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(V2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering V2 resources.
 */
export interface V2State {
    /**
     * Detailed description about the schedule.
     */
    description?: pulumi.Input<string>;
    /**
     * Schedule owner.
     */
    entityOwner?: pulumi.Input<inputs.schedule.V2EntityOwner>;
    /**
     * Name of the schedule.
     */
    name?: pulumi.Input<string>;
    /**
     * Schedule tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.schedule.V2Tag>[]>;
    /**
     * Team id.
     */
    teamId?: pulumi.Input<string>;
    /**
     * Timezone for the schedule.
     */
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a V2 resource.
 */
export interface V2Args {
    /**
     * Detailed description about the schedule.
     */
    description?: pulumi.Input<string>;
    /**
     * Schedule owner.
     */
    entityOwner: pulumi.Input<inputs.schedule.V2EntityOwner>;
    /**
     * Name of the schedule.
     */
    name?: pulumi.Input<string>;
    /**
     * Schedule tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.schedule.V2Tag>[]>;
    /**
     * Team id.
     */
    teamId: pulumi.Input<string>;
    /**
     * Timezone for the schedule.
     */
    timezone: pulumi.Input<string>;
}
