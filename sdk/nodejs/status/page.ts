// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * [Status Pages](https://www.squadcast.com/blog/status-pages-101-everything-you-need-to-know-about-status-pages) serves as a communication instrument enabling you to notify your customers regarding service interruptions and scheduled maintenance. You can create a status page for each of your services and customize it to your liking. You can also add components & groups to your status page to show the status of your services.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@irisdanded/pulumi-squadcast";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const team = squadcast.getTeam({
 *     name: "Default Team",
 * });
 * const user = squadcast.getUser({
 *     email: "john@example.com",
 * });
 * const testStatusPage = new squadcast.status.Page("testStatusPage", {
 *     teamId: team.then(team => team.id),
 *     description: "Status Page description",
 *     isPublic: true,
 *     domainName: "test-statuspage",
 *     timezone: "Asia/Kolkata",
 *     contactEmail: "example@test.com",
 *     themeColor: {
 *         primary: "#000000",
 *         secondary: "#dddddd",
 *     },
 *     owner: {
 *         type: "user",
 *         id: user.then(user => user.id),
 *     },
 *     allowWebhookSubscription: true,
 *     allowComponentsSubscription: true,
 *     allowMaintenanceSubscription: true,
 * });
 * ```
 *
 * ## Import
 *
 * statusPageID
 *
 * ```sh
 * $ pulumi import squadcast:status/page:Page test_status_page 285
 * ```
 */
export class Page extends pulumi.CustomResource {
    /**
     * Get an existing Page resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PageState, opts?: pulumi.CustomResourceOptions): Page {
        return new Page(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:status/page:Page';

    /**
     * Returns true if the given object is an instance of Page.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Page {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Page.__pulumiType;
    }

    /**
     * Determines if components subscription is allowed to the status page.
     */
    public readonly allowComponentsSubscription!: pulumi.Output<boolean | undefined>;
    /**
     * Determines if maintenance subscription is allowed to the status page.
     */
    public readonly allowMaintenanceSubscription!: pulumi.Output<boolean | undefined>;
    /**
     * Determines if webhook subscription is allowed to the status page.
     */
    public readonly allowWebhookSubscription!: pulumi.Output<boolean | undefined>;
    /**
     * Contact email.
     */
    public readonly contactEmail!: pulumi.Output<string>;
    /**
     * Custom domain name of the status page.
     */
    public readonly customDomainName!: pulumi.Output<string | undefined>;
    /**
     * Status page description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\n\n/ to form the URL of the status page (can only be set during creation)
     */
    public readonly domainName!: pulumi.Output<string>;
    /**
     * Determines if the status page is hidden from search engines. Applicable on public status pages only.
     */
    public readonly hideFromSearchEngines!: pulumi.Output<boolean | undefined>;
    /**
     * Determines if the status page is public or not.
     */
    public readonly isPublic!: pulumi.Output<boolean>;
    /**
     * Status page name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Status page owner.
     */
    public readonly owner!: pulumi.Output<outputs.status.PageOwner>;
    /**
     * Team id.
     */
    public readonly teamId!: pulumi.Output<string>;
    /**
     * Theme color for the status page.
     */
    public readonly themeColor!: pulumi.Output<outputs.status.PageThemeColor>;
    /**
     * Timezone for the status page.
     */
    public readonly timezone!: pulumi.Output<string>;

    /**
     * Create a Page resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PageArgs | PageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PageState | undefined;
            resourceInputs["allowComponentsSubscription"] = state ? state.allowComponentsSubscription : undefined;
            resourceInputs["allowMaintenanceSubscription"] = state ? state.allowMaintenanceSubscription : undefined;
            resourceInputs["allowWebhookSubscription"] = state ? state.allowWebhookSubscription : undefined;
            resourceInputs["contactEmail"] = state ? state.contactEmail : undefined;
            resourceInputs["customDomainName"] = state ? state.customDomainName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["hideFromSearchEngines"] = state ? state.hideFromSearchEngines : undefined;
            resourceInputs["isPublic"] = state ? state.isPublic : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["themeColor"] = state ? state.themeColor : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as PageArgs | undefined;
            if ((!args || args.contactEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contactEmail'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.isPublic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isPublic'");
            }
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            if ((!args || args.themeColor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'themeColor'");
            }
            if ((!args || args.timezone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timezone'");
            }
            resourceInputs["allowComponentsSubscription"] = args ? args.allowComponentsSubscription : undefined;
            resourceInputs["allowMaintenanceSubscription"] = args ? args.allowMaintenanceSubscription : undefined;
            resourceInputs["allowWebhookSubscription"] = args ? args.allowWebhookSubscription : undefined;
            resourceInputs["contactEmail"] = args ? args.contactEmail : undefined;
            resourceInputs["customDomainName"] = args ? args.customDomainName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["hideFromSearchEngines"] = args ? args.hideFromSearchEngines : undefined;
            resourceInputs["isPublic"] = args ? args.isPublic : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["themeColor"] = args ? args.themeColor : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Page.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Page resources.
 */
export interface PageState {
    /**
     * Determines if components subscription is allowed to the status page.
     */
    allowComponentsSubscription?: pulumi.Input<boolean>;
    /**
     * Determines if maintenance subscription is allowed to the status page.
     */
    allowMaintenanceSubscription?: pulumi.Input<boolean>;
    /**
     * Determines if webhook subscription is allowed to the status page.
     */
    allowWebhookSubscription?: pulumi.Input<boolean>;
    /**
     * Contact email.
     */
    contactEmail?: pulumi.Input<string>;
    /**
     * Custom domain name of the status page.
     */
    customDomainName?: pulumi.Input<string>;
    /**
     * Status page description.
     */
    description?: pulumi.Input<string>;
    /**
     * Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\n\n/ to form the URL of the status page (can only be set during creation)
     */
    domainName?: pulumi.Input<string>;
    /**
     * Determines if the status page is hidden from search engines. Applicable on public status pages only.
     */
    hideFromSearchEngines?: pulumi.Input<boolean>;
    /**
     * Determines if the status page is public or not.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * Status page name.
     */
    name?: pulumi.Input<string>;
    /**
     * Status page owner.
     */
    owner?: pulumi.Input<inputs.status.PageOwner>;
    /**
     * Team id.
     */
    teamId?: pulumi.Input<string>;
    /**
     * Theme color for the status page.
     */
    themeColor?: pulumi.Input<inputs.status.PageThemeColor>;
    /**
     * Timezone for the status page.
     */
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Page resource.
 */
export interface PageArgs {
    /**
     * Determines if components subscription is allowed to the status page.
     */
    allowComponentsSubscription?: pulumi.Input<boolean>;
    /**
     * Determines if maintenance subscription is allowed to the status page.
     */
    allowMaintenanceSubscription?: pulumi.Input<boolean>;
    /**
     * Determines if webhook subscription is allowed to the status page.
     */
    allowWebhookSubscription?: pulumi.Input<boolean>;
    /**
     * Contact email.
     */
    contactEmail: pulumi.Input<string>;
    /**
     * Custom domain name of the status page.
     */
    customDomainName?: pulumi.Input<string>;
    /**
     * Status page description.
     */
    description?: pulumi.Input<string>;
    /**
     * Domain name of the status page. This will be appended to https://statuspage.squadcast.com/\n\n/ to form the URL of the status page (can only be set during creation)
     */
    domainName: pulumi.Input<string>;
    /**
     * Determines if the status page is hidden from search engines. Applicable on public status pages only.
     */
    hideFromSearchEngines?: pulumi.Input<boolean>;
    /**
     * Determines if the status page is public or not.
     */
    isPublic: pulumi.Input<boolean>;
    /**
     * Status page name.
     */
    name?: pulumi.Input<string>;
    /**
     * Status page owner.
     */
    owner: pulumi.Input<inputs.status.PageOwner>;
    /**
     * Team id.
     */
    teamId: pulumi.Input<string>;
    /**
     * Theme color for the status page.
     */
    themeColor: pulumi.Input<inputs.status.PageThemeColor>;
    /**
     * Timezone for the status page.
     */
    timezone: pulumi.Input<string>;
}
