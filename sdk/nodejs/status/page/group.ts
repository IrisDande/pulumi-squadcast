// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

/**
 * Status page group is a collection of components. You can add multiple components to a group and show the status of the group on your status page. You can also add multiple groups and show the status of each group on your status page.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@irisdanded/pulumi-squadcast";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const team = squadcast.getTeam({
 *     name: "Default Team",
 * });
 * const user = squadcast.getUser({
 *     email: "john@example.com",
 * });
 * const testStatusPage = new squadcast.status.Page("testStatusPage", {
 *     teamId: team.then(team => team.id),
 *     description: "Status Page description",
 *     isPublic: true,
 *     domainName: "test-statuspage",
 *     timezone: "Asia/Kolkata",
 *     contactEmail: "example@test.com",
 *     themeColor: {
 *         primary: "#000000",
 *         secondary: "#dddddd",
 *     },
 *     owner: {
 *         type: "user",
 *         id: user.then(user => user.id),
 *     },
 * });
 * const exampleGroup = new squadcast.status.page.Group("exampleGroup", {statusPageId: testStatusPage.id});
 * const exampleComponent = new squadcast.status.page.Component("exampleComponent", {
 *     statusPageId: testStatusPage.id,
 *     description: "Component 1 description",
 *     groupId: exampleGroup.id,
 * });
 * ```
 *
 * ## Import
 *
 * statusPageID:groupID
 *
 * ```sh
 * $ pulumi import squadcast:status/page/group:Group test_group 300:246
 * ```
 */
export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:status/page/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    /**
     * Name of the status page group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Id of the status page to which this group belongs to.
     */
    public readonly statusPageId!: pulumi.Output<string>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["statusPageId"] = state ? state.statusPageId : undefined;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            if ((!args || args.statusPageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'statusPageId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["statusPageId"] = args ? args.statusPageId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Group.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    /**
     * Name of the status page group.
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the status page to which this group belongs to.
     */
    statusPageId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * Name of the status page group.
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the status page to which this group belongs to.
     */
    statusPageId: pulumi.Input<string>;
}
