// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * [Suppression rules](https://support.squadcast.com/docs/alert-suppression) can help you avoid alert fatigue by suppressing notifications for non-actionable alerts.Squadcast will suppress the incidents that match any of the Suppression Rules you create for your Services. These incidents will go into the Suppressed state and you will not get any notifications for them
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as squadcast from "@irisdanded/pulumi-squadcast";
 * import * as squadcast from "@pulumi/squadcast";
 *
 * const exampleTeam = squadcast.getTeam({
 *     name: "exammple team name",
 * });
 * const exampleService = exampleTeam.then(exampleTeam => squadcast.getService({
 *     name: "example service name",
 *     teamId: exampleTeam.id,
 * }));
 * const exampleBasicSuppressionRules = new squadcast.SuppressionRuleV2("exampleBasicSuppressionRules", {
 *     serviceId: exampleService.then(exampleService => exampleService.id),
 *     isBasic: true,
 *     description: "sample basic expression",
 *     basicExpressions: [{
 *         lhs: "abc",
 *         op: "is",
 *         rhs: "xyz",
 *     }],
 * });
 * const exampleSuppressionRules = new squadcast.SuppressionRuleV2("exampleSuppressionRules", {
 *     serviceId: exampleService.then(exampleService => exampleService.id),
 *     isBasic: false,
 *     description: "not basic",
 *     expression: "payload[\"event_id\"] == 40",
 * });
 * const exampleTimeBasedSuppressionRules = new squadcast.SuppressionRuleV2("exampleTimeBasedSuppressionRules", {
 *     serviceId: exampleService.then(exampleService => exampleService.id),
 *     isBasic: false,
 *     description: "not basic",
 *     expression: "payload[\"event_id\"] == 40",
 *     timeslots: [{
 *         timeZone: "Asia/Calcutta",
 *         startTime: "2022-04-08T06:22:14.975Z",
 *         endTime: "2022-04-28T06:22:14.975Z",
 *         endsOn: "2022-04-28T06:22:14.975Z",
 *         repetition: "none",
 *         isAllday: false,
 *         endsNever: true,
 *     }],
 * });
 * const exampleTimeBasedSuppressionRulesCustomRepetition = new squadcast.SuppressionRuleV2("exampleTimeBasedSuppressionRulesCustomRepetition", {
 *     serviceId: exampleService.then(exampleService => exampleService.id),
 *     isBasic: false,
 *     description: "not basic",
 *     expression: "payload[\"event_id\"] == 40",
 *     timeslots: [
 *         {
 *             timeZone: "Asia/Calcutta",
 *             startTime: "2022-04-08T06:22:14.975Z",
 *             endTime: "2022-04-28T06:22:14.975Z",
 *             endsOn: "2022-04-28T06:22:14.975Z",
 *             repetition: "custom",
 *             isAllday: false,
 *             endsNever: true,
 *             customs: [{
 *                 repeats: "day",
 *                 repeatsCount: 2,
 *             }],
 *         },
 *         {
 *             timeZone: "Asia/Calcutta",
 *             startTime: "2022-04-08T06:22:14.975Z",
 *             endTime: "2022-04-28T06:22:14.975Z",
 *             endsOn: "2022-04-28T06:22:14.975Z",
 *             repetition: "custom",
 *             isAllday: false,
 *             endsNever: true,
 *             customs: [{
 *                 repeats: "week",
 *                 repeatsCount: 4,
 *                 repeatsOnWeekdays: [
 *                     0,
 *                     1,
 *                     2,
 *                     3,
 *                 ],
 *             }],
 *         },
 *         {
 *             timeZone: "Asia/Calcutta",
 *             startTime: "2022-04-08T06:22:14.975Z",
 *             endTime: "2022-04-28T06:22:14.975Z",
 *             endsOn: "2022-04-28T06:22:14.975Z",
 *             repetition: "custom",
 *             isAllday: false,
 *             endsNever: true,
 *             customs: [{
 *                 repeats: "month",
 *                 repeatsCount: 6,
 *             }],
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * serviceID:ruleID
 *
 * ```sh
 * $ pulumi import squadcast:index/suppressionRuleV2:SuppressionRuleV2 test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
 * ```
 */
export class SuppressionRuleV2 extends pulumi.CustomResource {
    /**
     * Get an existing SuppressionRuleV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SuppressionRuleV2State, opts?: pulumi.CustomResourceOptions): SuppressionRuleV2 {
        return new SuppressionRuleV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:index/suppressionRuleV2:SuppressionRuleV2';

    /**
     * Returns true if the given object is an instance of SuppressionRuleV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SuppressionRuleV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SuppressionRuleV2.__pulumiType;
    }

    /**
     * The basic expression which needs to be evaluated to be true for this rule to apply.
     */
    public readonly basicExpressions!: pulumi.Output<outputs.SuppressionRuleV2BasicExpression[] | undefined>;
    /**
     * description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The expression which needs to be evaluated to be true for this rule to apply.
     */
    public readonly expression!: pulumi.Output<string | undefined>;
    /**
     * is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
     */
    public readonly isBasic!: pulumi.Output<boolean>;
    /**
     * is_timebased will be true when users use the time based suppression rule
     */
    public /*out*/ readonly isTimebased!: pulumi.Output<boolean>;
    /**
     * Service id.
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * The timeslots for which this rule should be applied.
     */
    public readonly timeslots!: pulumi.Output<outputs.SuppressionRuleV2Timeslot[] | undefined>;

    /**
     * Create a SuppressionRuleV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SuppressionRuleV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SuppressionRuleV2Args | SuppressionRuleV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SuppressionRuleV2State | undefined;
            resourceInputs["basicExpressions"] = state ? state.basicExpressions : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expression"] = state ? state.expression : undefined;
            resourceInputs["isBasic"] = state ? state.isBasic : undefined;
            resourceInputs["isTimebased"] = state ? state.isTimebased : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["timeslots"] = state ? state.timeslots : undefined;
        } else {
            const args = argsOrState as SuppressionRuleV2Args | undefined;
            if ((!args || args.isBasic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isBasic'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["basicExpressions"] = args ? args.basicExpressions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expression"] = args ? args.expression : undefined;
            resourceInputs["isBasic"] = args ? args.isBasic : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["timeslots"] = args ? args.timeslots : undefined;
            resourceInputs["isTimebased"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SuppressionRuleV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SuppressionRuleV2 resources.
 */
export interface SuppressionRuleV2State {
    /**
     * The basic expression which needs to be evaluated to be true for this rule to apply.
     */
    basicExpressions?: pulumi.Input<pulumi.Input<inputs.SuppressionRuleV2BasicExpression>[]>;
    /**
     * description.
     */
    description?: pulumi.Input<string>;
    /**
     * The expression which needs to be evaluated to be true for this rule to apply.
     */
    expression?: pulumi.Input<string>;
    /**
     * is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
     */
    isBasic?: pulumi.Input<boolean>;
    /**
     * is_timebased will be true when users use the time based suppression rule
     */
    isTimebased?: pulumi.Input<boolean>;
    /**
     * Service id.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * The timeslots for which this rule should be applied.
     */
    timeslots?: pulumi.Input<pulumi.Input<inputs.SuppressionRuleV2Timeslot>[]>;
}

/**
 * The set of arguments for constructing a SuppressionRuleV2 resource.
 */
export interface SuppressionRuleV2Args {
    /**
     * The basic expression which needs to be evaluated to be true for this rule to apply.
     */
    basicExpressions?: pulumi.Input<pulumi.Input<inputs.SuppressionRuleV2BasicExpression>[]>;
    /**
     * description.
     */
    description?: pulumi.Input<string>;
    /**
     * The expression which needs to be evaluated to be true for this rule to apply.
     */
    expression?: pulumi.Input<string>;
    /**
     * is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
     */
    isBasic: pulumi.Input<boolean>;
    /**
     * Service id.
     */
    serviceId: pulumi.Input<string>;
    /**
     * The timeslots for which this rule should be applied.
     */
    timeslots?: pulumi.Input<pulumi.Input<inputs.SuppressionRuleV2Timeslot>[]>;
}
