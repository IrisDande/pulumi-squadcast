// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GerEntityOwner {
    /**
     * GER owner id.
     */
    id: pulumi.Input<string>;
    /**
     * GER owner type. Supported values are 'user' or 'squad'.
     */
    type: pulumi.Input<string>;
}

export interface RunbookEntityOwner {
    /**
     * Runbook owner id.
     */
    id: pulumi.Input<string>;
    /**
     * Runbook owner type. Supported values are 'user' or 'squad'.
     */
    type: pulumi.Input<string>;
}

export interface RunbookStep {
    content: pulumi.Input<string>;
}

export interface ServiceMaintainer {
    /**
     * The id of the maintainer.
     */
    id: pulumi.Input<string>;
    /**
     * The type of the maintainer. Supported values are 'user' or 'squad'.
     */
    type: pulumi.Input<string>;
}

export interface ServiceTag {
    /**
     * key
     */
    key: pulumi.Input<string>;
    /**
     * value
     */
    value: pulumi.Input<string>;
}

export interface SloEntityOwner {
    /**
     * SLO owner id.
     */
    id: pulumi.Input<string>;
    /**
     * SLO owner type. Supported values are 'user' or 'squad'.
     */
    type: pulumi.Input<string>;
}

export interface SloNotify {
    /**
     * The ID of the notification rule
     */
    id?: pulumi.Input<number>;
    /**
     * The ID of the service in which the user want to create an incident
     */
    serviceId?: pulumi.Input<string>;
    /**
     * The ID of the SLO.
     */
    sloId?: pulumi.Input<number>;
    /**
     * List of Squad ID's who should be alerted via email.
     */
    squadIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of user ID's who should be alerted via email.
     */
    userIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SloRule {
    /**
     * The ID of the monitoring rule
     */
    id?: pulumi.Input<number>;
    /**
     * Is checked?
     */
    isChecked?: pulumi.Input<boolean>;
    /**
     * The name of monitoring check."Supported values are "breached*error*budget", "unhealthy*slo","increased*false*positives", "remaining*error_budget"
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the SLO
     */
    sloId?: pulumi.Input<number>;
    /**
     * Threshold for the monitoring checkOnly supported for rules name "increased*false*positives" and "remaining*error*budget"
     */
    threshold?: pulumi.Input<number>;
}

export interface WebformInputField {
    /**
     * Input field Label.
     */
    label?: pulumi.Input<string>;
    /**
     * Input field options.
     */
    options?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WebformOwner {
    /**
     * Form owner id.
     */
    id: pulumi.Input<string>;
    /**
     * Form owner name.
     */
    name?: pulumi.Input<string>;
    /**
     * Form owner type Supported values are 'user' or 'squad'.
     */
    type: pulumi.Input<string>;
}

export interface WebformService {
    /**
     * Service alias.
     */
    alias?: pulumi.Input<string>;
    /**
     * Service name.
     */
    name?: pulumi.Input<string>;
    /**
     * Service ID.
     */
    serviceId: pulumi.Input<string>;
}

export interface WebformSeverity {
    /**
     * Severity description.
     */
    description?: pulumi.Input<string>;
    /**
     * Severity type.
     */
    type: pulumi.Input<string>;
}

export interface WorkflowEntityOwner {
    /**
     * The ID of this resource.
     */
    id: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface WorkflowFilters {
    /**
     * Condition to be applied on the filters (and / or)
     */
    condition: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.WorkflowFiltersFilter>[]>;
}

export interface WorkflowFiltersFilter {
    /**
     * Condition to be applied on the filters (and / or)
     */
    condition?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.WorkflowFiltersFilterFilter>[]>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WorkflowFiltersFilterFilter {
    key?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface WorkflowTag {
    color: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
export namespace deduplication {
    export interface RulesRule {
        /**
         * The basic expression which needs to be evaluated to be true for this rule to apply.
         */
        basicExpressions?: pulumi.Input<pulumi.Input<inputs.deduplication.RulesRuleBasicExpression>[]>;
        /**
         * Denotes if dependent services should also be deduplicated
         */
        dependencyDeduplication?: pulumi.Input<boolean>;
        /**
         * description.
         */
        description?: pulumi.Input<string>;
        /**
         * The expression which needs to be evaluated to be true for this rule to apply.
         */
        expression?: pulumi.Input<string>;
        /**
         * is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
         */
        isBasic: pulumi.Input<boolean>;
        /**
         * time unit (mins or hours)
         */
        timeUnit?: pulumi.Input<string>;
        /**
         * integer for time_unit
         */
        timeWindow?: pulumi.Input<number>;
    }

    export interface RulesRuleBasicExpression {
        /**
         * left hand side dropdown value
         */
        lhs: pulumi.Input<string>;
        /**
         * operator
         */
        op: pulumi.Input<string>;
        /**
         * right hand side value
         */
        rhs: pulumi.Input<string>;
    }
    export namespace rule {
        export interface V2BasicExpression {
            /**
             * left hand side dropdown value
             */
            lhs: pulumi.Input<string>;
            /**
             * operator (is, is*not, matches, not*contains)
             */
            op: pulumi.Input<string>;
            /**
             * right hand side value
             */
            rhs: pulumi.Input<string>;
        }
    }
}

export namespace escalation {
    export interface PolicyEntityOwner {
        /**
         * Escalation policy owner id.
         */
        id: pulumi.Input<string>;
        /**
         * Escalation policy owner type. Supported values are 'user' or 'squad'.
         */
        type: pulumi.Input<string>;
    }

    export interface PolicyRepeat {
        /**
         * The number of minutes to wait before repeating the escalation policy
         */
        delayMinutes: pulumi.Input<number>;
        /**
         * The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
         */
        times: pulumi.Input<number>;
    }

    export interface PolicyRule {
        delayMinutes: pulumi.Input<number>;
        /**
         * Notification channels to notify the targets. (SMS, Phone, Email, Push)
         */
        notificationChannels?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * repeat this rule
         */
        repeat?: pulumi.Input<inputs.escalation.PolicyRuleRepeat>;
        roundRobin?: pulumi.Input<inputs.escalation.PolicyRuleRoundRobin>;
        targets: pulumi.Input<pulumi.Input<inputs.escalation.PolicyRuleTarget>[]>;
    }

    export interface PolicyRuleRepeat {
        /**
         * repeat after minutes
         */
        delayMinutes: pulumi.Input<number>;
        /**
         * repeat times
         */
        times: pulumi.Input<number>;
    }

    export interface PolicyRuleRoundRobin {
        /**
         * Enables Round Robin escalation within this layer
         */
        enabled: pulumi.Input<boolean>;
        rotation?: pulumi.Input<inputs.escalation.PolicyRuleRoundRobinRotation>;
    }

    export interface PolicyRuleRoundRobinRotation {
        /**
         * repeat after minutes
         */
        delayMinutes?: pulumi.Input<number>;
        /**
         * enable rotation within
         */
        enabled?: pulumi.Input<boolean>;
    }

    export interface PolicyRuleTarget {
        /**
         * ID of the target
         */
        id: pulumi.Input<string>;
        /**
         * Type of the target. (user, squad, schedule, schedulev2)
         */
        type: pulumi.Input<string>;
    }
}

export namespace routing {
    export interface RulesRule {
        /**
         * The basic expression which needs to be evaluated to be true for this rule to apply.
         */
        basicExpressions?: pulumi.Input<pulumi.Input<inputs.routing.RulesRuleBasicExpression>[]>;
        /**
         * The expression which needs to be evaluated to be true for this rule to apply.
         */
        expression?: pulumi.Input<string>;
        /**
         * is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
         */
        isBasic: pulumi.Input<boolean>;
        /**
         * The id of the entity (user, escalation policy, squad) for which we are routing this incident.
         */
        routeToId: pulumi.Input<string>;
        /**
         * Type of the entity for which we are routing this incident - User, Escalation Policy or Squad
         */
        routeToType: pulumi.Input<string>;
    }

    export interface RulesRuleBasicExpression {
        /**
         * left hand side dropdown value
         */
        lhs: pulumi.Input<string>;
        /**
         * right hand side value
         */
        rhs: pulumi.Input<string>;
    }
    export namespace rule {
        export interface V2BasicExpression {
            /**
             * left hand side dropdown value
             */
            lhs: pulumi.Input<string>;
            /**
             * right hand side value
             */
            rhs: pulumi.Input<string>;
        }
    }
}

export namespace schedule {
    export interface V2EntityOwner {
        /**
         * Schedule owner id.
         */
        id: pulumi.Input<string>;
        /**
         * Schedule owner type. Supported values are 'user' or 'squad'.
         */
        type: pulumi.Input<string>;
    }

    export interface V2Tag {
        /**
         * Schedule tag color.
         */
        color?: pulumi.Input<string>;
        /**
         * Schedule tag key.
         */
        key: pulumi.Input<string>;
        /**
         * Schedule tag value.
         */
        value: pulumi.Input<string>;
    }
    export namespace rotation {
        export interface V2ParticipantGroup {
            /**
             * Group participants.
             */
            participants?: pulumi.Input<pulumi.Input<inputs.schedule.rotation.V2ParticipantGroupParticipant>[]>;
        }

        export interface V2ParticipantGroupParticipant {
            /**
             * Participant id.
             */
            id: pulumi.Input<string>;
            /**
             * Participant type (user, team, squad).
             */
            type: pulumi.Input<string>;
        }

        export interface V2ShiftTimeslot {
            /**
             * Defines the day of the week for the shift. If not specified, the timeslot is active on all days of the week.
             */
            dayOfWeek?: pulumi.Input<string>;
            /**
             * Defines the duration of each shift. (in minutes)
             */
            duration: pulumi.Input<number>;
            /**
             * Defines the start hour of the each shift in the schedule timezone.
             */
            startHour: pulumi.Input<number>;
            /**
             * Defines the start minute of the each shift in the schedule timezone.
             */
            startMinute: pulumi.Input<number>;
        }
    }
}

export namespace service {
    export interface MaintenanceWindow {
        /**
         * Starting Time
         */
        from: pulumi.Input<string>;
        /**
         * repeat frequency. ('day', 'week', '2 weeks', '3 weeks', 'month')
         */
        repeatFrequency?: pulumi.Input<string>;
        /**
         * Till when you want to repeat this Maintenance mode
         */
        repeatTill?: pulumi.Input<string>;
        /**
         * End Time.
         */
        till: pulumi.Input<string>;
    }
}

export namespace status {
    export interface PageOwner {
        /**
         * Status page owner id.
         */
        id: pulumi.Input<string>;
        /**
         * Status page owner type Supported values are 'user' or 'squad'.
         */
        type: pulumi.Input<string>;
    }

    export interface PageThemeColor {
        /**
         * Primary color.
         */
        primary: pulumi.Input<string>;
        /**
         * Secondary color.
         */
        secondary: pulumi.Input<string>;
    }
}

export namespace suppression {
    export interface RulesRule {
        /**
         * The basic expression which needs to be evaluated to be true for this rule to apply.
         */
        basicExpressions?: pulumi.Input<pulumi.Input<inputs.suppression.RulesRuleBasicExpression>[]>;
        /**
         * description.
         */
        description?: pulumi.Input<string>;
        /**
         * The expression which needs to be evaluated to be true for this rule to apply.
         */
        expression?: pulumi.Input<string>;
        /**
         * is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
         */
        isBasic: pulumi.Input<boolean>;
        /**
         * is_timebased will be true when users use the time based suppression rule
         */
        isTimebased?: pulumi.Input<boolean>;
        /**
         * The timeslots for which this rule should be applied.
         */
        timeslots?: pulumi.Input<pulumi.Input<inputs.suppression.RulesRuleTimeslot>[]>;
    }

    export interface RulesRuleBasicExpression {
        /**
         * left hand side dropdown value
         */
        lhs: pulumi.Input<string>;
        /**
         * operator
         */
        op: pulumi.Input<string>;
        /**
         * right hand side value
         */
        rhs: pulumi.Input<string>;
    }

    export interface RulesRuleTimeslot {
        /**
         * Use this field to specify the custom time slots for which this rule should be applied. This field is only applicable when the repetition field is set to custom.
         */
        customs?: pulumi.Input<pulumi.Input<inputs.suppression.RulesRuleTimeslotCustom>[]>;
        /**
         * Defines the end date of the time slot
         */
        endTime: pulumi.Input<string>;
        /**
         * Defines whether the time slot ends or not
         */
        endsNever?: pulumi.Input<boolean>;
        /**
         * Defines the end date of the repetition
         */
        endsOn: pulumi.Input<string>;
        /**
         * Defines if the time slot is an all day slot
         */
        isAllday?: pulumi.Input<boolean>;
        /**
         * Defines whether repetition is custom or not
         */
        isCustom?: pulumi.Input<boolean>;
        /**
         * Defines the repetition of the time slot
         */
        repetition: pulumi.Input<string>;
        /**
         * Defines the start date of the time slot
         */
        startTime: pulumi.Input<string>;
        /**
         * Time zone for the time slot
         */
        timeZone: pulumi.Input<string>;
    }

    export interface RulesRuleTimeslotCustom {
        /**
         * Determines how often the rule repeats. Valid values are day, week, month.
         */
        repeats: pulumi.Input<string>;
        /**
         * Number of times to repeat.
         */
        repeatsCount?: pulumi.Input<number>;
        /**
         * Repeats on month.
         */
        repeatsOnMonth?: pulumi.Input<string>;
        /**
         * List of weekdays to repeat on.
         */
        repeatsOnWeekdays?: pulumi.Input<pulumi.Input<number>[]>;
    }
    export namespace rule {
        export interface V2BasicExpression {
            /**
             * left hand side dropdown value
             */
            lhs: pulumi.Input<string>;
            /**
             * operator (is, is*not, matches, not*contains)
             */
            op: pulumi.Input<string>;
            /**
             * right hand side value
             */
            rhs: pulumi.Input<string>;
        }

        export interface V2Timeslot {
            /**
             * Use this field to specify the custom time slots for which this rule should be applied. This field is only applicable when the repetition field is set to custom.
             */
            customs?: pulumi.Input<pulumi.Input<inputs.suppression.rule.V2TimeslotCustom>[]>;
            /**
             * Defines the end date of the time slot
             */
            endTime: pulumi.Input<string>;
            /**
             * Defines whether the time slot ends or not
             */
            endsNever?: pulumi.Input<boolean>;
            /**
             * Defines the end date of the repetition
             */
            endsOn: pulumi.Input<string>;
            /**
             * Defines if the time slot is an all day slot
             */
            isAllday?: pulumi.Input<boolean>;
            /**
             * Defines whether repetition is custom or not
             */
            isCustom?: pulumi.Input<boolean>;
            /**
             * Defines the repetition of the time slot
             */
            repetition: pulumi.Input<string>;
            /**
             * Defines the start date of the time slot
             */
            startTime: pulumi.Input<string>;
            /**
             * Time zone for the time slot
             */
            timeZone: pulumi.Input<string>;
        }

        export interface V2TimeslotCustom {
            /**
             * Determines how often the rule repeats. Valid values are day, week, month.
             */
            repeats: pulumi.Input<string>;
            /**
             * Number of times to repeat.
             */
            repeatsCount?: pulumi.Input<number>;
            /**
             * Repeats on month.
             */
            repeatsOnMonth?: pulumi.Input<string>;
            /**
             * List of weekdays to repeat on.
             */
            repeatsOnWeekdays?: pulumi.Input<pulumi.Input<number>[]>;
        }
    }
}

export namespace tagging {
    export interface RulesRule {
        /**
         * The basic expression which needs to be evaluated to be true for this rule to apply.
         */
        basicExpressions?: pulumi.Input<pulumi.Input<inputs.tagging.RulesRuleBasicExpression>[]>;
        /**
         * The expression which needs to be evaluated to be true for this rule to apply.
         */
        expression?: pulumi.Input<string>;
        /**
         * is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
         */
        isBasic: pulumi.Input<boolean>;
        /**
         * The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
         */
        tags?: pulumi.Input<pulumi.Input<inputs.tagging.RulesRuleTag>[]>;
    }

    export interface RulesRuleBasicExpression {
        /**
         * left hand side dropdown value
         */
        lhs: pulumi.Input<string>;
        /**
         * operator
         */
        op: pulumi.Input<string>;
        /**
         * right hand side value
         */
        rhs: pulumi.Input<string>;
    }

    export interface RulesRuleTag {
        /**
         * Tag color, hex values
         */
        color: pulumi.Input<string>;
        /**
         * key
         */
        key: pulumi.Input<string>;
        /**
         * value
         */
        value: pulumi.Input<string>;
    }
    export namespace rule {
        export interface V2BasicExpression {
            /**
             * left hand side dropdown value
             */
            lhs: pulumi.Input<string>;
            /**
             * operator (is, is*not, matches, not*contains)
             */
            op: pulumi.Input<string>;
            /**
             * right hand side value
             */
            rhs: pulumi.Input<string>;
        }

        export interface V2Tag {
            /**
             * Tag color, hex values
             */
            color: pulumi.Input<string>;
            /**
             * key
             */
            key: pulumi.Input<string>;
            /**
             * value
             */
            value: pulumi.Input<string>;
        }
    }
}

export namespace workflow {
    export interface ActionChannel {
        /**
         * The display text of the communication channel
         */
        displayText: pulumi.Input<string>;
        /**
         * The link of the communication channel
         */
        link: pulumi.Input<string>;
        /**
         * The type of the communication channel
         */
        type: pulumi.Input<string>;
    }

    export interface ActionComponentAndImpact {
        /**
         * The ID of the component
         */
        componentId: pulumi.Input<number>;
        /**
         * The ID of the impact status
         */
        impactStatusId: pulumi.Input<number>;
    }

    export interface ActionHeader {
        /**
         * The key of the header
         */
        key: pulumi.Input<string>;
        /**
         * The value of the header
         */
        value: pulumi.Input<string>;
    }

    export interface ActionStatusAndMessage {
        /**
         * The messages to be set for the issue
         */
        messages?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The ID of the status
         */
        statusId: pulumi.Input<number>;
    }
}
