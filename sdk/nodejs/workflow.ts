// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class Workflow extends pulumi.CustomResource {
    /**
     * Get an existing Workflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkflowState, opts?: pulumi.CustomResourceOptions): Workflow {
        return new Workflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:index/workflow:Workflow';

    /**
     * Returns true if the given object is an instance of Workflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workflow.__pulumiType;
    }

    /**
     * The description of the workflow
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether the workflow is enabled or not
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The entity owner of the workflow
     */
    public readonly entityOwners!: pulumi.Output<outputs.WorkflowEntityOwner[]>;
    /**
     * The filters to be applied on the workflow
     */
    public readonly filters!: pulumi.Output<outputs.WorkflowFilters | undefined>;
    /**
     * The ID of the user who owns the workflow
     */
    public readonly ownerId!: pulumi.Output<string>;
    /**
     * The tags to be applied on the workflow
     */
    public readonly tags!: pulumi.Output<outputs.WorkflowTag[] | undefined>;
    /**
     * The title of the workflow
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * The trigger for the workflow
     */
    public readonly trigger!: pulumi.Output<string>;

    /**
     * Create a Workflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkflowArgs | WorkflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkflowState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["entityOwners"] = state ? state.entityOwners : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["trigger"] = state ? state.trigger : undefined;
        } else {
            const args = argsOrState as WorkflowArgs | undefined;
            if ((!args || args.entityOwners === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityOwners'");
            }
            if ((!args || args.ownerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerId'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.trigger === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trigger'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["entityOwners"] = args ? args.entityOwners : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["ownerId"] = args ? args.ownerId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["trigger"] = args ? args.trigger : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workflow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Workflow resources.
 */
export interface WorkflowState {
    /**
     * The description of the workflow
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the workflow is enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The entity owner of the workflow
     */
    entityOwners?: pulumi.Input<pulumi.Input<inputs.WorkflowEntityOwner>[]>;
    /**
     * The filters to be applied on the workflow
     */
    filters?: pulumi.Input<inputs.WorkflowFilters>;
    /**
     * The ID of the user who owns the workflow
     */
    ownerId?: pulumi.Input<string>;
    /**
     * The tags to be applied on the workflow
     */
    tags?: pulumi.Input<pulumi.Input<inputs.WorkflowTag>[]>;
    /**
     * The title of the workflow
     */
    title?: pulumi.Input<string>;
    /**
     * The trigger for the workflow
     */
    trigger?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Workflow resource.
 */
export interface WorkflowArgs {
    /**
     * The description of the workflow
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the workflow is enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The entity owner of the workflow
     */
    entityOwners: pulumi.Input<pulumi.Input<inputs.WorkflowEntityOwner>[]>;
    /**
     * The filters to be applied on the workflow
     */
    filters?: pulumi.Input<inputs.WorkflowFilters>;
    /**
     * The ID of the user who owns the workflow
     */
    ownerId: pulumi.Input<string>;
    /**
     * The tags to be applied on the workflow
     */
    tags?: pulumi.Input<pulumi.Input<inputs.WorkflowTag>[]>;
    /**
     * The title of the workflow
     */
    title: pulumi.Input<string>;
    /**
     * The trigger for the workflow
     */
    trigger: pulumi.Input<string>;
}
