// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 */
export class Action extends pulumi.CustomResource {
    /**
     * Get an existing Action resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ActionState, opts?: pulumi.CustomResourceOptions): Action {
        return new Action(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squadcast:workflow/action:Action';

    /**
     * Returns true if the given object is an instance of Action.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Action {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Action.__pulumiType;
    }

    /**
     * The account to be used for creating the ticket. (Only for Jira Create Ticket action)
     */
    public readonly account!: pulumi.Output<string | undefined>;
    /**
     * Whether to automatically name the action
     */
    public readonly autoName!: pulumi.Output<boolean | undefined>;
    /**
     * The body of the request
     */
    public readonly body!: pulumi.Output<string | undefined>;
    /**
     * The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
     */
    public readonly channelId!: pulumi.Output<string | undefined>;
    /**
     * The name of the channel to be archived. (Only for Slack Archive Channel action)
     */
    public readonly channelName!: pulumi.Output<string | undefined>;
    /**
     * The communication channels to be added to the incident
     */
    public readonly channels!: pulumi.Output<outputs.workflow.ActionChannel[] | undefined>;
    /**
     * The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
     */
    public readonly componentAndImpacts!: pulumi.Output<outputs.workflow.ActionComponentAndImpact[] | undefined>;
    /**
     * The description of the ticket. (Only for Jira Create Ticket action)
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The headers to be sent with the request
     */
    public readonly headers!: pulumi.Output<outputs.workflow.ActionHeader[] | undefined>;
    /**
     * The title of the issue to be added. (Only for Add Status Page Issue action)
     */
    public readonly issueTitle!: pulumi.Output<string | undefined>;
    /**
     * The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
     */
    public readonly issueType!: pulumi.Output<string | undefined>;
    /**
     * The ID of the user to which the message is to be sent. (Only for Slack Message User action)
     */
    public readonly memberId!: pulumi.Output<string | undefined>;
    /**
     * The message to be sent. (Only for Slack/MS-Team Message Channel action)
     */
    public readonly message!: pulumi.Output<string | undefined>;
    /**
     * The HTTP method to be used for the call
     */
    public readonly method!: pulumi.Output<string | undefined>;
    /**
     * The name of the action
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The note to be added to the incident
     */
    public readonly note!: pulumi.Output<string | undefined>;
    /**
     * The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
     */
    public readonly pageStatusId!: pulumi.Output<number | undefined>;
    /**
     * The priority of the incident
     */
    public readonly priority!: pulumi.Output<string | undefined>;
    /**
     * The project to be used for creating the ticket. (Only for Jira Create Ticket action)
     */
    public readonly project!: pulumi.Output<string | undefined>;
    /**
     * The runbooks to be added to the incident
     */
    public readonly runbooks!: pulumi.Output<string[] | undefined>;
    /**
     * The SLIs to be added to the incident
     */
    public readonly slis!: pulumi.Output<string[] | undefined>;
    /**
     * ID of the SLO to be added to the incident
     */
    public readonly slo!: pulumi.Output<number | undefined>;
    /**
     * The status and message to be set for the issue. (Only for Add Status Page Issue action)
     */
    public readonly statusAndMessages!: pulumi.Output<outputs.workflow.ActionStatusAndMessage[] | undefined>;
    /**
     * The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
     */
    public readonly statusPageId!: pulumi.Output<number | undefined>;
    /**
     * The subject of the email
     */
    public readonly subject!: pulumi.Output<string | undefined>;
    /**
     * The title of the ticket. (Only for Jira Create Ticket action)
     */
    public readonly title!: pulumi.Output<string | undefined>;
    /**
     * The email addresses to which the email is to be sent
     */
    public readonly tos!: pulumi.Output<string[] | undefined>;
    /**
     * The URL to be called
     */
    public readonly url!: pulumi.Output<string | undefined>;
    /**
     * The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
     */
    public readonly webhookId!: pulumi.Output<string | undefined>;
    /**
     * The ID of the workflow to which this action belongs
     */
    public readonly workflowId!: pulumi.Output<string>;

    /**
     * Create a Action resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ActionArgs | ActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ActionState | undefined;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["autoName"] = state ? state.autoName : undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["channelId"] = state ? state.channelId : undefined;
            resourceInputs["channelName"] = state ? state.channelName : undefined;
            resourceInputs["channels"] = state ? state.channels : undefined;
            resourceInputs["componentAndImpacts"] = state ? state.componentAndImpacts : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["issueTitle"] = state ? state.issueTitle : undefined;
            resourceInputs["issueType"] = state ? state.issueType : undefined;
            resourceInputs["memberId"] = state ? state.memberId : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["note"] = state ? state.note : undefined;
            resourceInputs["pageStatusId"] = state ? state.pageStatusId : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["runbooks"] = state ? state.runbooks : undefined;
            resourceInputs["slis"] = state ? state.slis : undefined;
            resourceInputs["slo"] = state ? state.slo : undefined;
            resourceInputs["statusAndMessages"] = state ? state.statusAndMessages : undefined;
            resourceInputs["statusPageId"] = state ? state.statusPageId : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["tos"] = state ? state.tos : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["webhookId"] = state ? state.webhookId : undefined;
            resourceInputs["workflowId"] = state ? state.workflowId : undefined;
        } else {
            const args = argsOrState as ActionArgs | undefined;
            if ((!args || args.workflowId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workflowId'");
            }
            resourceInputs["account"] = args ? args.account : undefined;
            resourceInputs["autoName"] = args ? args.autoName : undefined;
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["channelId"] = args ? args.channelId : undefined;
            resourceInputs["channelName"] = args ? args.channelName : undefined;
            resourceInputs["channels"] = args ? args.channels : undefined;
            resourceInputs["componentAndImpacts"] = args ? args.componentAndImpacts : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["issueTitle"] = args ? args.issueTitle : undefined;
            resourceInputs["issueType"] = args ? args.issueType : undefined;
            resourceInputs["memberId"] = args ? args.memberId : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["note"] = args ? args.note : undefined;
            resourceInputs["pageStatusId"] = args ? args.pageStatusId : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["runbooks"] = args ? args.runbooks : undefined;
            resourceInputs["slis"] = args ? args.slis : undefined;
            resourceInputs["slo"] = args ? args.slo : undefined;
            resourceInputs["statusAndMessages"] = args ? args.statusAndMessages : undefined;
            resourceInputs["statusPageId"] = args ? args.statusPageId : undefined;
            resourceInputs["subject"] = args ? args.subject : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["tos"] = args ? args.tos : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["webhookId"] = args ? args.webhookId : undefined;
            resourceInputs["workflowId"] = args ? args.workflowId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Action.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Action resources.
 */
export interface ActionState {
    /**
     * The account to be used for creating the ticket. (Only for Jira Create Ticket action)
     */
    account?: pulumi.Input<string>;
    /**
     * Whether to automatically name the action
     */
    autoName?: pulumi.Input<boolean>;
    /**
     * The body of the request
     */
    body?: pulumi.Input<string>;
    /**
     * The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
     */
    channelId?: pulumi.Input<string>;
    /**
     * The name of the channel to be archived. (Only for Slack Archive Channel action)
     */
    channelName?: pulumi.Input<string>;
    /**
     * The communication channels to be added to the incident
     */
    channels?: pulumi.Input<pulumi.Input<inputs.workflow.ActionChannel>[]>;
    /**
     * The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
     */
    componentAndImpacts?: pulumi.Input<pulumi.Input<inputs.workflow.ActionComponentAndImpact>[]>;
    /**
     * The description of the ticket. (Only for Jira Create Ticket action)
     */
    description?: pulumi.Input<string>;
    /**
     * The headers to be sent with the request
     */
    headers?: pulumi.Input<pulumi.Input<inputs.workflow.ActionHeader>[]>;
    /**
     * The title of the issue to be added. (Only for Add Status Page Issue action)
     */
    issueTitle?: pulumi.Input<string>;
    /**
     * The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
     */
    issueType?: pulumi.Input<string>;
    /**
     * The ID of the user to which the message is to be sent. (Only for Slack Message User action)
     */
    memberId?: pulumi.Input<string>;
    /**
     * The message to be sent. (Only for Slack/MS-Team Message Channel action)
     */
    message?: pulumi.Input<string>;
    /**
     * The HTTP method to be used for the call
     */
    method?: pulumi.Input<string>;
    /**
     * The name of the action
     */
    name?: pulumi.Input<string>;
    /**
     * The note to be added to the incident
     */
    note?: pulumi.Input<string>;
    /**
     * The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
     */
    pageStatusId?: pulumi.Input<number>;
    /**
     * The priority of the incident
     */
    priority?: pulumi.Input<string>;
    /**
     * The project to be used for creating the ticket. (Only for Jira Create Ticket action)
     */
    project?: pulumi.Input<string>;
    /**
     * The runbooks to be added to the incident
     */
    runbooks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The SLIs to be added to the incident
     */
    slis?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the SLO to be added to the incident
     */
    slo?: pulumi.Input<number>;
    /**
     * The status and message to be set for the issue. (Only for Add Status Page Issue action)
     */
    statusAndMessages?: pulumi.Input<pulumi.Input<inputs.workflow.ActionStatusAndMessage>[]>;
    /**
     * The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
     */
    statusPageId?: pulumi.Input<number>;
    /**
     * The subject of the email
     */
    subject?: pulumi.Input<string>;
    /**
     * The title of the ticket. (Only for Jira Create Ticket action)
     */
    title?: pulumi.Input<string>;
    /**
     * The email addresses to which the email is to be sent
     */
    tos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The URL to be called
     */
    url?: pulumi.Input<string>;
    /**
     * The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
     */
    webhookId?: pulumi.Input<string>;
    /**
     * The ID of the workflow to which this action belongs
     */
    workflowId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Action resource.
 */
export interface ActionArgs {
    /**
     * The account to be used for creating the ticket. (Only for Jira Create Ticket action)
     */
    account?: pulumi.Input<string>;
    /**
     * Whether to automatically name the action
     */
    autoName?: pulumi.Input<boolean>;
    /**
     * The body of the request
     */
    body?: pulumi.Input<string>;
    /**
     * The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
     */
    channelId?: pulumi.Input<string>;
    /**
     * The name of the channel to be archived. (Only for Slack Archive Channel action)
     */
    channelName?: pulumi.Input<string>;
    /**
     * The communication channels to be added to the incident
     */
    channels?: pulumi.Input<pulumi.Input<inputs.workflow.ActionChannel>[]>;
    /**
     * The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
     */
    componentAndImpacts?: pulumi.Input<pulumi.Input<inputs.workflow.ActionComponentAndImpact>[]>;
    /**
     * The description of the ticket. (Only for Jira Create Ticket action)
     */
    description?: pulumi.Input<string>;
    /**
     * The headers to be sent with the request
     */
    headers?: pulumi.Input<pulumi.Input<inputs.workflow.ActionHeader>[]>;
    /**
     * The title of the issue to be added. (Only for Add Status Page Issue action)
     */
    issueTitle?: pulumi.Input<string>;
    /**
     * The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
     */
    issueType?: pulumi.Input<string>;
    /**
     * The ID of the user to which the message is to be sent. (Only for Slack Message User action)
     */
    memberId?: pulumi.Input<string>;
    /**
     * The message to be sent. (Only for Slack/MS-Team Message Channel action)
     */
    message?: pulumi.Input<string>;
    /**
     * The HTTP method to be used for the call
     */
    method?: pulumi.Input<string>;
    /**
     * The name of the action
     */
    name?: pulumi.Input<string>;
    /**
     * The note to be added to the incident
     */
    note?: pulumi.Input<string>;
    /**
     * The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
     */
    pageStatusId?: pulumi.Input<number>;
    /**
     * The priority of the incident
     */
    priority?: pulumi.Input<string>;
    /**
     * The project to be used for creating the ticket. (Only for Jira Create Ticket action)
     */
    project?: pulumi.Input<string>;
    /**
     * The runbooks to be added to the incident
     */
    runbooks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The SLIs to be added to the incident
     */
    slis?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the SLO to be added to the incident
     */
    slo?: pulumi.Input<number>;
    /**
     * The status and message to be set for the issue. (Only for Add Status Page Issue action)
     */
    statusAndMessages?: pulumi.Input<pulumi.Input<inputs.workflow.ActionStatusAndMessage>[]>;
    /**
     * The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
     */
    statusPageId?: pulumi.Input<number>;
    /**
     * The subject of the email
     */
    subject?: pulumi.Input<string>;
    /**
     * The title of the ticket. (Only for Jira Create Ticket action)
     */
    title?: pulumi.Input<string>;
    /**
     * The email addresses to which the email is to be sent
     */
    tos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The URL to be called
     */
    url?: pulumi.Input<string>;
    /**
     * The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
     */
    webhookId?: pulumi.Input<string>;
    /**
     * The ID of the workflow to which this action belongs
     */
    workflowId: pulumi.Input<string>;
}
