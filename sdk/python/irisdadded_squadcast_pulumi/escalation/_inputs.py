# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'PolicyEntityOwnerArgs',
    'PolicyRepeatArgs',
    'PolicyRuleArgs',
    'PolicyRuleRepeatArgs',
    'PolicyRuleRoundRobinArgs',
    'PolicyRuleRoundRobinRotationArgs',
    'PolicyRuleTargetArgs',
]

@pulumi.input_type
class PolicyEntityOwnerArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: Escalation policy owner id.
        :param pulumi.Input[str] type: Escalation policy owner type. Supported values are 'user' or 'squad'.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Escalation policy owner id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Escalation policy owner type. Supported values are 'user' or 'squad'.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class PolicyRepeatArgs:
    def __init__(__self__, *,
                 delay_minutes: pulumi.Input[int],
                 times: pulumi.Input[int]):
        """
        :param pulumi.Input[int] delay_minutes: The number of minutes to wait before repeating the escalation policy
        :param pulumi.Input[int] times: The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
        """
        pulumi.set(__self__, "delay_minutes", delay_minutes)
        pulumi.set(__self__, "times", times)

    @property
    @pulumi.getter(name="delayMinutes")
    def delay_minutes(self) -> pulumi.Input[int]:
        """
        The number of minutes to wait before repeating the escalation policy
        """
        return pulumi.get(self, "delay_minutes")

    @delay_minutes.setter
    def delay_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "delay_minutes", value)

    @property
    @pulumi.getter
    def times(self) -> pulumi.Input[int]:
        """
        The number of times you want this escalation policy to be repeated, maximum allowed to repeat 3 times
        """
        return pulumi.get(self, "times")

    @times.setter
    def times(self, value: pulumi.Input[int]):
        pulumi.set(self, "times", value)


@pulumi.input_type
class PolicyRuleArgs:
    def __init__(__self__, *,
                 delay_minutes: pulumi.Input[int],
                 targets: pulumi.Input[Sequence[pulumi.Input['PolicyRuleTargetArgs']]],
                 notification_channels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 repeat: Optional[pulumi.Input['PolicyRuleRepeatArgs']] = None,
                 round_robin: Optional[pulumi.Input['PolicyRuleRoundRobinArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notification_channels: Notification channels to notify the targets. (SMS, Phone, Email, Push)
        :param pulumi.Input['PolicyRuleRepeatArgs'] repeat: repeat this rule
        """
        pulumi.set(__self__, "delay_minutes", delay_minutes)
        pulumi.set(__self__, "targets", targets)
        if notification_channels is not None:
            pulumi.set(__self__, "notification_channels", notification_channels)
        if repeat is not None:
            pulumi.set(__self__, "repeat", repeat)
        if round_robin is not None:
            pulumi.set(__self__, "round_robin", round_robin)

    @property
    @pulumi.getter(name="delayMinutes")
    def delay_minutes(self) -> pulumi.Input[int]:
        return pulumi.get(self, "delay_minutes")

    @delay_minutes.setter
    def delay_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "delay_minutes", value)

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Input[Sequence[pulumi.Input['PolicyRuleTargetArgs']]]:
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: pulumi.Input[Sequence[pulumi.Input['PolicyRuleTargetArgs']]]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter(name="notificationChannels")
    def notification_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Notification channels to notify the targets. (SMS, Phone, Email, Push)
        """
        return pulumi.get(self, "notification_channels")

    @notification_channels.setter
    def notification_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notification_channels", value)

    @property
    @pulumi.getter
    def repeat(self) -> Optional[pulumi.Input['PolicyRuleRepeatArgs']]:
        """
        repeat this rule
        """
        return pulumi.get(self, "repeat")

    @repeat.setter
    def repeat(self, value: Optional[pulumi.Input['PolicyRuleRepeatArgs']]):
        pulumi.set(self, "repeat", value)

    @property
    @pulumi.getter(name="roundRobin")
    def round_robin(self) -> Optional[pulumi.Input['PolicyRuleRoundRobinArgs']]:
        return pulumi.get(self, "round_robin")

    @round_robin.setter
    def round_robin(self, value: Optional[pulumi.Input['PolicyRuleRoundRobinArgs']]):
        pulumi.set(self, "round_robin", value)


@pulumi.input_type
class PolicyRuleRepeatArgs:
    def __init__(__self__, *,
                 delay_minutes: pulumi.Input[int],
                 times: pulumi.Input[int]):
        """
        :param pulumi.Input[int] delay_minutes: repeat after minutes
        :param pulumi.Input[int] times: repeat times
        """
        pulumi.set(__self__, "delay_minutes", delay_minutes)
        pulumi.set(__self__, "times", times)

    @property
    @pulumi.getter(name="delayMinutes")
    def delay_minutes(self) -> pulumi.Input[int]:
        """
        repeat after minutes
        """
        return pulumi.get(self, "delay_minutes")

    @delay_minutes.setter
    def delay_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "delay_minutes", value)

    @property
    @pulumi.getter
    def times(self) -> pulumi.Input[int]:
        """
        repeat times
        """
        return pulumi.get(self, "times")

    @times.setter
    def times(self, value: pulumi.Input[int]):
        pulumi.set(self, "times", value)


@pulumi.input_type
class PolicyRuleRoundRobinArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 rotation: Optional[pulumi.Input['PolicyRuleRoundRobinRotationArgs']] = None):
        """
        :param pulumi.Input[bool] enabled: Enables Round Robin escalation within this layer
        """
        pulumi.set(__self__, "enabled", enabled)
        if rotation is not None:
            pulumi.set(__self__, "rotation", rotation)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Enables Round Robin escalation within this layer
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def rotation(self) -> Optional[pulumi.Input['PolicyRuleRoundRobinRotationArgs']]:
        return pulumi.get(self, "rotation")

    @rotation.setter
    def rotation(self, value: Optional[pulumi.Input['PolicyRuleRoundRobinRotationArgs']]):
        pulumi.set(self, "rotation", value)


@pulumi.input_type
class PolicyRuleRoundRobinRotationArgs:
    def __init__(__self__, *,
                 delay_minutes: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] delay_minutes: repeat after minutes
        :param pulumi.Input[bool] enabled: enable rotation within
        """
        if delay_minutes is not None:
            pulumi.set(__self__, "delay_minutes", delay_minutes)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="delayMinutes")
    def delay_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        repeat after minutes
        """
        return pulumi.get(self, "delay_minutes")

    @delay_minutes.setter
    def delay_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay_minutes", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        enable rotation within
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class PolicyRuleTargetArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: ID of the target
        :param pulumi.Input[str] type: Type of the target. (user, squad, schedule, schedulev2)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        ID of the target
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the target. (user, squad, schedule, schedulev2)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


