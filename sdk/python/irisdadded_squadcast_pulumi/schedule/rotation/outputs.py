# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs

__all__ = [
    'V2ParticipantGroup',
    'V2ParticipantGroupParticipant',
    'V2ShiftTimeslot',
]

@pulumi.output_type
class V2ParticipantGroup(dict):
    def __init__(__self__, *,
                 participants: Optional[Sequence['outputs.V2ParticipantGroupParticipant']] = None):
        """
        :param Sequence['V2ParticipantGroupParticipantArgs'] participants: Group participants.
        """
        if participants is not None:
            pulumi.set(__self__, "participants", participants)

    @property
    @pulumi.getter
    def participants(self) -> Optional[Sequence['outputs.V2ParticipantGroupParticipant']]:
        """
        Group participants.
        """
        return pulumi.get(self, "participants")


@pulumi.output_type
class V2ParticipantGroupParticipant(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: Participant id.
        :param str type: Participant type (user, team, squad).
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Participant id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Participant type (user, team, squad).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class V2ShiftTimeslot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startHour":
            suggest = "start_hour"
        elif key == "startMinute":
            suggest = "start_minute"
        elif key == "dayOfWeek":
            suggest = "day_of_week"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in V2ShiftTimeslot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        V2ShiftTimeslot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        V2ShiftTimeslot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: int,
                 start_hour: int,
                 start_minute: int,
                 day_of_week: Optional[str] = None):
        """
        :param int duration: Defines the duration of each shift. (in minutes)
        :param int start_hour: Defines the start hour of the each shift in the schedule timezone.
        :param int start_minute: Defines the start minute of the each shift in the schedule timezone.
        :param str day_of_week: Defines the day of the week for the shift. If not specified, the timeslot is active on all days of the week.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "start_hour", start_hour)
        pulumi.set(__self__, "start_minute", start_minute)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)

    @property
    @pulumi.getter
    def duration(self) -> int:
        """
        Defines the duration of each shift. (in minutes)
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="startHour")
    def start_hour(self) -> int:
        """
        Defines the start hour of the each shift in the schedule timezone.
        """
        return pulumi.get(self, "start_hour")

    @property
    @pulumi.getter(name="startMinute")
    def start_minute(self) -> int:
        """
        Defines the start minute of the each shift in the schedule timezone.
        """
        return pulumi.get(self, "start_minute")

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[str]:
        """
        Defines the day of the week for the shift. If not specified, the timeslot is active on all days of the week.
        """
        return pulumi.get(self, "day_of_week")


