# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'RulesRule',
    'RulesRuleBasicExpression',
    'RulesRuleTag',
]

@pulumi.output_type
class RulesRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isBasic":
            suggest = "is_basic"
        elif key == "basicExpressions":
            suggest = "basic_expressions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RulesRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RulesRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RulesRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_basic: bool,
                 basic_expressions: Optional[Sequence['outputs.RulesRuleBasicExpression']] = None,
                 expression: Optional[str] = None,
                 tags: Optional[Sequence['outputs.RulesRuleTag']] = None):
        """
        :param bool is_basic: is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        :param Sequence['RulesRuleBasicExpressionArgs'] basic_expressions: The basic expression which needs to be evaluated to be true for this rule to apply.
        :param str expression: The expression which needs to be evaluated to be true for this rule to apply.
        :param Sequence['RulesRuleTagArgs'] tags: The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
        """
        pulumi.set(__self__, "is_basic", is_basic)
        if basic_expressions is not None:
            pulumi.set(__self__, "basic_expressions", basic_expressions)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="isBasic")
    def is_basic(self) -> bool:
        """
        is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        """
        return pulumi.get(self, "is_basic")

    @property
    @pulumi.getter(name="basicExpressions")
    def basic_expressions(self) -> Optional[Sequence['outputs.RulesRuleBasicExpression']]:
        """
        The basic expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "basic_expressions")

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        """
        The expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.RulesRuleTag']]:
        """
        The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class RulesRuleBasicExpression(dict):
    def __init__(__self__, *,
                 lhs: str,
                 op: str,
                 rhs: str):
        """
        :param str lhs: left hand side dropdown value
        :param str op: operator
        :param str rhs: right hand side value
        """
        pulumi.set(__self__, "lhs", lhs)
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "rhs", rhs)

    @property
    @pulumi.getter
    def lhs(self) -> str:
        """
        left hand side dropdown value
        """
        return pulumi.get(self, "lhs")

    @property
    @pulumi.getter
    def op(self) -> str:
        """
        operator
        """
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def rhs(self) -> str:
        """
        right hand side value
        """
        return pulumi.get(self, "rhs")


@pulumi.output_type
class RulesRuleTag(dict):
    def __init__(__self__, *,
                 color: str,
                 key: str,
                 value: str):
        """
        :param str color: Tag color, hex values
        :param str key: key
        :param str value: value
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        """
        Tag color, hex values
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value
        """
        return pulumi.get(self, "value")


