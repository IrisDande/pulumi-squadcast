# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkflowArgs', 'Workflow']

@pulumi.input_type
class WorkflowArgs:
    def __init__(__self__, *,
                 entity_owners: pulumi.Input[Sequence[pulumi.Input['WorkflowEntityOwnerArgs']]],
                 owner_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 trigger: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 filters: Optional[pulumi.Input['WorkflowFiltersArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTagArgs']]]] = None):
        """
        The set of arguments for constructing a Workflow resource.
        :param pulumi.Input[Sequence[pulumi.Input['WorkflowEntityOwnerArgs']]] entity_owners: The entity owner of the workflow
        :param pulumi.Input[str] owner_id: The ID of the user who owns the workflow
        :param pulumi.Input[str] title: The title of the workflow
        :param pulumi.Input[str] trigger: The trigger for the workflow
        :param pulumi.Input[str] description: The description of the workflow
        :param pulumi.Input[bool] enabled: Whether the workflow is enabled or not
        :param pulumi.Input['WorkflowFiltersArgs'] filters: The filters to be applied on the workflow
        :param pulumi.Input[Sequence[pulumi.Input['WorkflowTagArgs']]] tags: The tags to be applied on the workflow
        """
        pulumi.set(__self__, "entity_owners", entity_owners)
        pulumi.set(__self__, "owner_id", owner_id)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "trigger", trigger)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="entityOwners")
    def entity_owners(self) -> pulumi.Input[Sequence[pulumi.Input['WorkflowEntityOwnerArgs']]]:
        """
        The entity owner of the workflow
        """
        return pulumi.get(self, "entity_owners")

    @entity_owners.setter
    def entity_owners(self, value: pulumi.Input[Sequence[pulumi.Input['WorkflowEntityOwnerArgs']]]):
        pulumi.set(self, "entity_owners", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Input[str]:
        """
        The ID of the user who owns the workflow
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the workflow
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Input[str]:
        """
        The trigger for the workflow
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: pulumi.Input[str]):
        pulumi.set(self, "trigger", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the workflow
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the workflow is enabled or not
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input['WorkflowFiltersArgs']]:
        """
        The filters to be applied on the workflow
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input['WorkflowFiltersArgs']]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTagArgs']]]]:
        """
        The tags to be applied on the workflow
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _WorkflowState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 entity_owners: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowEntityOwnerArgs']]]] = None,
                 filters: Optional[pulumi.Input['WorkflowFiltersArgs']] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTagArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 trigger: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Workflow resources.
        :param pulumi.Input[str] description: The description of the workflow
        :param pulumi.Input[bool] enabled: Whether the workflow is enabled or not
        :param pulumi.Input[Sequence[pulumi.Input['WorkflowEntityOwnerArgs']]] entity_owners: The entity owner of the workflow
        :param pulumi.Input['WorkflowFiltersArgs'] filters: The filters to be applied on the workflow
        :param pulumi.Input[str] owner_id: The ID of the user who owns the workflow
        :param pulumi.Input[Sequence[pulumi.Input['WorkflowTagArgs']]] tags: The tags to be applied on the workflow
        :param pulumi.Input[str] title: The title of the workflow
        :param pulumi.Input[str] trigger: The trigger for the workflow
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if entity_owners is not None:
            pulumi.set(__self__, "entity_owners", entity_owners)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if trigger is not None:
            pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the workflow
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the workflow is enabled or not
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="entityOwners")
    def entity_owners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowEntityOwnerArgs']]]]:
        """
        The entity owner of the workflow
        """
        return pulumi.get(self, "entity_owners")

    @entity_owners.setter
    def entity_owners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowEntityOwnerArgs']]]]):
        pulumi.set(self, "entity_owners", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input['WorkflowFiltersArgs']]:
        """
        The filters to be applied on the workflow
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input['WorkflowFiltersArgs']]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the user who owns the workflow
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTagArgs']]]]:
        """
        The tags to be applied on the workflow
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the workflow
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def trigger(self) -> Optional[pulumi.Input[str]]:
        """
        The trigger for the workflow
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger", value)


class Workflow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 entity_owners: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkflowEntityOwnerArgs']]]]] = None,
                 filters: Optional[pulumi.Input[pulumi.InputType['WorkflowFiltersArgs']]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkflowTagArgs']]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 trigger: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the workflow
        :param pulumi.Input[bool] enabled: Whether the workflow is enabled or not
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkflowEntityOwnerArgs']]]] entity_owners: The entity owner of the workflow
        :param pulumi.Input[pulumi.InputType['WorkflowFiltersArgs']] filters: The filters to be applied on the workflow
        :param pulumi.Input[str] owner_id: The ID of the user who owns the workflow
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkflowTagArgs']]]] tags: The tags to be applied on the workflow
        :param pulumi.Input[str] title: The title of the workflow
        :param pulumi.Input[str] trigger: The trigger for the workflow
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkflowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param WorkflowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkflowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 entity_owners: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkflowEntityOwnerArgs']]]]] = None,
                 filters: Optional[pulumi.Input[pulumi.InputType['WorkflowFiltersArgs']]] = None,
                 owner_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkflowTagArgs']]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 trigger: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkflowArgs.__new__(WorkflowArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            if entity_owners is None and not opts.urn:
                raise TypeError("Missing required property 'entity_owners'")
            __props__.__dict__["entity_owners"] = entity_owners
            __props__.__dict__["filters"] = filters
            if owner_id is None and not opts.urn:
                raise TypeError("Missing required property 'owner_id'")
            __props__.__dict__["owner_id"] = owner_id
            __props__.__dict__["tags"] = tags
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            if trigger is None and not opts.urn:
                raise TypeError("Missing required property 'trigger'")
            __props__.__dict__["trigger"] = trigger
        super(Workflow, __self__).__init__(
            'squadcast:index/workflow:Workflow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            entity_owners: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkflowEntityOwnerArgs']]]]] = None,
            filters: Optional[pulumi.Input[pulumi.InputType['WorkflowFiltersArgs']]] = None,
            owner_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkflowTagArgs']]]]] = None,
            title: Optional[pulumi.Input[str]] = None,
            trigger: Optional[pulumi.Input[str]] = None) -> 'Workflow':
        """
        Get an existing Workflow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the workflow
        :param pulumi.Input[bool] enabled: Whether the workflow is enabled or not
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkflowEntityOwnerArgs']]]] entity_owners: The entity owner of the workflow
        :param pulumi.Input[pulumi.InputType['WorkflowFiltersArgs']] filters: The filters to be applied on the workflow
        :param pulumi.Input[str] owner_id: The ID of the user who owns the workflow
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkflowTagArgs']]]] tags: The tags to be applied on the workflow
        :param pulumi.Input[str] title: The title of the workflow
        :param pulumi.Input[str] trigger: The trigger for the workflow
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkflowState.__new__(_WorkflowState)

        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["entity_owners"] = entity_owners
        __props__.__dict__["filters"] = filters
        __props__.__dict__["owner_id"] = owner_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["title"] = title
        __props__.__dict__["trigger"] = trigger
        return Workflow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the workflow
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the workflow is enabled or not
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="entityOwners")
    def entity_owners(self) -> pulumi.Output[Sequence['outputs.WorkflowEntityOwner']]:
        """
        The entity owner of the workflow
        """
        return pulumi.get(self, "entity_owners")

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Output[Optional['outputs.WorkflowFilters']]:
        """
        The filters to be applied on the workflow
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> pulumi.Output[str]:
        """
        The ID of the user who owns the workflow
        """
        return pulumi.get(self, "owner_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.WorkflowTag']]]:
        """
        The tags to be applied on the workflow
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        The title of the workflow
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Output[str]:
        """
        The trigger for the workflow
        """
        return pulumi.get(self, "trigger")

