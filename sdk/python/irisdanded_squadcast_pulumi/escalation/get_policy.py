# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPolicyResult',
    'AwaitableGetPolicyResult',
    'get_policy',
    'get_policy_output',
]

@pulumi.output_type
class GetPolicyResult:
    """
    A collection of values returned by getPolicy.
    """
    def __init__(__self__, description=None, entity_owners=None, id=None, name=None, repeats=None, rules=None, team_id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if entity_owners and not isinstance(entity_owners, list):
            raise TypeError("Expected argument 'entity_owners' to be a list")
        pulumi.set(__self__, "entity_owners", entity_owners)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if repeats and not isinstance(repeats, list):
            raise TypeError("Expected argument 'repeats' to be a list")
        pulumi.set(__self__, "repeats", repeats)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if team_id and not isinstance(team_id, str):
            raise TypeError("Expected argument 'team_id' to be a str")
        pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Detailed description about the nature & purpose Escalation policy
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="entityOwners")
    def entity_owners(self) -> Sequence['outputs.GetPolicyEntityOwnerResult']:
        """
        Escalation policy owner
        """
        return pulumi.get(self, "entity_owners")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Escalation Policy id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Escalation Policy
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def repeats(self) -> Sequence['outputs.GetPolicyRepeatResult']:
        """
        You can choose to repeat the entire policy, if no one acknowledges the incident even after the Escalation Policy has been executed fully once
        """
        return pulumi.get(self, "repeats")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetPolicyRuleResult']:
        """
        Rules will have the details of who to notify and when to notify and how to notify them.
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> str:
        """
        Team id.
        """
        return pulumi.get(self, "team_id")


class AwaitableGetPolicyResult(GetPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyResult(
            description=self.description,
            entity_owners=self.entity_owners,
            id=self.id,
            name=self.name,
            repeats=self.repeats,
            rules=self.rules,
            team_id=self.team_id)


def get_policy(name: Optional[str] = None,
               team_id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyResult:
    """
    [Escalation Policies](https://support.squadcast.com/docs/escalation-policies) defines rules indicating when and how alerts will escalate to various Users, Squads and (or) Schedules within your Organization.Use this data source to get information about a specific escalation policy that you can use for other Squadcast resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_squadcast as squadcast

    test = squadcast.Escalation.get_policy(name=squadcast_escalation_policy["test"]["name"],
        team_id="team id")
    ```


    :param str name: Name of the Escalation Policy
    :param str team_id: Team id.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['teamId'] = team_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('squadcast:Escalation/getPolicy:getPolicy', __args__, opts=opts, typ=GetPolicyResult).value

    return AwaitableGetPolicyResult(
        description=pulumi.get(__ret__, 'description'),
        entity_owners=pulumi.get(__ret__, 'entity_owners'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        repeats=pulumi.get(__ret__, 'repeats'),
        rules=pulumi.get(__ret__, 'rules'),
        team_id=pulumi.get(__ret__, 'team_id'))


@_utilities.lift_output_func(get_policy)
def get_policy_output(name: Optional[pulumi.Input[str]] = None,
                      team_id: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicyResult]:
    """
    [Escalation Policies](https://support.squadcast.com/docs/escalation-policies) defines rules indicating when and how alerts will escalate to various Users, Squads and (or) Schedules within your Organization.Use this data source to get information about a specific escalation policy that you can use for other Squadcast resources.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_squadcast as squadcast

    test = squadcast.Escalation.get_policy(name=squadcast_escalation_policy["test"]["name"],
        team_id="team id")
    ```


    :param str name: Name of the Escalation Policy
    :param str team_id: Team id.
    """
    ...
