# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GerArgs', 'Ger']

@pulumi.input_type
class GerArgs:
    def __init__(__self__, *,
                 entity_owner: pulumi.Input['GerEntityOwnerArgs'],
                 team_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ger resource.
        :param pulumi.Input['GerEntityOwnerArgs'] entity_owner: GER owner.
        :param pulumi.Input[str] team_id: Team id.
        :param pulumi.Input[str] description: GER description.
        :param pulumi.Input[str] name: GER name.
        """
        pulumi.set(__self__, "entity_owner", entity_owner)
        pulumi.set(__self__, "team_id", team_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="entityOwner")
    def entity_owner(self) -> pulumi.Input['GerEntityOwnerArgs']:
        """
        GER owner.
        """
        return pulumi.get(self, "entity_owner")

    @entity_owner.setter
    def entity_owner(self, value: pulumi.Input['GerEntityOwnerArgs']):
        pulumi.set(self, "entity_owner", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Input[str]:
        """
        Team id.
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        GER description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        GER name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _GerState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 entity_owner: Optional[pulumi.Input['GerEntityOwnerArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 routing_key: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ger resources.
        :param pulumi.Input[str] description: GER description.
        :param pulumi.Input['GerEntityOwnerArgs'] entity_owner: GER owner.
        :param pulumi.Input[str] name: GER name.
        :param pulumi.Input[str] routing_key: Routing Key is an identifier used to determine the ruleset that an incoming event belongs to. It is a common key that associates multiple alert sources with their configured rules, ensuring events are routed to the appropriate services when the defined criteria are met.
        :param pulumi.Input[str] team_id: Team id.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if entity_owner is not None:
            pulumi.set(__self__, "entity_owner", entity_owner)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if routing_key is not None:
            pulumi.set(__self__, "routing_key", routing_key)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        GER description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="entityOwner")
    def entity_owner(self) -> Optional[pulumi.Input['GerEntityOwnerArgs']]:
        """
        GER owner.
        """
        return pulumi.get(self, "entity_owner")

    @entity_owner.setter
    def entity_owner(self, value: Optional[pulumi.Input['GerEntityOwnerArgs']]):
        pulumi.set(self, "entity_owner", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        GER name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> Optional[pulumi.Input[str]]:
        """
        Routing Key is an identifier used to determine the ruleset that an incoming event belongs to. It is a common key that associates multiple alert sources with their configured rules, ensuring events are routed to the appropriate services when the defined criteria are met.
        """
        return pulumi.get(self, "routing_key")

    @routing_key.setter
    def routing_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_key", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[str]]:
        """
        Team id.
        """
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_id", value)


class Ger(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 entity_owner: Optional[pulumi.Input[pulumi.InputType['GerEntityOwnerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Global Event Ruleset (GER) is a centralized set of rules that defines service routes for incoming events.

        ## Example Usage

        ```python
        import pulumi
        import irisdanded_squadcast_pulumi as squadcast
        import pulumi_squadcast as squadcast

        team = squadcast.get_team(name="Example Team")
        user = squadcast.get_user(email="john@example.com")
        service = squadcast.get_service(name="Example Service",
            team_id=team.id)
        ger = squadcast.Ger("ger",
            description="Example GER Description",
            team_id=team.id,
            entity_owner=squadcast.GerEntityOwnerArgs(
                id=user.id,
                type="user",
            ))
        ```

        ## Import

        gerID

        ```sh
        $ pulumi import squadcast:index/ger:Ger example_ger_import "53"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: GER description.
        :param pulumi.Input[pulumi.InputType['GerEntityOwnerArgs']] entity_owner: GER owner.
        :param pulumi.Input[str] name: GER name.
        :param pulumi.Input[str] team_id: Team id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Global Event Ruleset (GER) is a centralized set of rules that defines service routes for incoming events.

        ## Example Usage

        ```python
        import pulumi
        import irisdanded_squadcast_pulumi as squadcast
        import pulumi_squadcast as squadcast

        team = squadcast.get_team(name="Example Team")
        user = squadcast.get_user(email="john@example.com")
        service = squadcast.get_service(name="Example Service",
            team_id=team.id)
        ger = squadcast.Ger("ger",
            description="Example GER Description",
            team_id=team.id,
            entity_owner=squadcast.GerEntityOwnerArgs(
                id=user.id,
                type="user",
            ))
        ```

        ## Import

        gerID

        ```sh
        $ pulumi import squadcast:index/ger:Ger example_ger_import "53"
        ```

        :param str resource_name: The name of the resource.
        :param GerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 entity_owner: Optional[pulumi.Input[pulumi.InputType['GerEntityOwnerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GerArgs.__new__(GerArgs)

            __props__.__dict__["description"] = description
            if entity_owner is None and not opts.urn:
                raise TypeError("Missing required property 'entity_owner'")
            __props__.__dict__["entity_owner"] = entity_owner
            __props__.__dict__["name"] = name
            if team_id is None and not opts.urn:
                raise TypeError("Missing required property 'team_id'")
            __props__.__dict__["team_id"] = team_id
            __props__.__dict__["routing_key"] = None
        super(Ger, __self__).__init__(
            'squadcast:index/ger:Ger',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            entity_owner: Optional[pulumi.Input[pulumi.InputType['GerEntityOwnerArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            routing_key: Optional[pulumi.Input[str]] = None,
            team_id: Optional[pulumi.Input[str]] = None) -> 'Ger':
        """
        Get an existing Ger resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: GER description.
        :param pulumi.Input[pulumi.InputType['GerEntityOwnerArgs']] entity_owner: GER owner.
        :param pulumi.Input[str] name: GER name.
        :param pulumi.Input[str] routing_key: Routing Key is an identifier used to determine the ruleset that an incoming event belongs to. It is a common key that associates multiple alert sources with their configured rules, ensuring events are routed to the appropriate services when the defined criteria are met.
        :param pulumi.Input[str] team_id: Team id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GerState.__new__(_GerState)

        __props__.__dict__["description"] = description
        __props__.__dict__["entity_owner"] = entity_owner
        __props__.__dict__["name"] = name
        __props__.__dict__["routing_key"] = routing_key
        __props__.__dict__["team_id"] = team_id
        return Ger(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        GER description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="entityOwner")
    def entity_owner(self) -> pulumi.Output['outputs.GerEntityOwner']:
        """
        GER owner.
        """
        return pulumi.get(self, "entity_owner")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        GER name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> pulumi.Output[str]:
        """
        Routing Key is an identifier used to determine the ruleset that an incoming event belongs to. It is a common key that associates multiple alert sources with their configured rules, ensuring events are routed to the appropriate services when the defined criteria are met.
        """
        return pulumi.get(self, "routing_key")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> pulumi.Output[str]:
        """
        Team id.
        """
        return pulumi.get(self, "team_id")

