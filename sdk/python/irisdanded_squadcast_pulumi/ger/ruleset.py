# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RulesetArgs', 'Ruleset']

@pulumi.input_type
class RulesetArgs:
    def __init__(__self__, *,
                 alert_source: pulumi.Input[str],
                 ger_id: pulumi.Input[str],
                 catch_all_action: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Ruleset resource.
        :param pulumi.Input[str] alert_source: An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        :param pulumi.Input[str] ger_id: GER id.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] catch_all_action: The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
        """
        pulumi.set(__self__, "alert_source", alert_source)
        pulumi.set(__self__, "ger_id", ger_id)
        if catch_all_action is not None:
            pulumi.set(__self__, "catch_all_action", catch_all_action)

    @property
    @pulumi.getter(name="alertSource")
    def alert_source(self) -> pulumi.Input[str]:
        """
        An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        """
        return pulumi.get(self, "alert_source")

    @alert_source.setter
    def alert_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_source", value)

    @property
    @pulumi.getter(name="gerId")
    def ger_id(self) -> pulumi.Input[str]:
        """
        GER id.
        """
        return pulumi.get(self, "ger_id")

    @ger_id.setter
    def ger_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ger_id", value)

    @property
    @pulumi.getter(name="catchAllAction")
    def catch_all_action(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
        """
        return pulumi.get(self, "catch_all_action")

    @catch_all_action.setter
    def catch_all_action(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "catch_all_action", value)


@pulumi.input_type
class _RulesetState:
    def __init__(__self__, *,
                 alert_source: Optional[pulumi.Input[str]] = None,
                 alert_source_shortname: Optional[pulumi.Input[str]] = None,
                 alert_source_version: Optional[pulumi.Input[str]] = None,
                 catch_all_action: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ger_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ruleset resources.
        :param pulumi.Input[str] alert_source: An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        :param pulumi.Input[str] alert_source_shortname: Shortname of the linked alert source.
        :param pulumi.Input[str] alert_source_version: Version of the linked alert source.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] catch_all_action: The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
        :param pulumi.Input[str] ger_id: GER id.
        """
        if alert_source is not None:
            pulumi.set(__self__, "alert_source", alert_source)
        if alert_source_shortname is not None:
            pulumi.set(__self__, "alert_source_shortname", alert_source_shortname)
        if alert_source_version is not None:
            pulumi.set(__self__, "alert_source_version", alert_source_version)
        if catch_all_action is not None:
            pulumi.set(__self__, "catch_all_action", catch_all_action)
        if ger_id is not None:
            pulumi.set(__self__, "ger_id", ger_id)

    @property
    @pulumi.getter(name="alertSource")
    def alert_source(self) -> Optional[pulumi.Input[str]]:
        """
        An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        """
        return pulumi.get(self, "alert_source")

    @alert_source.setter
    def alert_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_source", value)

    @property
    @pulumi.getter(name="alertSourceShortname")
    def alert_source_shortname(self) -> Optional[pulumi.Input[str]]:
        """
        Shortname of the linked alert source.
        """
        return pulumi.get(self, "alert_source_shortname")

    @alert_source_shortname.setter
    def alert_source_shortname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_source_shortname", value)

    @property
    @pulumi.getter(name="alertSourceVersion")
    def alert_source_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the linked alert source.
        """
        return pulumi.get(self, "alert_source_version")

    @alert_source_version.setter
    def alert_source_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_source_version", value)

    @property
    @pulumi.getter(name="catchAllAction")
    def catch_all_action(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
        """
        return pulumi.get(self, "catch_all_action")

    @catch_all_action.setter
    def catch_all_action(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "catch_all_action", value)

    @property
    @pulumi.getter(name="gerId")
    def ger_id(self) -> Optional[pulumi.Input[str]]:
        """
        GER id.
        """
        return pulumi.get(self, "ger_id")

    @ger_id.setter
    def ger_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ger_id", value)


class Ruleset(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_source: Optional[pulumi.Input[str]] = None,
                 catch_all_action: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ger_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        GER Ruleset is a set of rules and configurations in Squadcast. It allows users to define how alerts are routed to services without the need to set up individual webhooks for each alert source.

        ## Example Usage

        ```python
        import pulumi
        import irisdanded_squadcast_pulumi as squadcast
        import pulumi_squadcast as squadcast

        example_team = squadcast.get_team(name="Example Team")
        user = squadcast.get_user(email="john@example.com")
        example_service = squadcast.get_service(name="Example Service",
            team_id=example_team.id)
        example_ger = squadcast.Ger("exampleGer",
            description="Example GER Description",
            team_id=example_team.id,
            entity_owner=squadcast.GerEntityOwnerArgs(
                id=user.id,
                type="user",
            ))
        example_ger_ruleset = squadcast.ger.Ruleset("exampleGerRuleset",
            ger_id=example_ger.id,
            alert_source="Prometheus",
            catch_all_action={
                "route_to": example_service.id,
            })
        ```

        ## Import

        gerID:alertSourceName

        ```sh
        $ pulumi import squadcast:Ger/ruleset:Ruleset example_ger_ruleset_import "53:Grafana"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alert_source: An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] catch_all_action: The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
        :param pulumi.Input[str] ger_id: GER id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RulesetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        GER Ruleset is a set of rules and configurations in Squadcast. It allows users to define how alerts are routed to services without the need to set up individual webhooks for each alert source.

        ## Example Usage

        ```python
        import pulumi
        import irisdanded_squadcast_pulumi as squadcast
        import pulumi_squadcast as squadcast

        example_team = squadcast.get_team(name="Example Team")
        user = squadcast.get_user(email="john@example.com")
        example_service = squadcast.get_service(name="Example Service",
            team_id=example_team.id)
        example_ger = squadcast.Ger("exampleGer",
            description="Example GER Description",
            team_id=example_team.id,
            entity_owner=squadcast.GerEntityOwnerArgs(
                id=user.id,
                type="user",
            ))
        example_ger_ruleset = squadcast.ger.Ruleset("exampleGerRuleset",
            ger_id=example_ger.id,
            alert_source="Prometheus",
            catch_all_action={
                "route_to": example_service.id,
            })
        ```

        ## Import

        gerID:alertSourceName

        ```sh
        $ pulumi import squadcast:Ger/ruleset:Ruleset example_ger_ruleset_import "53:Grafana"
        ```

        :param str resource_name: The name of the resource.
        :param RulesetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RulesetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_source: Optional[pulumi.Input[str]] = None,
                 catch_all_action: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ger_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RulesetArgs.__new__(RulesetArgs)

            if alert_source is None and not opts.urn:
                raise TypeError("Missing required property 'alert_source'")
            __props__.__dict__["alert_source"] = alert_source
            __props__.__dict__["catch_all_action"] = catch_all_action
            if ger_id is None and not opts.urn:
                raise TypeError("Missing required property 'ger_id'")
            __props__.__dict__["ger_id"] = ger_id
            __props__.__dict__["alert_source_shortname"] = None
            __props__.__dict__["alert_source_version"] = None
        super(Ruleset, __self__).__init__(
            'squadcast:Ger/ruleset:Ruleset',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alert_source: Optional[pulumi.Input[str]] = None,
            alert_source_shortname: Optional[pulumi.Input[str]] = None,
            alert_source_version: Optional[pulumi.Input[str]] = None,
            catch_all_action: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            ger_id: Optional[pulumi.Input[str]] = None) -> 'Ruleset':
        """
        Get an existing Ruleset resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alert_source: An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        :param pulumi.Input[str] alert_source_shortname: Shortname of the linked alert source.
        :param pulumi.Input[str] alert_source_version: Version of the linked alert source.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] catch_all_action: The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
        :param pulumi.Input[str] ger_id: GER id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RulesetState.__new__(_RulesetState)

        __props__.__dict__["alert_source"] = alert_source
        __props__.__dict__["alert_source_shortname"] = alert_source_shortname
        __props__.__dict__["alert_source_version"] = alert_source_version
        __props__.__dict__["catch_all_action"] = catch_all_action
        __props__.__dict__["ger_id"] = ger_id
        return Ruleset(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alertSource")
    def alert_source(self) -> pulumi.Output[str]:
        """
        An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        """
        return pulumi.get(self, "alert_source")

    @property
    @pulumi.getter(name="alertSourceShortname")
    def alert_source_shortname(self) -> pulumi.Output[str]:
        """
        Shortname of the linked alert source.
        """
        return pulumi.get(self, "alert_source_shortname")

    @property
    @pulumi.getter(name="alertSourceVersion")
    def alert_source_version(self) -> pulumi.Output[str]:
        """
        Version of the linked alert source.
        """
        return pulumi.get(self, "alert_source_version")

    @property
    @pulumi.getter(name="catchAllAction")
    def catch_all_action(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        The "Catch-All Action", when configured, specifies a fall back service. If none of the defined rules for an incoming event evaluate to true, the incoming event is routed to the Catch-All service, ensuring no events are missed.
        """
        return pulumi.get(self, "catch_all_action")

    @property
    @pulumi.getter(name="gerId")
    def ger_id(self) -> pulumi.Output[str]:
        """
        GER id.
        """
        return pulumi.get(self, "ger_id")

