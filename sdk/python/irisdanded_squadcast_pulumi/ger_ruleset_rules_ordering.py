# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['GerRulesetRulesOrderingArgs', 'GerRulesetRulesOrdering']

@pulumi.input_type
class GerRulesetRulesOrderingArgs:
    def __init__(__self__, *,
                 alert_source: pulumi.Input[str],
                 ger_id: pulumi.Input[str],
                 orderings: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        The set of arguments for constructing a GerRulesetRulesOrdering resource.
        :param pulumi.Input[str] alert_source: An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        :param pulumi.Input[str] ger_id: GER id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] orderings: GER Ruleset Rule Ordering.
        """
        pulumi.set(__self__, "alert_source", alert_source)
        pulumi.set(__self__, "ger_id", ger_id)
        pulumi.set(__self__, "orderings", orderings)

    @property
    @pulumi.getter(name="alertSource")
    def alert_source(self) -> pulumi.Input[str]:
        """
        An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        """
        return pulumi.get(self, "alert_source")

    @alert_source.setter
    def alert_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_source", value)

    @property
    @pulumi.getter(name="gerId")
    def ger_id(self) -> pulumi.Input[str]:
        """
        GER id.
        """
        return pulumi.get(self, "ger_id")

    @ger_id.setter
    def ger_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ger_id", value)

    @property
    @pulumi.getter
    def orderings(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        GER Ruleset Rule Ordering.
        """
        return pulumi.get(self, "orderings")

    @orderings.setter
    def orderings(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "orderings", value)


@pulumi.input_type
class _GerRulesetRulesOrderingState:
    def __init__(__self__, *,
                 alert_source: Optional[pulumi.Input[str]] = None,
                 alert_source_shortname: Optional[pulumi.Input[str]] = None,
                 alert_source_version: Optional[pulumi.Input[str]] = None,
                 ger_id: Optional[pulumi.Input[str]] = None,
                 orderings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering GerRulesetRulesOrdering resources.
        :param pulumi.Input[str] alert_source: An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        :param pulumi.Input[str] alert_source_shortname: Shortname of the linked alert source.
        :param pulumi.Input[str] alert_source_version: Version of the linked alert source.
        :param pulumi.Input[str] ger_id: GER id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] orderings: GER Ruleset Rule Ordering.
        """
        if alert_source is not None:
            pulumi.set(__self__, "alert_source", alert_source)
        if alert_source_shortname is not None:
            pulumi.set(__self__, "alert_source_shortname", alert_source_shortname)
        if alert_source_version is not None:
            pulumi.set(__self__, "alert_source_version", alert_source_version)
        if ger_id is not None:
            pulumi.set(__self__, "ger_id", ger_id)
        if orderings is not None:
            pulumi.set(__self__, "orderings", orderings)

    @property
    @pulumi.getter(name="alertSource")
    def alert_source(self) -> Optional[pulumi.Input[str]]:
        """
        An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        """
        return pulumi.get(self, "alert_source")

    @alert_source.setter
    def alert_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_source", value)

    @property
    @pulumi.getter(name="alertSourceShortname")
    def alert_source_shortname(self) -> Optional[pulumi.Input[str]]:
        """
        Shortname of the linked alert source.
        """
        return pulumi.get(self, "alert_source_shortname")

    @alert_source_shortname.setter
    def alert_source_shortname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_source_shortname", value)

    @property
    @pulumi.getter(name="alertSourceVersion")
    def alert_source_version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the linked alert source.
        """
        return pulumi.get(self, "alert_source_version")

    @alert_source_version.setter
    def alert_source_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_source_version", value)

    @property
    @pulumi.getter(name="gerId")
    def ger_id(self) -> Optional[pulumi.Input[str]]:
        """
        GER id.
        """
        return pulumi.get(self, "ger_id")

    @ger_id.setter
    def ger_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ger_id", value)

    @property
    @pulumi.getter
    def orderings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        GER Ruleset Rule Ordering.
        """
        return pulumi.get(self, "orderings")

    @orderings.setter
    def orderings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "orderings", value)


class GerRulesetRulesOrdering(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_source: Optional[pulumi.Input[str]] = None,
                 ger_id: Optional[pulumi.Input[str]] = None,
                 orderings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        The ordering of rules within a Ruleset dictates the sequence in which rules are evaluated for an alert source. These rules are evaluated sequentially, starting from the top.

        ## Example Usage

        ```python
        import pulumi
        import irisdanded_squadcast_pulumi as squadcast
        import pulumi_squadcast as squadcast

        example_team = squadcast.get_team(name="Example Team")
        example_user = squadcast.get_user(email="john@example.com")
        example_service = squadcast.get_service(name="Example Service",
            team_id=example_team.id)
        example_ger = squadcast.Ger("exampleGer",
            description="Example GER Description",
            team_id=example_team.id,
            entity_owner=squadcast.GerEntityOwnerArgs(
                id=example_user.id,
                type="user",
            ))
        example_ger_ruleset = squadcast.GerRuleset("exampleGerRuleset",
            ger_id=example_ger.id,
            alert_source="Prometheus",
            catch_all_action={
                "route_to": example_service.id,
            })
        example_ger_ruleset_rule1 = squadcast.GerRulesetRule("exampleGerRulesetRule1",
            ger_id=example_ger.id,
            alert_source=example_ger_ruleset.alert_source,
            expression="alertname == \\"DeploymentReplicasNotUpdated\\"",
            description="Example GER Ruleset Rule",
            action={
                "route_to": example_service.id,
            })
        example_ger_ruleset_rule2 = squadcast.GerRulesetRule("exampleGerRulesetRule2",
            ger_id=example_ger.id,
            alert_source=example_ger_ruleset.alert_source,
            expression="component == \\"kube-state-metrics\\"",
            description="Example GER Ruleset Rule",
            action={
                "route_to": example_service.id,
            })
        rule_ordering = squadcast.GerRulesetRulesOrdering("ruleOrdering",
            ger_id=squadcast_ger["ger"]["id"],
            alert_source=squadcast_ger_ruleset["ger_ruleset_1"]["alert_source"],
            orderings=[
                squadcast_ger_ruleset_rule["ger_ruleset_rule_2"]["id"],
                squadcast_ger_ruleset_rule["ger_ruleset_rule_1"]["id"],
            ])
        ```

        ## Import

        gerID:alertSourceName

        ```sh
        $ pulumi import squadcast:index/gerRulesetRulesOrdering:GerRulesetRulesOrdering example_ger_ruleset_rule_ordering_import "53:Grafana"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alert_source: An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        :param pulumi.Input[str] ger_id: GER id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] orderings: GER Ruleset Rule Ordering.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GerRulesetRulesOrderingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The ordering of rules within a Ruleset dictates the sequence in which rules are evaluated for an alert source. These rules are evaluated sequentially, starting from the top.

        ## Example Usage

        ```python
        import pulumi
        import irisdanded_squadcast_pulumi as squadcast
        import pulumi_squadcast as squadcast

        example_team = squadcast.get_team(name="Example Team")
        example_user = squadcast.get_user(email="john@example.com")
        example_service = squadcast.get_service(name="Example Service",
            team_id=example_team.id)
        example_ger = squadcast.Ger("exampleGer",
            description="Example GER Description",
            team_id=example_team.id,
            entity_owner=squadcast.GerEntityOwnerArgs(
                id=example_user.id,
                type="user",
            ))
        example_ger_ruleset = squadcast.GerRuleset("exampleGerRuleset",
            ger_id=example_ger.id,
            alert_source="Prometheus",
            catch_all_action={
                "route_to": example_service.id,
            })
        example_ger_ruleset_rule1 = squadcast.GerRulesetRule("exampleGerRulesetRule1",
            ger_id=example_ger.id,
            alert_source=example_ger_ruleset.alert_source,
            expression="alertname == \\"DeploymentReplicasNotUpdated\\"",
            description="Example GER Ruleset Rule",
            action={
                "route_to": example_service.id,
            })
        example_ger_ruleset_rule2 = squadcast.GerRulesetRule("exampleGerRulesetRule2",
            ger_id=example_ger.id,
            alert_source=example_ger_ruleset.alert_source,
            expression="component == \\"kube-state-metrics\\"",
            description="Example GER Ruleset Rule",
            action={
                "route_to": example_service.id,
            })
        rule_ordering = squadcast.GerRulesetRulesOrdering("ruleOrdering",
            ger_id=squadcast_ger["ger"]["id"],
            alert_source=squadcast_ger_ruleset["ger_ruleset_1"]["alert_source"],
            orderings=[
                squadcast_ger_ruleset_rule["ger_ruleset_rule_2"]["id"],
                squadcast_ger_ruleset_rule["ger_ruleset_rule_1"]["id"],
            ])
        ```

        ## Import

        gerID:alertSourceName

        ```sh
        $ pulumi import squadcast:index/gerRulesetRulesOrdering:GerRulesetRulesOrdering example_ger_ruleset_rule_ordering_import "53:Grafana"
        ```

        :param str resource_name: The name of the resource.
        :param GerRulesetRulesOrderingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GerRulesetRulesOrderingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_source: Optional[pulumi.Input[str]] = None,
                 ger_id: Optional[pulumi.Input[str]] = None,
                 orderings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GerRulesetRulesOrderingArgs.__new__(GerRulesetRulesOrderingArgs)

            if alert_source is None and not opts.urn:
                raise TypeError("Missing required property 'alert_source'")
            __props__.__dict__["alert_source"] = alert_source
            if ger_id is None and not opts.urn:
                raise TypeError("Missing required property 'ger_id'")
            __props__.__dict__["ger_id"] = ger_id
            if orderings is None and not opts.urn:
                raise TypeError("Missing required property 'orderings'")
            __props__.__dict__["orderings"] = orderings
            __props__.__dict__["alert_source_shortname"] = None
            __props__.__dict__["alert_source_version"] = None
        super(GerRulesetRulesOrdering, __self__).__init__(
            'squadcast:index/gerRulesetRulesOrdering:GerRulesetRulesOrdering',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alert_source: Optional[pulumi.Input[str]] = None,
            alert_source_shortname: Optional[pulumi.Input[str]] = None,
            alert_source_version: Optional[pulumi.Input[str]] = None,
            ger_id: Optional[pulumi.Input[str]] = None,
            orderings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'GerRulesetRulesOrdering':
        """
        Get an existing GerRulesetRulesOrdering resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alert_source: An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        :param pulumi.Input[str] alert_source_shortname: Shortname of the linked alert source.
        :param pulumi.Input[str] alert_source_version: Version of the linked alert source.
        :param pulumi.Input[str] ger_id: GER id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] orderings: GER Ruleset Rule Ordering.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GerRulesetRulesOrderingState.__new__(_GerRulesetRulesOrderingState)

        __props__.__dict__["alert_source"] = alert_source
        __props__.__dict__["alert_source_shortname"] = alert_source_shortname
        __props__.__dict__["alert_source_version"] = alert_source_version
        __props__.__dict__["ger_id"] = ger_id
        __props__.__dict__["orderings"] = orderings
        return GerRulesetRulesOrdering(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alertSource")
    def alert_source(self) -> pulumi.Output[str]:
        """
        An alert source refers to the origin of an event (alert), such as a monitoring tool. These alert sources are associated with specific rules in GER, determining where events from each source should be routed. Find all alert sources supported on Squadcast [here](https://www.squadcast.com/integrations).
        """
        return pulumi.get(self, "alert_source")

    @property
    @pulumi.getter(name="alertSourceShortname")
    def alert_source_shortname(self) -> pulumi.Output[str]:
        """
        Shortname of the linked alert source.
        """
        return pulumi.get(self, "alert_source_shortname")

    @property
    @pulumi.getter(name="alertSourceVersion")
    def alert_source_version(self) -> pulumi.Output[str]:
        """
        Version of the linked alert source.
        """
        return pulumi.get(self, "alert_source_version")

    @property
    @pulumi.getter(name="gerId")
    def ger_id(self) -> pulumi.Output[str]:
        """
        GER id.
        """
        return pulumi.get(self, "ger_id")

    @property
    @pulumi.getter
    def orderings(self) -> pulumi.Output[Sequence[str]]:
        """
        GER Ruleset Rule Ordering.
        """
        return pulumi.get(self, "orderings")

