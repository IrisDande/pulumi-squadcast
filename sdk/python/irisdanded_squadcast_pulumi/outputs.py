# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GerEntityOwner',
    'RunbookEntityOwner',
    'RunbookStep',
    'ServiceMaintainer',
    'ServiceTag',
    'SloEntityOwner',
    'SloNotify',
    'SloRule',
    'WebformInputField',
    'WebformOwner',
    'WebformService',
    'WebformSeverity',
    'WorkflowEntityOwner',
    'WorkflowFilters',
    'WorkflowFiltersFilter',
    'WorkflowFiltersFilterFilter',
    'WorkflowTag',
    'GetRunbookEntityOwnerResult',
    'GetRunbookStepResult',
    'GetServiceMaintainerResult',
    'GetServiceTagResult',
    'GetTeamMemberResult',
    'GetTeamRoleResult',
    'GetUserNotificationRuleResult',
    'GetUserOncallReminderRuleResult',
    'GetWebformInputFieldResult',
    'GetWebformOwnerResult',
    'GetWebformServiceResult',
    'GetWebformSeverityResult',
]

@pulumi.output_type
class GerEntityOwner(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: GER owner id.
        :param str type: GER owner type. Supported values are 'user' or 'squad'.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        GER owner id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        GER owner type. Supported values are 'user' or 'squad'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RunbookEntityOwner(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: Runbook owner id.
        :param str type: Runbook owner type. Supported values are 'user' or 'squad'.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Runbook owner id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Runbook owner type. Supported values are 'user' or 'squad'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class RunbookStep(dict):
    def __init__(__self__, *,
                 content: str):
        pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")


@pulumi.output_type
class ServiceMaintainer(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: The id of the maintainer.
        :param str type: The type of the maintainer. Supported values are 'user' or 'squad'.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the maintainer.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the maintainer. Supported values are 'user' or 'squad'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: key
        :param str value: value
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SloEntityOwner(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: SLO owner id.
        :param str type: SLO owner type. Supported values are 'user' or 'squad'.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        SLO owner id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        SLO owner type. Supported values are 'user' or 'squad'.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SloNotify(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceId":
            suggest = "service_id"
        elif key == "sloId":
            suggest = "slo_id"
        elif key == "squadIds":
            suggest = "squad_ids"
        elif key == "userIds":
            suggest = "user_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SloNotify. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SloNotify.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SloNotify.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 service_id: Optional[str] = None,
                 slo_id: Optional[int] = None,
                 squad_ids: Optional[Sequence[str]] = None,
                 user_ids: Optional[Sequence[str]] = None):
        """
        :param int id: The ID of the notification rule
        :param str service_id: The ID of the service in which the user want to create an incident
        :param int slo_id: The ID of the SLO.
        :param Sequence[str] squad_ids: List of Squad ID's who should be alerted via email.
        :param Sequence[str] user_ids: List of user ID's who should be alerted via email.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if slo_id is not None:
            pulumi.set(__self__, "slo_id", slo_id)
        if squad_ids is not None:
            pulumi.set(__self__, "squad_ids", squad_ids)
        if user_ids is not None:
            pulumi.set(__self__, "user_ids", user_ids)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of the notification rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[str]:
        """
        The ID of the service in which the user want to create an incident
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> Optional[int]:
        """
        The ID of the SLO.
        """
        return pulumi.get(self, "slo_id")

    @property
    @pulumi.getter(name="squadIds")
    def squad_ids(self) -> Optional[Sequence[str]]:
        """
        List of Squad ID's who should be alerted via email.
        """
        return pulumi.get(self, "squad_ids")

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Optional[Sequence[str]]:
        """
        List of user ID's who should be alerted via email.
        """
        return pulumi.get(self, "user_ids")


@pulumi.output_type
class SloRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isChecked":
            suggest = "is_checked"
        elif key == "sloId":
            suggest = "slo_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SloRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SloRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SloRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 id: Optional[int] = None,
                 is_checked: Optional[bool] = None,
                 slo_id: Optional[int] = None,
                 threshold: Optional[int] = None):
        """
        :param str name: The name of monitoring check."Supported values are "breached*error*budget", "unhealthy*slo","increased*false*positives", "remaining*error_budget"
        :param int id: The ID of the monitoring rule
        :param bool is_checked: Is checked?
        :param int slo_id: The ID of the SLO
        :param int threshold: Threshold for the monitoring checkOnly supported for rules name "increased*false*positives" and "remaining*error*budget"
        """
        pulumi.set(__self__, "name", name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_checked is not None:
            pulumi.set(__self__, "is_checked", is_checked)
        if slo_id is not None:
            pulumi.set(__self__, "slo_id", slo_id)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of monitoring check."Supported values are "breached*error*budget", "unhealthy*slo","increased*false*positives", "remaining*error_budget"
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of the monitoring rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isChecked")
    def is_checked(self) -> Optional[bool]:
        """
        Is checked?
        """
        return pulumi.get(self, "is_checked")

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> Optional[int]:
        """
        The ID of the SLO
        """
        return pulumi.get(self, "slo_id")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[int]:
        """
        Threshold for the monitoring checkOnly supported for rules name "increased*false*positives" and "remaining*error*budget"
        """
        return pulumi.get(self, "threshold")


@pulumi.output_type
class WebformInputField(dict):
    def __init__(__self__, *,
                 label: Optional[str] = None,
                 options: Optional[Sequence[str]] = None):
        """
        :param str label: Input field Label.
        :param Sequence[str] options: Input field options.
        """
        if label is not None:
            pulumi.set(__self__, "label", label)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def label(self) -> Optional[str]:
        """
        Input field Label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence[str]]:
        """
        Input field options.
        """
        return pulumi.get(self, "options")


@pulumi.output_type
class WebformOwner(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str,
                 name: Optional[str] = None):
        """
        :param str id: Form owner id.
        :param str type: Form owner type Supported values are 'user' or 'squad'.
        :param str name: Form owner name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Form owner id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Form owner type Supported values are 'user' or 'squad'.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Form owner name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class WebformService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceId":
            suggest = "service_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebformService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebformService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebformService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_id: str,
                 alias: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str service_id: Service ID.
        :param str alias: Service alias.
        :param str name: Service name.
        """
        pulumi.set(__self__, "service_id", service_id)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        Service ID.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        """
        Service alias.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Service name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class WebformSeverity(dict):
    def __init__(__self__, *,
                 type: str,
                 description: Optional[str] = None):
        """
        :param str type: Severity type.
        :param str description: Severity description.
        """
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Severity type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Severity description.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class WorkflowEntityOwner(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkflowFilters(dict):
    def __init__(__self__, *,
                 condition: str,
                 filters: Optional[Sequence['outputs.WorkflowFiltersFilter']] = None):
        """
        :param str condition: Condition to be applied on the filters (and / or)
        """
        pulumi.set(__self__, "condition", condition)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def condition(self) -> str:
        """
        Condition to be applied on the filters (and / or)
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.WorkflowFiltersFilter']]:
        return pulumi.get(self, "filters")


@pulumi.output_type
class WorkflowFiltersFilter(dict):
    def __init__(__self__, *,
                 condition: Optional[str] = None,
                 filters: Optional[Sequence['outputs.WorkflowFiltersFilterFilter']] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str condition: Condition to be applied on the filters (and / or)
        """
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[str]:
        """
        Condition to be applied on the filters (and / or)
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.WorkflowFiltersFilterFilter']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WorkflowFiltersFilterFilter(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class WorkflowTag(dict):
    def __init__(__self__, *,
                 color: str,
                 key: str,
                 value: str):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRunbookEntityOwnerResult(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: Runbook owner id.
        :param str type: Runbook owner type. (user or squad or team)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Runbook owner id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Runbook owner type. (user or squad or team)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRunbookStepResult(dict):
    def __init__(__self__, *,
                 content: str):
        pulumi.set(__self__, "content", content)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")


@pulumi.output_type
class GetServiceMaintainerResult(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        """
        :param str id: The id of the maintainer.
        :param str type: The type of the maintainer. (user, team or squad)
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The id of the maintainer.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the maintainer. (user, team or squad)
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetServiceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: key
        :param str value: value
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTeamMemberResult(dict):
    def __init__(__self__, *,
                 role_ids: Sequence[str],
                 user_id: str):
        """
        :param str user_id: User id.
        """
        pulumi.set(__self__, "role_ids", role_ids)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="roleIds")
    def role_ids(self) -> Sequence[str]:
        return pulumi.get(self, "role_ids")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        """
        User id.
        """
        return pulumi.get(self, "user_id")


@pulumi.output_type
class GetTeamRoleResult(dict):
    def __init__(__self__, *,
                 abilities: Sequence[str],
                 default: bool,
                 id: str,
                 name: str):
        """
        :param bool default: Role is default.
        :param str id: Role id.
        :param str name: Role name.
        """
        pulumi.set(__self__, "abilities", abilities)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def abilities(self) -> Sequence[str]:
        return pulumi.get(self, "abilities")

    @property
    @pulumi.getter
    def default(self) -> bool:
        """
        Role is default.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Role id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Role name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserNotificationRuleResult(dict):
    def __init__(__self__, *,
                 delay_minutes: int,
                 type: str):
        """
        :param int delay_minutes: notification rule delay_minutes, (to be deprecated).
        :param str type: Personal notification rule type.
        """
        pulumi.set(__self__, "delay_minutes", delay_minutes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="delayMinutes")
    def delay_minutes(self) -> int:
        """
        notification rule delay_minutes, (to be deprecated).
        """
        return pulumi.get(self, "delay_minutes")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Personal notification rule type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserOncallReminderRuleResult(dict):
    def __init__(__self__, *,
                 delay_minutes: int,
                 type: str):
        """
        :param int delay_minutes: oncall reminder rule delay_minutes.
        :param str type: oncall reminder rule type.
        """
        pulumi.set(__self__, "delay_minutes", delay_minutes)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="delayMinutes")
    def delay_minutes(self) -> int:
        """
        oncall reminder rule delay_minutes.
        """
        return pulumi.get(self, "delay_minutes")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        oncall reminder rule type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebformInputFieldResult(dict):
    def __init__(__self__, *,
                 label: str,
                 options: Sequence[str]):
        """
        :param str label: Input field Label.
        :param Sequence[str] options: Input field options.
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        Input field Label.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def options(self) -> Sequence[str]:
        """
        Input field options.
        """
        return pulumi.get(self, "options")


@pulumi.output_type
class GetWebformOwnerResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 type: str):
        """
        :param str id: Form owner id.
        :param str name: Form owner name.
        :param str type: Form owner type (user, team, squad).
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Form owner id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Form owner name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Form owner type (user, team, squad).
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetWebformServiceResult(dict):
    def __init__(__self__, *,
                 alias: str,
                 name: str,
                 service_id: str):
        """
        :param str alias: Service alias.
        :param str name: Service name.
        :param str service_id: Service ID.
        """
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter
    def alias(self) -> str:
        """
        Service alias.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        Service ID.
        """
        return pulumi.get(self, "service_id")


@pulumi.output_type
class GetWebformSeverityResult(dict):
    def __init__(__self__, *,
                 description: str,
                 type: str):
        """
        :param str description: Severity description.
        :param str type: Severity type.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Severity description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Severity type.
        """
        return pulumi.get(self, "type")


