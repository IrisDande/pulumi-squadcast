# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RoutingRuleV2Args', 'RoutingRuleV2']

@pulumi.input_type
class RoutingRuleV2Args:
    def __init__(__self__, *,
                 is_basic: pulumi.Input[bool],
                 route_to_id: pulumi.Input[str],
                 route_to_type: pulumi.Input[str],
                 service_id: pulumi.Input[str],
                 basic_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingRuleV2BasicExpressionArgs']]]] = None,
                 expression: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RoutingRuleV2 resource.
        :param pulumi.Input[bool] is_basic: is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        :param pulumi.Input[str] route_to_id: The id of the entity (user, escalation policy, squad) for which we are routing this incident.
        :param pulumi.Input[str] route_to_type: Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
        :param pulumi.Input[str] service_id: Service id.
        :param pulumi.Input[Sequence[pulumi.Input['RoutingRuleV2BasicExpressionArgs']]] basic_expressions: The basic expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[str] expression: The expression which needs to be evaluated to be true for this rule to apply.
        """
        pulumi.set(__self__, "is_basic", is_basic)
        pulumi.set(__self__, "route_to_id", route_to_id)
        pulumi.set(__self__, "route_to_type", route_to_type)
        pulumi.set(__self__, "service_id", service_id)
        if basic_expressions is not None:
            pulumi.set(__self__, "basic_expressions", basic_expressions)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="isBasic")
    def is_basic(self) -> pulumi.Input[bool]:
        """
        is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        """
        return pulumi.get(self, "is_basic")

    @is_basic.setter
    def is_basic(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_basic", value)

    @property
    @pulumi.getter(name="routeToId")
    def route_to_id(self) -> pulumi.Input[str]:
        """
        The id of the entity (user, escalation policy, squad) for which we are routing this incident.
        """
        return pulumi.get(self, "route_to_id")

    @route_to_id.setter
    def route_to_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_to_id", value)

    @property
    @pulumi.getter(name="routeToType")
    def route_to_type(self) -> pulumi.Input[str]:
        """
        Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
        """
        return pulumi.get(self, "route_to_type")

    @route_to_type.setter
    def route_to_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_to_type", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        Service id.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="basicExpressions")
    def basic_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoutingRuleV2BasicExpressionArgs']]]]:
        """
        The basic expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "basic_expressions")

    @basic_expressions.setter
    def basic_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingRuleV2BasicExpressionArgs']]]]):
        pulumi.set(self, "basic_expressions", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        The expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)


@pulumi.input_type
class _RoutingRuleV2State:
    def __init__(__self__, *,
                 basic_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingRuleV2BasicExpressionArgs']]]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 is_basic: Optional[pulumi.Input[bool]] = None,
                 route_to_id: Optional[pulumi.Input[str]] = None,
                 route_to_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RoutingRuleV2 resources.
        :param pulumi.Input[Sequence[pulumi.Input['RoutingRuleV2BasicExpressionArgs']]] basic_expressions: The basic expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[str] expression: The expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[bool] is_basic: is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        :param pulumi.Input[str] route_to_id: The id of the entity (user, escalation policy, squad) for which we are routing this incident.
        :param pulumi.Input[str] route_to_type: Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
        :param pulumi.Input[str] service_id: Service id.
        """
        if basic_expressions is not None:
            pulumi.set(__self__, "basic_expressions", basic_expressions)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if is_basic is not None:
            pulumi.set(__self__, "is_basic", is_basic)
        if route_to_id is not None:
            pulumi.set(__self__, "route_to_id", route_to_id)
        if route_to_type is not None:
            pulumi.set(__self__, "route_to_type", route_to_type)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="basicExpressions")
    def basic_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoutingRuleV2BasicExpressionArgs']]]]:
        """
        The basic expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "basic_expressions")

    @basic_expressions.setter
    def basic_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoutingRuleV2BasicExpressionArgs']]]]):
        pulumi.set(self, "basic_expressions", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        The expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="isBasic")
    def is_basic(self) -> Optional[pulumi.Input[bool]]:
        """
        is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        """
        return pulumi.get(self, "is_basic")

    @is_basic.setter
    def is_basic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_basic", value)

    @property
    @pulumi.getter(name="routeToId")
    def route_to_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the entity (user, escalation policy, squad) for which we are routing this incident.
        """
        return pulumi.get(self, "route_to_id")

    @route_to_id.setter
    def route_to_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_to_id", value)

    @property
    @pulumi.getter(name="routeToType")
    def route_to_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
        """
        return pulumi.get(self, "route_to_type")

    @route_to_type.setter
    def route_to_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_to_type", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        Service id.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)


class RoutingRuleV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 basic_expressions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoutingRuleV2BasicExpressionArgs']]]]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 is_basic: Optional[pulumi.Input[bool]] = None,
                 route_to_id: Optional[pulumi.Input[str]] = None,
                 route_to_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        [Routing rules](https://support.squadcast.com/docs/alert-routing) allows you to ensure that alerts are routed to the right responder with the help of `event tags` attached to them.

        ## Example Usage

        ```python
        import pulumi
        import irisdanded_squadcast_pulumi as squadcast
        import pulumi_squadcast as squadcast

        example_team = squadcast.get_team(name="example team name")
        example_user = squadcast.get_user(email="test@example.com")
        example_service = squadcast.get_service(name="example service name",
            team_id=example_team.id)
        example_escalaion_policy = squadcast.get_escalation_policy(name="example escalation policy name",
            team_id=example_team.id)
        example_squad = squadcast.get_squad(name="example squad name",
            team_id=example_team.id)
        example_routing_rules = squadcast.RoutingRuleV2("exampleRoutingRules",
            service_id=example_service.id,
            is_basic=False,
            expression="payload[\\"event_id\\"] == 40",
            route_to_id=example_user.id,
            route_to_type="user")
        example_routing_rules_basic = squadcast.RoutingRuleV2("exampleRoutingRulesBasic",
            service_id=example_service.id,
            is_basic=True,
            basic_expressions=[squadcast.RoutingRuleV2BasicExpressionArgs(
                lhs="payload[\\"foo\\"]",
                rhs="bar",
            )],
            route_to_id=data["squadcast_user"]["example_escalaion_policy"]["id"],
            route_to_type="escalationpolicy")
        ```

        ## Import

        serviceID:ruleID

        ```sh
        $ pulumi import squadcast:index/routingRuleV2:RoutingRuleV2 test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoutingRuleV2BasicExpressionArgs']]]] basic_expressions: The basic expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[str] expression: The expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[bool] is_basic: is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        :param pulumi.Input[str] route_to_id: The id of the entity (user, escalation policy, squad) for which we are routing this incident.
        :param pulumi.Input[str] route_to_type: Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
        :param pulumi.Input[str] service_id: Service id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RoutingRuleV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        [Routing rules](https://support.squadcast.com/docs/alert-routing) allows you to ensure that alerts are routed to the right responder with the help of `event tags` attached to them.

        ## Example Usage

        ```python
        import pulumi
        import irisdanded_squadcast_pulumi as squadcast
        import pulumi_squadcast as squadcast

        example_team = squadcast.get_team(name="example team name")
        example_user = squadcast.get_user(email="test@example.com")
        example_service = squadcast.get_service(name="example service name",
            team_id=example_team.id)
        example_escalaion_policy = squadcast.get_escalation_policy(name="example escalation policy name",
            team_id=example_team.id)
        example_squad = squadcast.get_squad(name="example squad name",
            team_id=example_team.id)
        example_routing_rules = squadcast.RoutingRuleV2("exampleRoutingRules",
            service_id=example_service.id,
            is_basic=False,
            expression="payload[\\"event_id\\"] == 40",
            route_to_id=example_user.id,
            route_to_type="user")
        example_routing_rules_basic = squadcast.RoutingRuleV2("exampleRoutingRulesBasic",
            service_id=example_service.id,
            is_basic=True,
            basic_expressions=[squadcast.RoutingRuleV2BasicExpressionArgs(
                lhs="payload[\\"foo\\"]",
                rhs="bar",
            )],
            route_to_id=data["squadcast_user"]["example_escalaion_policy"]["id"],
            route_to_type="escalationpolicy")
        ```

        ## Import

        serviceID:ruleID

        ```sh
        $ pulumi import squadcast:index/routingRuleV2:RoutingRuleV2 test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
        ```

        :param str resource_name: The name of the resource.
        :param RoutingRuleV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RoutingRuleV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 basic_expressions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoutingRuleV2BasicExpressionArgs']]]]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 is_basic: Optional[pulumi.Input[bool]] = None,
                 route_to_id: Optional[pulumi.Input[str]] = None,
                 route_to_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RoutingRuleV2Args.__new__(RoutingRuleV2Args)

            __props__.__dict__["basic_expressions"] = basic_expressions
            __props__.__dict__["expression"] = expression
            if is_basic is None and not opts.urn:
                raise TypeError("Missing required property 'is_basic'")
            __props__.__dict__["is_basic"] = is_basic
            if route_to_id is None and not opts.urn:
                raise TypeError("Missing required property 'route_to_id'")
            __props__.__dict__["route_to_id"] = route_to_id
            if route_to_type is None and not opts.urn:
                raise TypeError("Missing required property 'route_to_type'")
            __props__.__dict__["route_to_type"] = route_to_type
            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
        super(RoutingRuleV2, __self__).__init__(
            'squadcast:index/routingRuleV2:RoutingRuleV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            basic_expressions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoutingRuleV2BasicExpressionArgs']]]]] = None,
            expression: Optional[pulumi.Input[str]] = None,
            is_basic: Optional[pulumi.Input[bool]] = None,
            route_to_id: Optional[pulumi.Input[str]] = None,
            route_to_type: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None) -> 'RoutingRuleV2':
        """
        Get an existing RoutingRuleV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoutingRuleV2BasicExpressionArgs']]]] basic_expressions: The basic expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[str] expression: The expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[bool] is_basic: is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        :param pulumi.Input[str] route_to_id: The id of the entity (user, escalation policy, squad) for which we are routing this incident.
        :param pulumi.Input[str] route_to_type: Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
        :param pulumi.Input[str] service_id: Service id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RoutingRuleV2State.__new__(_RoutingRuleV2State)

        __props__.__dict__["basic_expressions"] = basic_expressions
        __props__.__dict__["expression"] = expression
        __props__.__dict__["is_basic"] = is_basic
        __props__.__dict__["route_to_id"] = route_to_id
        __props__.__dict__["route_to_type"] = route_to_type
        __props__.__dict__["service_id"] = service_id
        return RoutingRuleV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="basicExpressions")
    def basic_expressions(self) -> pulumi.Output[Optional[Sequence['outputs.RoutingRuleV2BasicExpression']]]:
        """
        The basic expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "basic_expressions")

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Output[Optional[str]]:
        """
        The expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="isBasic")
    def is_basic(self) -> pulumi.Output[bool]:
        """
        is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        """
        return pulumi.get(self, "is_basic")

    @property
    @pulumi.getter(name="routeToId")
    def route_to_id(self) -> pulumi.Output[str]:
        """
        The id of the entity (user, escalation policy, squad) for which we are routing this incident.
        """
        return pulumi.get(self, "route_to_id")

    @property
    @pulumi.getter(name="routeToType")
    def route_to_type(self) -> pulumi.Output[str]:
        """
        Type of the entity for which we are routing this incident (user, escalationpolicy or squad)
        """
        return pulumi.get(self, "route_to_type")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        Service id.
        """
        return pulumi.get(self, "service_id")

