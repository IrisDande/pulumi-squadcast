# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'V2ParticipantGroupArgs',
    'V2ParticipantGroupParticipantArgs',
    'V2ShiftTimeslotArgs',
]

@pulumi.input_type
class V2ParticipantGroupArgs:
    def __init__(__self__, *,
                 participants: Optional[pulumi.Input[Sequence[pulumi.Input['V2ParticipantGroupParticipantArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['V2ParticipantGroupParticipantArgs']]] participants: Group participants.
        """
        if participants is not None:
            pulumi.set(__self__, "participants", participants)

    @property
    @pulumi.getter
    def participants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2ParticipantGroupParticipantArgs']]]]:
        """
        Group participants.
        """
        return pulumi.get(self, "participants")

    @participants.setter
    def participants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2ParticipantGroupParticipantArgs']]]]):
        pulumi.set(self, "participants", value)


@pulumi.input_type
class V2ParticipantGroupParticipantArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: Participant id.
        :param pulumi.Input[str] type: Participant type (user, team, squad).
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Participant id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Participant type (user, team, squad).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class V2ShiftTimeslotArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 start_hour: pulumi.Input[int],
                 start_minute: pulumi.Input[int],
                 day_of_week: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] duration: Defines the duration of each shift. (in minutes)
        :param pulumi.Input[int] start_hour: Defines the start hour of the each shift in the schedule timezone.
        :param pulumi.Input[int] start_minute: Defines the start minute of the each shift in the schedule timezone.
        :param pulumi.Input[str] day_of_week: Defines the day of the week for the shift. If not specified, the timeslot is active on all days of the week.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "start_hour", start_hour)
        pulumi.set(__self__, "start_minute", start_minute)
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        """
        Defines the duration of each shift. (in minutes)
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="startHour")
    def start_hour(self) -> pulumi.Input[int]:
        """
        Defines the start hour of the each shift in the schedule timezone.
        """
        return pulumi.get(self, "start_hour")

    @start_hour.setter
    def start_hour(self, value: pulumi.Input[int]):
        pulumi.set(self, "start_hour", value)

    @property
    @pulumi.getter(name="startMinute")
    def start_minute(self) -> pulumi.Input[int]:
        """
        Defines the start minute of the each shift in the schedule timezone.
        """
        return pulumi.get(self, "start_minute")

    @start_minute.setter
    def start_minute(self, value: pulumi.Input[int]):
        pulumi.set(self, "start_minute", value)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the day of the week for the shift. If not specified, the timeslot is active on all days of the week.
        """
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_week", value)


