# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ._inputs import *

__all__ = ['V2Args', 'V2']

@pulumi.input_type
class V2Args:
    def __init__(__self__, *,
                 is_basic: pulumi.Input[bool],
                 service_id: pulumi.Input[str],
                 basic_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['V2BasicExpressionArgs']]]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['V2TagArgs']]]] = None):
        """
        The set of arguments for constructing a V2 resource.
        :param pulumi.Input[bool] is_basic: is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        :param pulumi.Input[str] service_id: Service id.
        :param pulumi.Input[Sequence[pulumi.Input['V2BasicExpressionArgs']]] basic_expressions: The basic expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[str] expression: The expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[Sequence[pulumi.Input['V2TagArgs']]] tags: The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
        """
        pulumi.set(__self__, "is_basic", is_basic)
        pulumi.set(__self__, "service_id", service_id)
        if basic_expressions is not None:
            pulumi.set(__self__, "basic_expressions", basic_expressions)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="isBasic")
    def is_basic(self) -> pulumi.Input[bool]:
        """
        is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        """
        return pulumi.get(self, "is_basic")

    @is_basic.setter
    def is_basic(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_basic", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        Service id.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="basicExpressions")
    def basic_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2BasicExpressionArgs']]]]:
        """
        The basic expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "basic_expressions")

    @basic_expressions.setter
    def basic_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2BasicExpressionArgs']]]]):
        pulumi.set(self, "basic_expressions", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        The expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2TagArgs']]]]:
        """
        The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _V2State:
    def __init__(__self__, *,
                 basic_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['V2BasicExpressionArgs']]]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 is_basic: Optional[pulumi.Input[bool]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['V2TagArgs']]]] = None):
        """
        Input properties used for looking up and filtering V2 resources.
        :param pulumi.Input[Sequence[pulumi.Input['V2BasicExpressionArgs']]] basic_expressions: The basic expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[str] expression: The expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[bool] is_basic: is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        :param pulumi.Input[str] service_id: Service id.
        :param pulumi.Input[Sequence[pulumi.Input['V2TagArgs']]] tags: The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
        """
        if basic_expressions is not None:
            pulumi.set(__self__, "basic_expressions", basic_expressions)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if is_basic is not None:
            pulumi.set(__self__, "is_basic", is_basic)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="basicExpressions")
    def basic_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2BasicExpressionArgs']]]]:
        """
        The basic expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "basic_expressions")

    @basic_expressions.setter
    def basic_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2BasicExpressionArgs']]]]):
        pulumi.set(self, "basic_expressions", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        The expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="isBasic")
    def is_basic(self) -> Optional[pulumi.Input[bool]]:
        """
        is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        """
        return pulumi.get(self, "is_basic")

    @is_basic.setter
    def is_basic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_basic", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        Service id.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['V2TagArgs']]]]:
        """
        The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['V2TagArgs']]]]):
        pulumi.set(self, "tags", value)


class V2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 basic_expressions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['V2BasicExpressionArgs']]]]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 is_basic: Optional[pulumi.Input[bool]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['V2TagArgs']]]]] = None,
                 __props__=None):
        """
        [Tagging](https://support.squadcast.com/docs/event-tagging) is a rule-based, auto-tagging system with which you can define customised tags based on incident payloads, that get automatically assigned to incidents when they are triggered.

        ## Example Usage

        ```python
        import pulumi
        import irisdanded_squadcast_pulumi as squadcast
        import pulumi_squadcast as squadcast

        example_service = squadcast.get_service(name="example service name",
            team_id=data["squadcast_team"]["example_team"]["id"])
        example_tagging_rule = squadcast.tagging.rule.V2("exampleTaggingRule",
            service_id=example_service.id,
            is_basic=False,
            expression="payload[\\"event_id\\"] == 40",
            tags=[
                squadcast.tagging.rule.V2TagArgs(
                    key="MyTag",
                    value="foo",
                    color="#ababab",
                ),
                squadcast.tagging.rule.V2TagArgs(
                    key="MyTag2",
                    value="bar",
                    color="#f0f0f0",
                ),
            ])
        example_basic_tagging_rule = squadcast.tagging.rule.V2("exampleBasicTaggingRule",
            service_id=example_service.id,
            is_basic=True,
            basic_expressions=[squadcast.tagging.rule.V2BasicExpressionArgs(
                lhs="payload[\\"foo\\"]",
                op="is",
                rhs="bar",
            )],
            tags=[squadcast.tagging.rule.V2TagArgs(
                key="MyTag",
                value="foo",
                color="#ababab",
            )])
        # addTags must be set in expression when tags are not passed
        example_tagging_rules_resource_withouttags = squadcast.tagging.rule.V2("exampleTaggingRulesResourceWithouttags",
            service_id=example_service.id,
            is_basic=False,
            expression="addTag(\\"EventType\\", payload.details.event_type_key, \\"#037916\\")")
        ```

        ## Import

        serviceID:ruleID

        ```sh
        $ pulumi import squadcast:tagging/rule/v2:V2 test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['V2BasicExpressionArgs']]]] basic_expressions: The basic expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[str] expression: The expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[bool] is_basic: is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        :param pulumi.Input[str] service_id: Service id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['V2TagArgs']]]] tags: The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: V2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        [Tagging](https://support.squadcast.com/docs/event-tagging) is a rule-based, auto-tagging system with which you can define customised tags based on incident payloads, that get automatically assigned to incidents when they are triggered.

        ## Example Usage

        ```python
        import pulumi
        import irisdanded_squadcast_pulumi as squadcast
        import pulumi_squadcast as squadcast

        example_service = squadcast.get_service(name="example service name",
            team_id=data["squadcast_team"]["example_team"]["id"])
        example_tagging_rule = squadcast.tagging.rule.V2("exampleTaggingRule",
            service_id=example_service.id,
            is_basic=False,
            expression="payload[\\"event_id\\"] == 40",
            tags=[
                squadcast.tagging.rule.V2TagArgs(
                    key="MyTag",
                    value="foo",
                    color="#ababab",
                ),
                squadcast.tagging.rule.V2TagArgs(
                    key="MyTag2",
                    value="bar",
                    color="#f0f0f0",
                ),
            ])
        example_basic_tagging_rule = squadcast.tagging.rule.V2("exampleBasicTaggingRule",
            service_id=example_service.id,
            is_basic=True,
            basic_expressions=[squadcast.tagging.rule.V2BasicExpressionArgs(
                lhs="payload[\\"foo\\"]",
                op="is",
                rhs="bar",
            )],
            tags=[squadcast.tagging.rule.V2TagArgs(
                key="MyTag",
                value="foo",
                color="#ababab",
            )])
        # addTags must be set in expression when tags are not passed
        example_tagging_rules_resource_withouttags = squadcast.tagging.rule.V2("exampleTaggingRulesResourceWithouttags",
            service_id=example_service.id,
            is_basic=False,
            expression="addTag(\\"EventType\\", payload.details.event_type_key, \\"#037916\\")")
        ```

        ## Import

        serviceID:ruleID

        ```sh
        $ pulumi import squadcast:tagging/rule/v2:V2 test 62d2fe23a57381088224d726:62da76c088f407f9ca756ca5
        ```

        :param str resource_name: The name of the resource.
        :param V2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(V2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 basic_expressions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['V2BasicExpressionArgs']]]]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 is_basic: Optional[pulumi.Input[bool]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['V2TagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = V2Args.__new__(V2Args)

            __props__.__dict__["basic_expressions"] = basic_expressions
            __props__.__dict__["expression"] = expression
            if is_basic is None and not opts.urn:
                raise TypeError("Missing required property 'is_basic'")
            __props__.__dict__["is_basic"] = is_basic
            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
            __props__.__dict__["tags"] = tags
        super(V2, __self__).__init__(
            'squadcast:tagging/rule/v2:V2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            basic_expressions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['V2BasicExpressionArgs']]]]] = None,
            expression: Optional[pulumi.Input[str]] = None,
            is_basic: Optional[pulumi.Input[bool]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['V2TagArgs']]]]] = None) -> 'V2':
        """
        Get an existing V2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['V2BasicExpressionArgs']]]] basic_expressions: The basic expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[str] expression: The expression which needs to be evaluated to be true for this rule to apply.
        :param pulumi.Input[bool] is_basic: is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        :param pulumi.Input[str] service_id: Service id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['V2TagArgs']]]] tags: The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _V2State.__new__(_V2State)

        __props__.__dict__["basic_expressions"] = basic_expressions
        __props__.__dict__["expression"] = expression
        __props__.__dict__["is_basic"] = is_basic
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["tags"] = tags
        return V2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="basicExpressions")
    def basic_expressions(self) -> pulumi.Output[Optional[Sequence['outputs.V2BasicExpression']]]:
        """
        The basic expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "basic_expressions")

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Output[Optional[str]]:
        """
        The expression which needs to be evaluated to be true for this rule to apply.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="isBasic")
    def is_basic(self) -> pulumi.Output[bool]:
        """
        is_basic will be true when users use the drop down selectors which will have lhs, op & rhs value, whereas it will be false when they use the advanced mode and it would have the expression for it's value
        """
        return pulumi.get(self, "is_basic")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        Service id.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.V2Tag']]]:
        """
        The tags supposed to be set for a given payload(incident), Expression must be set when tags are empty and must contain addTags parameters.
        """
        return pulumi.get(self, "tags")

