# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ActionChannelArgs',
    'ActionComponentAndImpactArgs',
    'ActionHeaderArgs',
    'ActionStatusAndMessageArgs',
]

@pulumi.input_type
class ActionChannelArgs:
    def __init__(__self__, *,
                 display_text: pulumi.Input[str],
                 link: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] display_text: The display text of the communication channel
        :param pulumi.Input[str] link: The link of the communication channel
        :param pulumi.Input[str] type: The type of the communication channel
        """
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "link", link)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> pulumi.Input[str]:
        """
        The display text of the communication channel
        """
        return pulumi.get(self, "display_text")

    @display_text.setter
    def display_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_text", value)

    @property
    @pulumi.getter
    def link(self) -> pulumi.Input[str]:
        """
        The link of the communication channel
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: pulumi.Input[str]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the communication channel
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ActionComponentAndImpactArgs:
    def __init__(__self__, *,
                 component_id: pulumi.Input[int],
                 impact_status_id: pulumi.Input[int]):
        """
        :param pulumi.Input[int] component_id: The ID of the component
        :param pulumi.Input[int] impact_status_id: The ID of the impact status
        """
        pulumi.set(__self__, "component_id", component_id)
        pulumi.set(__self__, "impact_status_id", impact_status_id)

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> pulumi.Input[int]:
        """
        The ID of the component
        """
        return pulumi.get(self, "component_id")

    @component_id.setter
    def component_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "component_id", value)

    @property
    @pulumi.getter(name="impactStatusId")
    def impact_status_id(self) -> pulumi.Input[int]:
        """
        The ID of the impact status
        """
        return pulumi.get(self, "impact_status_id")

    @impact_status_id.setter
    def impact_status_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "impact_status_id", value)


@pulumi.input_type
class ActionHeaderArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The key of the header
        :param pulumi.Input[str] value: The value of the header
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the header
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the header
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ActionStatusAndMessageArgs:
    def __init__(__self__, *,
                 status_id: pulumi.Input[int],
                 messages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] status_id: The ID of the status
        :param pulumi.Input[Sequence[pulumi.Input[str]]] messages: The messages to be set for the issue
        """
        pulumi.set(__self__, "status_id", status_id)
        if messages is not None:
            pulumi.set(__self__, "messages", messages)

    @property
    @pulumi.getter(name="statusId")
    def status_id(self) -> pulumi.Input[int]:
        """
        The ID of the status
        """
        return pulumi.get(self, "status_id")

    @status_id.setter
    def status_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "status_id", value)

    @property
    @pulumi.getter
    def messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The messages to be set for the issue
        """
        return pulumi.get(self, "messages")

    @messages.setter
    def messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "messages", value)


