# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ActionArgs', 'Action']

@pulumi.input_type
class ActionArgs:
    def __init__(__self__, *,
                 workflow_id: pulumi.Input[str],
                 account: Optional[pulumi.Input[str]] = None,
                 auto_name: Optional[pulumi.Input[bool]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 channel_name: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['ActionChannelArgs']]]] = None,
                 component_and_impacts: Optional[pulumi.Input[Sequence[pulumi.Input['ActionComponentAndImpactArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['ActionHeaderArgs']]]] = None,
                 issue_title: Optional[pulumi.Input[str]] = None,
                 issue_type: Optional[pulumi.Input[str]] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 page_status_id: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 runbooks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slis: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slo: Optional[pulumi.Input[int]] = None,
                 status_and_messages: Optional[pulumi.Input[Sequence[pulumi.Input['ActionStatusAndMessageArgs']]]] = None,
                 status_page_id: Optional[pulumi.Input[int]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 webhook_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Action resource.
        :param pulumi.Input[str] workflow_id: The ID of the workflow to which this action belongs
        :param pulumi.Input[str] account: The account to be used for creating the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[bool] auto_name: Whether to automatically name the action
        :param pulumi.Input[str] body: The body of the request
        :param pulumi.Input[str] channel_id: The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
        :param pulumi.Input[str] channel_name: The name of the channel to be archived. (Only for Slack Archive Channel action)
        :param pulumi.Input[Sequence[pulumi.Input['ActionChannelArgs']]] channels: The communication channels to be added to the incident
        :param pulumi.Input[Sequence[pulumi.Input['ActionComponentAndImpactArgs']]] component_and_impacts: The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] description: The description of the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[Sequence[pulumi.Input['ActionHeaderArgs']]] headers: The headers to be sent with the request
        :param pulumi.Input[str] issue_title: The title of the issue to be added. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] issue_type: The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[str] member_id: The ID of the user to which the message is to be sent. (Only for Slack Message User action)
        :param pulumi.Input[str] message: The message to be sent. (Only for Slack/MS-Team Message Channel action)
        :param pulumi.Input[str] method: The HTTP method to be used for the call
        :param pulumi.Input[str] name: The name of the action
        :param pulumi.Input[str] note: The note to be added to the incident
        :param pulumi.Input[int] page_status_id: The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] priority: The priority of the incident
        :param pulumi.Input[str] project: The project to be used for creating the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] runbooks: The runbooks to be added to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] slis: The SLIs to be added to the incident
        :param pulumi.Input[int] slo: ID of the SLO to be added to the incident
        :param pulumi.Input[Sequence[pulumi.Input['ActionStatusAndMessageArgs']]] status_and_messages: The status and message to be set for the issue. (Only for Add Status Page Issue action)
        :param pulumi.Input[int] status_page_id: The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] subject: The subject of the email
        :param pulumi.Input[str] title: The title of the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tos: The email addresses to which the email is to be sent
        :param pulumi.Input[str] url: The URL to be called
        :param pulumi.Input[str] webhook_id: The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
        """
        pulumi.set(__self__, "workflow_id", workflow_id)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if auto_name is not None:
            pulumi.set(__self__, "auto_name", auto_name)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if channel_name is not None:
            pulumi.set(__self__, "channel_name", channel_name)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if component_and_impacts is not None:
            pulumi.set(__self__, "component_and_impacts", component_and_impacts)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if issue_title is not None:
            pulumi.set(__self__, "issue_title", issue_title)
        if issue_type is not None:
            pulumi.set(__self__, "issue_type", issue_type)
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if page_status_id is not None:
            pulumi.set(__self__, "page_status_id", page_status_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if runbooks is not None:
            pulumi.set(__self__, "runbooks", runbooks)
        if slis is not None:
            pulumi.set(__self__, "slis", slis)
        if slo is not None:
            pulumi.set(__self__, "slo", slo)
        if status_and_messages is not None:
            pulumi.set(__self__, "status_and_messages", status_and_messages)
        if status_page_id is not None:
            pulumi.set(__self__, "status_page_id", status_page_id)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if webhook_id is not None:
            pulumi.set(__self__, "webhook_id", webhook_id)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Input[str]:
        """
        The ID of the workflow to which this action belongs
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workflow_id", value)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[str]]:
        """
        The account to be used for creating the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="autoName")
    def auto_name(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically name the action
        """
        return pulumi.get(self, "auto_name")

    @auto_name.setter
    def auto_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_name", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The body of the request
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter(name="channelName")
    def channel_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the channel to be archived. (Only for Slack Archive Channel action)
        """
        return pulumi.get(self, "channel_name")

    @channel_name.setter
    def channel_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_name", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionChannelArgs']]]]:
        """
        The communication channels to be added to the incident
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="componentAndImpacts")
    def component_and_impacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionComponentAndImpactArgs']]]]:
        """
        The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "component_and_impacts")

    @component_and_impacts.setter
    def component_and_impacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionComponentAndImpactArgs']]]]):
        pulumi.set(self, "component_and_impacts", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionHeaderArgs']]]]:
        """
        The headers to be sent with the request
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="issueTitle")
    def issue_title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the issue to be added. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "issue_title")

    @issue_title.setter
    def issue_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issue_title", value)

    @property
    @pulumi.getter(name="issueType")
    def issue_type(self) -> Optional[pulumi.Input[str]]:
        """
        The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "issue_type")

    @issue_type.setter
    def issue_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issue_type", value)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the user to which the message is to be sent. (Only for Slack Message User action)
        """
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_id", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        The message to be sent. (Only for Slack/MS-Team Message Channel action)
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP method to be used for the call
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the action
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        """
        The note to be added to the incident
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter(name="pageStatusId")
    def page_status_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "page_status_id")

    @page_status_id.setter
    def page_status_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_status_id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        The priority of the incident
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The project to be used for creating the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def runbooks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The runbooks to be added to the incident
        """
        return pulumi.get(self, "runbooks")

    @runbooks.setter
    def runbooks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "runbooks", value)

    @property
    @pulumi.getter
    def slis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The SLIs to be added to the incident
        """
        return pulumi.get(self, "slis")

    @slis.setter
    def slis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "slis", value)

    @property
    @pulumi.getter
    def slo(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the SLO to be added to the incident
        """
        return pulumi.get(self, "slo")

    @slo.setter
    def slo(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slo", value)

    @property
    @pulumi.getter(name="statusAndMessages")
    def status_and_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionStatusAndMessageArgs']]]]:
        """
        The status and message to be set for the issue. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "status_and_messages")

    @status_and_messages.setter
    def status_and_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionStatusAndMessageArgs']]]]):
        pulumi.set(self, "status_and_messages", value)

    @property
    @pulumi.getter(name="statusPageId")
    def status_page_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "status_page_id")

    @status_page_id.setter
    def status_page_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_page_id", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[str]]:
        """
        The subject of the email
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The email addresses to which the email is to be sent
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to be called
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="webhookId")
    def webhook_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
        """
        return pulumi.get(self, "webhook_id")

    @webhook_id.setter
    def webhook_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webhook_id", value)


@pulumi.input_type
class _ActionState:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input[str]] = None,
                 auto_name: Optional[pulumi.Input[bool]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 channel_name: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['ActionChannelArgs']]]] = None,
                 component_and_impacts: Optional[pulumi.Input[Sequence[pulumi.Input['ActionComponentAndImpactArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['ActionHeaderArgs']]]] = None,
                 issue_title: Optional[pulumi.Input[str]] = None,
                 issue_type: Optional[pulumi.Input[str]] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 page_status_id: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 runbooks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slis: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slo: Optional[pulumi.Input[int]] = None,
                 status_and_messages: Optional[pulumi.Input[Sequence[pulumi.Input['ActionStatusAndMessageArgs']]]] = None,
                 status_page_id: Optional[pulumi.Input[int]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 webhook_id: Optional[pulumi.Input[str]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Action resources.
        :param pulumi.Input[str] account: The account to be used for creating the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[bool] auto_name: Whether to automatically name the action
        :param pulumi.Input[str] body: The body of the request
        :param pulumi.Input[str] channel_id: The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
        :param pulumi.Input[str] channel_name: The name of the channel to be archived. (Only for Slack Archive Channel action)
        :param pulumi.Input[Sequence[pulumi.Input['ActionChannelArgs']]] channels: The communication channels to be added to the incident
        :param pulumi.Input[Sequence[pulumi.Input['ActionComponentAndImpactArgs']]] component_and_impacts: The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] description: The description of the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[Sequence[pulumi.Input['ActionHeaderArgs']]] headers: The headers to be sent with the request
        :param pulumi.Input[str] issue_title: The title of the issue to be added. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] issue_type: The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[str] member_id: The ID of the user to which the message is to be sent. (Only for Slack Message User action)
        :param pulumi.Input[str] message: The message to be sent. (Only for Slack/MS-Team Message Channel action)
        :param pulumi.Input[str] method: The HTTP method to be used for the call
        :param pulumi.Input[str] name: The name of the action
        :param pulumi.Input[str] note: The note to be added to the incident
        :param pulumi.Input[int] page_status_id: The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] priority: The priority of the incident
        :param pulumi.Input[str] project: The project to be used for creating the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] runbooks: The runbooks to be added to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] slis: The SLIs to be added to the incident
        :param pulumi.Input[int] slo: ID of the SLO to be added to the incident
        :param pulumi.Input[Sequence[pulumi.Input['ActionStatusAndMessageArgs']]] status_and_messages: The status and message to be set for the issue. (Only for Add Status Page Issue action)
        :param pulumi.Input[int] status_page_id: The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] subject: The subject of the email
        :param pulumi.Input[str] title: The title of the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tos: The email addresses to which the email is to be sent
        :param pulumi.Input[str] url: The URL to be called
        :param pulumi.Input[str] webhook_id: The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
        :param pulumi.Input[str] workflow_id: The ID of the workflow to which this action belongs
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if auto_name is not None:
            pulumi.set(__self__, "auto_name", auto_name)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if channel_name is not None:
            pulumi.set(__self__, "channel_name", channel_name)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if component_and_impacts is not None:
            pulumi.set(__self__, "component_and_impacts", component_and_impacts)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if issue_title is not None:
            pulumi.set(__self__, "issue_title", issue_title)
        if issue_type is not None:
            pulumi.set(__self__, "issue_type", issue_type)
        if member_id is not None:
            pulumi.set(__self__, "member_id", member_id)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if page_status_id is not None:
            pulumi.set(__self__, "page_status_id", page_status_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if runbooks is not None:
            pulumi.set(__self__, "runbooks", runbooks)
        if slis is not None:
            pulumi.set(__self__, "slis", slis)
        if slo is not None:
            pulumi.set(__self__, "slo", slo)
        if status_and_messages is not None:
            pulumi.set(__self__, "status_and_messages", status_and_messages)
        if status_page_id is not None:
            pulumi.set(__self__, "status_page_id", status_page_id)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if webhook_id is not None:
            pulumi.set(__self__, "webhook_id", webhook_id)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[str]]:
        """
        The account to be used for creating the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="autoName")
    def auto_name(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically name the action
        """
        return pulumi.get(self, "auto_name")

    @auto_name.setter
    def auto_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_name", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The body of the request
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter(name="channelName")
    def channel_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the channel to be archived. (Only for Slack Archive Channel action)
        """
        return pulumi.get(self, "channel_name")

    @channel_name.setter
    def channel_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_name", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionChannelArgs']]]]:
        """
        The communication channels to be added to the incident
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="componentAndImpacts")
    def component_and_impacts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionComponentAndImpactArgs']]]]:
        """
        The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "component_and_impacts")

    @component_and_impacts.setter
    def component_and_impacts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionComponentAndImpactArgs']]]]):
        pulumi.set(self, "component_and_impacts", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionHeaderArgs']]]]:
        """
        The headers to be sent with the request
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="issueTitle")
    def issue_title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the issue to be added. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "issue_title")

    @issue_title.setter
    def issue_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issue_title", value)

    @property
    @pulumi.getter(name="issueType")
    def issue_type(self) -> Optional[pulumi.Input[str]]:
        """
        The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "issue_type")

    @issue_type.setter
    def issue_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issue_type", value)

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the user to which the message is to be sent. (Only for Slack Message User action)
        """
        return pulumi.get(self, "member_id")

    @member_id.setter
    def member_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "member_id", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        The message to be sent. (Only for Slack/MS-Team Message Channel action)
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP method to be used for the call
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the action
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        """
        The note to be added to the incident
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter(name="pageStatusId")
    def page_status_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "page_status_id")

    @page_status_id.setter
    def page_status_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_status_id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        The priority of the incident
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The project to be used for creating the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def runbooks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The runbooks to be added to the incident
        """
        return pulumi.get(self, "runbooks")

    @runbooks.setter
    def runbooks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "runbooks", value)

    @property
    @pulumi.getter
    def slis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The SLIs to be added to the incident
        """
        return pulumi.get(self, "slis")

    @slis.setter
    def slis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "slis", value)

    @property
    @pulumi.getter
    def slo(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the SLO to be added to the incident
        """
        return pulumi.get(self, "slo")

    @slo.setter
    def slo(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slo", value)

    @property
    @pulumi.getter(name="statusAndMessages")
    def status_and_messages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActionStatusAndMessageArgs']]]]:
        """
        The status and message to be set for the issue. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "status_and_messages")

    @status_and_messages.setter
    def status_and_messages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActionStatusAndMessageArgs']]]]):
        pulumi.set(self, "status_and_messages", value)

    @property
    @pulumi.getter(name="statusPageId")
    def status_page_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "status_page_id")

    @status_page_id.setter
    def status_page_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_page_id", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[str]]:
        """
        The subject of the email
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The email addresses to which the email is to be sent
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to be called
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="webhookId")
    def webhook_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
        """
        return pulumi.get(self, "webhook_id")

    @webhook_id.setter
    def webhook_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "webhook_id", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the workflow to which this action belongs
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_id", value)


class Action(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[str]] = None,
                 auto_name: Optional[pulumi.Input[bool]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 channel_name: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionChannelArgs']]]]] = None,
                 component_and_impacts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionComponentAndImpactArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionHeaderArgs']]]]] = None,
                 issue_title: Optional[pulumi.Input[str]] = None,
                 issue_type: Optional[pulumi.Input[str]] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 page_status_id: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 runbooks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slis: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slo: Optional[pulumi.Input[int]] = None,
                 status_and_messages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionStatusAndMessageArgs']]]]] = None,
                 status_page_id: Optional[pulumi.Input[int]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 webhook_id: Optional[pulumi.Input[str]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account: The account to be used for creating the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[bool] auto_name: Whether to automatically name the action
        :param pulumi.Input[str] body: The body of the request
        :param pulumi.Input[str] channel_id: The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
        :param pulumi.Input[str] channel_name: The name of the channel to be archived. (Only for Slack Archive Channel action)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionChannelArgs']]]] channels: The communication channels to be added to the incident
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionComponentAndImpactArgs']]]] component_and_impacts: The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] description: The description of the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionHeaderArgs']]]] headers: The headers to be sent with the request
        :param pulumi.Input[str] issue_title: The title of the issue to be added. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] issue_type: The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[str] member_id: The ID of the user to which the message is to be sent. (Only for Slack Message User action)
        :param pulumi.Input[str] message: The message to be sent. (Only for Slack/MS-Team Message Channel action)
        :param pulumi.Input[str] method: The HTTP method to be used for the call
        :param pulumi.Input[str] name: The name of the action
        :param pulumi.Input[str] note: The note to be added to the incident
        :param pulumi.Input[int] page_status_id: The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] priority: The priority of the incident
        :param pulumi.Input[str] project: The project to be used for creating the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] runbooks: The runbooks to be added to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] slis: The SLIs to be added to the incident
        :param pulumi.Input[int] slo: ID of the SLO to be added to the incident
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionStatusAndMessageArgs']]]] status_and_messages: The status and message to be set for the issue. (Only for Add Status Page Issue action)
        :param pulumi.Input[int] status_page_id: The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] subject: The subject of the email
        :param pulumi.Input[str] title: The title of the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tos: The email addresses to which the email is to be sent
        :param pulumi.Input[str] url: The URL to be called
        :param pulumi.Input[str] webhook_id: The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
        :param pulumi.Input[str] workflow_id: The ID of the workflow to which this action belongs
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param ActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[str]] = None,
                 auto_name: Optional[pulumi.Input[bool]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 channel_name: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionChannelArgs']]]]] = None,
                 component_and_impacts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionComponentAndImpactArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionHeaderArgs']]]]] = None,
                 issue_title: Optional[pulumi.Input[str]] = None,
                 issue_type: Optional[pulumi.Input[str]] = None,
                 member_id: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 page_status_id: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 runbooks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slis: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slo: Optional[pulumi.Input[int]] = None,
                 status_and_messages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionStatusAndMessageArgs']]]]] = None,
                 status_page_id: Optional[pulumi.Input[int]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 webhook_id: Optional[pulumi.Input[str]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ActionArgs.__new__(ActionArgs)

            __props__.__dict__["account"] = account
            __props__.__dict__["auto_name"] = auto_name
            __props__.__dict__["body"] = body
            __props__.__dict__["channel_id"] = channel_id
            __props__.__dict__["channel_name"] = channel_name
            __props__.__dict__["channels"] = channels
            __props__.__dict__["component_and_impacts"] = component_and_impacts
            __props__.__dict__["description"] = description
            __props__.__dict__["headers"] = headers
            __props__.__dict__["issue_title"] = issue_title
            __props__.__dict__["issue_type"] = issue_type
            __props__.__dict__["member_id"] = member_id
            __props__.__dict__["message"] = message
            __props__.__dict__["method"] = method
            __props__.__dict__["name"] = name
            __props__.__dict__["note"] = note
            __props__.__dict__["page_status_id"] = page_status_id
            __props__.__dict__["priority"] = priority
            __props__.__dict__["project"] = project
            __props__.__dict__["runbooks"] = runbooks
            __props__.__dict__["slis"] = slis
            __props__.__dict__["slo"] = slo
            __props__.__dict__["status_and_messages"] = status_and_messages
            __props__.__dict__["status_page_id"] = status_page_id
            __props__.__dict__["subject"] = subject
            __props__.__dict__["title"] = title
            __props__.__dict__["tos"] = tos
            __props__.__dict__["url"] = url
            __props__.__dict__["webhook_id"] = webhook_id
            if workflow_id is None and not opts.urn:
                raise TypeError("Missing required property 'workflow_id'")
            __props__.__dict__["workflow_id"] = workflow_id
        super(Action, __self__).__init__(
            'squadcast:workflow/action:Action',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account: Optional[pulumi.Input[str]] = None,
            auto_name: Optional[pulumi.Input[bool]] = None,
            body: Optional[pulumi.Input[str]] = None,
            channel_id: Optional[pulumi.Input[str]] = None,
            channel_name: Optional[pulumi.Input[str]] = None,
            channels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionChannelArgs']]]]] = None,
            component_and_impacts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionComponentAndImpactArgs']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionHeaderArgs']]]]] = None,
            issue_title: Optional[pulumi.Input[str]] = None,
            issue_type: Optional[pulumi.Input[str]] = None,
            member_id: Optional[pulumi.Input[str]] = None,
            message: Optional[pulumi.Input[str]] = None,
            method: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            note: Optional[pulumi.Input[str]] = None,
            page_status_id: Optional[pulumi.Input[int]] = None,
            priority: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            runbooks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            slis: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            slo: Optional[pulumi.Input[int]] = None,
            status_and_messages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionStatusAndMessageArgs']]]]] = None,
            status_page_id: Optional[pulumi.Input[int]] = None,
            subject: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None,
            tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            url: Optional[pulumi.Input[str]] = None,
            webhook_id: Optional[pulumi.Input[str]] = None,
            workflow_id: Optional[pulumi.Input[str]] = None) -> 'Action':
        """
        Get an existing Action resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account: The account to be used for creating the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[bool] auto_name: Whether to automatically name the action
        :param pulumi.Input[str] body: The body of the request
        :param pulumi.Input[str] channel_id: The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
        :param pulumi.Input[str] channel_name: The name of the channel to be archived. (Only for Slack Archive Channel action)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionChannelArgs']]]] channels: The communication channels to be added to the incident
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionComponentAndImpactArgs']]]] component_and_impacts: The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] description: The description of the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionHeaderArgs']]]] headers: The headers to be sent with the request
        :param pulumi.Input[str] issue_title: The title of the issue to be added. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] issue_type: The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[str] member_id: The ID of the user to which the message is to be sent. (Only for Slack Message User action)
        :param pulumi.Input[str] message: The message to be sent. (Only for Slack/MS-Team Message Channel action)
        :param pulumi.Input[str] method: The HTTP method to be used for the call
        :param pulumi.Input[str] name: The name of the action
        :param pulumi.Input[str] note: The note to be added to the incident
        :param pulumi.Input[int] page_status_id: The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] priority: The priority of the incident
        :param pulumi.Input[str] project: The project to be used for creating the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] runbooks: The runbooks to be added to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] slis: The SLIs to be added to the incident
        :param pulumi.Input[int] slo: ID of the SLO to be added to the incident
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActionStatusAndMessageArgs']]]] status_and_messages: The status and message to be set for the issue. (Only for Add Status Page Issue action)
        :param pulumi.Input[int] status_page_id: The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
        :param pulumi.Input[str] subject: The subject of the email
        :param pulumi.Input[str] title: The title of the ticket. (Only for Jira Create Ticket action)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tos: The email addresses to which the email is to be sent
        :param pulumi.Input[str] url: The URL to be called
        :param pulumi.Input[str] webhook_id: The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
        :param pulumi.Input[str] workflow_id: The ID of the workflow to which this action belongs
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ActionState.__new__(_ActionState)

        __props__.__dict__["account"] = account
        __props__.__dict__["auto_name"] = auto_name
        __props__.__dict__["body"] = body
        __props__.__dict__["channel_id"] = channel_id
        __props__.__dict__["channel_name"] = channel_name
        __props__.__dict__["channels"] = channels
        __props__.__dict__["component_and_impacts"] = component_and_impacts
        __props__.__dict__["description"] = description
        __props__.__dict__["headers"] = headers
        __props__.__dict__["issue_title"] = issue_title
        __props__.__dict__["issue_type"] = issue_type
        __props__.__dict__["member_id"] = member_id
        __props__.__dict__["message"] = message
        __props__.__dict__["method"] = method
        __props__.__dict__["name"] = name
        __props__.__dict__["note"] = note
        __props__.__dict__["page_status_id"] = page_status_id
        __props__.__dict__["priority"] = priority
        __props__.__dict__["project"] = project
        __props__.__dict__["runbooks"] = runbooks
        __props__.__dict__["slis"] = slis
        __props__.__dict__["slo"] = slo
        __props__.__dict__["status_and_messages"] = status_and_messages
        __props__.__dict__["status_page_id"] = status_page_id
        __props__.__dict__["subject"] = subject
        __props__.__dict__["title"] = title
        __props__.__dict__["tos"] = tos
        __props__.__dict__["url"] = url
        __props__.__dict__["webhook_id"] = webhook_id
        __props__.__dict__["workflow_id"] = workflow_id
        return Action(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Output[Optional[str]]:
        """
        The account to be used for creating the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="autoName")
    def auto_name(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to automatically name the action
        """
        return pulumi.get(self, "auto_name")

    @property
    @pulumi.getter
    def body(self) -> pulumi.Output[Optional[str]]:
        """
        The body of the request
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the channel to which the message is to be sent. (Only for Slack/MS-Team Message Channel action)
        """
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter(name="channelName")
    def channel_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the channel to be archived. (Only for Slack Archive Channel action)
        """
        return pulumi.get(self, "channel_name")

    @property
    @pulumi.getter
    def channels(self) -> pulumi.Output[Optional[Sequence['outputs.ActionChannel']]]:
        """
        The communication channels to be added to the incident
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter(name="componentAndImpacts")
    def component_and_impacts(self) -> pulumi.Output[Optional[Sequence['outputs.ActionComponentAndImpact']]]:
        """
        The components and their impact to be set for the issue. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "component_and_impacts")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def headers(self) -> pulumi.Output[Optional[Sequence['outputs.ActionHeader']]]:
        """
        The headers to be sent with the request
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="issueTitle")
    def issue_title(self) -> pulumi.Output[Optional[str]]:
        """
        The title of the issue to be added. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "issue_title")

    @property
    @pulumi.getter(name="issueType")
    def issue_type(self) -> pulumi.Output[Optional[str]]:
        """
        The issue type to be used for creating the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "issue_type")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the user to which the message is to be sent. (Only for Slack Message User action)
        """
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[Optional[str]]:
        """
        The message to be sent. (Only for Slack/MS-Team Message Channel action)
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def method(self) -> pulumi.Output[Optional[str]]:
        """
        The HTTP method to be used for the call
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the action
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def note(self) -> pulumi.Output[Optional[str]]:
        """
        The note to be added to the incident
        """
        return pulumi.get(self, "note")

    @property
    @pulumi.getter(name="pageStatusId")
    def page_status_id(self) -> pulumi.Output[Optional[int]]:
        """
        The ID of the status to be set for the issue. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "page_status_id")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[str]]:
        """
        The priority of the incident
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[Optional[str]]:
        """
        The project to be used for creating the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def runbooks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The runbooks to be added to the incident
        """
        return pulumi.get(self, "runbooks")

    @property
    @pulumi.getter
    def slis(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The SLIs to be added to the incident
        """
        return pulumi.get(self, "slis")

    @property
    @pulumi.getter
    def slo(self) -> pulumi.Output[Optional[int]]:
        """
        ID of the SLO to be added to the incident
        """
        return pulumi.get(self, "slo")

    @property
    @pulumi.getter(name="statusAndMessages")
    def status_and_messages(self) -> pulumi.Output[Optional[Sequence['outputs.ActionStatusAndMessage']]]:
        """
        The status and message to be set for the issue. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "status_and_messages")

    @property
    @pulumi.getter(name="statusPageId")
    def status_page_id(self) -> pulumi.Output[Optional[int]]:
        """
        The ID of the status page to which the issue is to be added. (Only for Add Status Page Issue action)
        """
        return pulumi.get(self, "status_page_id")

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Output[Optional[str]]:
        """
        The subject of the email
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[Optional[str]]:
        """
        The title of the ticket. (Only for Jira Create Ticket action)
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def tos(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The email addresses to which the email is to be sent
        """
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[Optional[str]]:
        """
        The URL to be called
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="webhookId")
    def webhook_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the webhook to be triggered. (Only for Trigger Manual Webhook action)
        """
        return pulumi.get(self, "webhook_id")

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Output[str]:
        """
        The ID of the workflow to which this action belongs
        """
        return pulumi.get(self, "workflow_id")

