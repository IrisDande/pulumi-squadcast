# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ActionChannel',
    'ActionComponentAndImpact',
    'ActionHeader',
    'ActionStatusAndMessage',
]

@pulumi.output_type
class ActionChannel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayText":
            suggest = "display_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionChannel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionChannel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionChannel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_text: str,
                 link: str,
                 type: str):
        """
        :param str display_text: The display text of the communication channel
        :param str link: The link of the communication channel
        :param str type: The type of the communication channel
        """
        pulumi.set(__self__, "display_text", display_text)
        pulumi.set(__self__, "link", link)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="displayText")
    def display_text(self) -> str:
        """
        The display text of the communication channel
        """
        return pulumi.get(self, "display_text")

    @property
    @pulumi.getter
    def link(self) -> str:
        """
        The link of the communication channel
        """
        return pulumi.get(self, "link")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the communication channel
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ActionComponentAndImpact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentId":
            suggest = "component_id"
        elif key == "impactStatusId":
            suggest = "impact_status_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionComponentAndImpact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionComponentAndImpact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionComponentAndImpact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_id: int,
                 impact_status_id: int):
        """
        :param int component_id: The ID of the component
        :param int impact_status_id: The ID of the impact status
        """
        pulumi.set(__self__, "component_id", component_id)
        pulumi.set(__self__, "impact_status_id", impact_status_id)

    @property
    @pulumi.getter(name="componentId")
    def component_id(self) -> int:
        """
        The ID of the component
        """
        return pulumi.get(self, "component_id")

    @property
    @pulumi.getter(name="impactStatusId")
    def impact_status_id(self) -> int:
        """
        The ID of the impact status
        """
        return pulumi.get(self, "impact_status_id")


@pulumi.output_type
class ActionHeader(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of the header
        :param str value: The value of the header
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the header
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the header
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ActionStatusAndMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusId":
            suggest = "status_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ActionStatusAndMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ActionStatusAndMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ActionStatusAndMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status_id: int,
                 messages: Optional[Sequence[str]] = None):
        """
        :param int status_id: The ID of the status
        :param Sequence[str] messages: The messages to be set for the issue
        """
        pulumi.set(__self__, "status_id", status_id)
        if messages is not None:
            pulumi.set(__self__, "messages", messages)

    @property
    @pulumi.getter(name="statusId")
    def status_id(self) -> int:
        """
        The ID of the status
        """
        return pulumi.get(self, "status_id")

    @property
    @pulumi.getter
    def messages(self) -> Optional[Sequence[str]]:
        """
        The messages to be set for the issue
        """
        return pulumi.get(self, "messages")


