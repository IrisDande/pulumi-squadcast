# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WorkflowActionOrderingArgs', 'WorkflowActionOrdering']

@pulumi.input_type
class WorkflowActionOrderingArgs:
    def __init__(__self__, *,
                 action_orders: pulumi.Input[Sequence[pulumi.Input[int]]],
                 workflow_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a WorkflowActionOrdering resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] action_orders: The order of actions in the workflow
        :param pulumi.Input[str] workflow_id: The ID of the workflow
        """
        pulumi.set(__self__, "action_orders", action_orders)
        pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter(name="actionOrders")
    def action_orders(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        The order of actions in the workflow
        """
        return pulumi.get(self, "action_orders")

    @action_orders.setter
    def action_orders(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "action_orders", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Input[str]:
        """
        The ID of the workflow
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workflow_id", value)


@pulumi.input_type
class _WorkflowActionOrderingState:
    def __init__(__self__, *,
                 action_orders: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WorkflowActionOrdering resources.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] action_orders: The order of actions in the workflow
        :param pulumi.Input[str] workflow_id: The ID of the workflow
        """
        if action_orders is not None:
            pulumi.set(__self__, "action_orders", action_orders)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter(name="actionOrders")
    def action_orders(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The order of actions in the workflow
        """
        return pulumi.get(self, "action_orders")

    @action_orders.setter
    def action_orders(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "action_orders", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the workflow
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_id", value)


class WorkflowActionOrdering(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_orders: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] action_orders: The order of actions in the workflow
        :param pulumi.Input[str] workflow_id: The ID of the workflow
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkflowActionOrderingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param WorkflowActionOrderingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkflowActionOrderingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_orders: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkflowActionOrderingArgs.__new__(WorkflowActionOrderingArgs)

            if action_orders is None and not opts.urn:
                raise TypeError("Missing required property 'action_orders'")
            __props__.__dict__["action_orders"] = action_orders
            if workflow_id is None and not opts.urn:
                raise TypeError("Missing required property 'workflow_id'")
            __props__.__dict__["workflow_id"] = workflow_id
        super(WorkflowActionOrdering, __self__).__init__(
            'squadcast:index/workflowActionOrdering:WorkflowActionOrdering',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_orders: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            workflow_id: Optional[pulumi.Input[str]] = None) -> 'WorkflowActionOrdering':
        """
        Get an existing WorkflowActionOrdering resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] action_orders: The order of actions in the workflow
        :param pulumi.Input[str] workflow_id: The ID of the workflow
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkflowActionOrderingState.__new__(_WorkflowActionOrderingState)

        __props__.__dict__["action_orders"] = action_orders
        __props__.__dict__["workflow_id"] = workflow_id
        return WorkflowActionOrdering(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="actionOrders")
    def action_orders(self) -> pulumi.Output[Sequence[int]]:
        """
        The order of actions in the workflow
        """
        return pulumi.get(self, "action_orders")

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Output[str]:
        """
        The ID of the workflow
        """
        return pulumi.get(self, "workflow_id")

